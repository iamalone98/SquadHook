#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NLAW

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_NLAW.BP_NLAW_C.ExecuteUbergraph_BP_NLAW
// 0x01E0 (0x01E0 - 0x0000)
struct BP_NLAW_C_ExecuteUbergraph_BP_NLAW final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3004[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue;              // 0x0008(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0060(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00A0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F0(0x0018)()
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3005[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetNewAimDirection_New_Aim_Direction;     // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetNewAimDirection_Aim_Point;             // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Vector_CosineAngle2D_ReturnValue;         // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegAcos_ReturnValue;                      // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EstimateStability_IsStable;               // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3006[0x3];                                     // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_EstimateStability_DeviationPercent;       // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0148(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SignOfFloat_ReturnValue;                  // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewZoom;                             // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3007[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x016C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3008[0x4];                                     // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0180(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0188(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0198(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue_1;          // 0x01A3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3009[0x4];                                     // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwnerPawn_ReturnValue;                 // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_NewState;                       // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue_2;          // 0x01B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x01B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsZoomed_ReturnValue;                     // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x01B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue_3;          // 0x01B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x01B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSoldierValid_Result;                    // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSoldierValid_Result_1;                  // 0x01B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_300A[0x6];                                     // 0x01BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_300B[0x4];                                     // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               K2Node_DynamicCast_AsMaterial_Instance_Dynamic;    // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW) == 0x000008, "Wrong alignment on BP_NLAW_C_ExecuteUbergraph_BP_NLAW");
static_assert(sizeof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW) == 0x0001E0, "Wrong size on BP_NLAW_C_ExecuteUbergraph_BP_NLAW");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, EntryPoint) == 0x000000, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000004, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_Conv_BoolToText_ReturnValue) == 0x000008, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_Conv_BoolToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, K2Node_MakeStruct_FormatArgumentData_1) == 0x000060, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000A0, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, K2Node_MakeArray_Array) == 0x0000E0, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_Format_ReturnValue) == 0x0000F0, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000108, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_Conv_TextToString_ReturnValue) == 0x000110, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_GetNewAimDirection_New_Aim_Direction) == 0x000120, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_GetNewAimDirection_New_Aim_Direction' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_GetNewAimDirection_Aim_Point) == 0x00012C, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_GetNewAimDirection_Aim_Point' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_Vector_CosineAngle2D_ReturnValue) == 0x000138, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_Vector_CosineAngle2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_DegAcos_ReturnValue) == 0x00013C, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_EstimateStability_IsStable) == 0x000140, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_EstimateStability_IsStable' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_EstimateStability_DeviationPercent) == 0x000144, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_EstimateStability_DeviationPercent' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_Cross_VectorVector_ReturnValue) == 0x000148, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_BreakVector_X) == 0x000154, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_BreakVector_Y) == 0x000158, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_BreakVector_Z) == 0x00015C, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_SignOfFloat_ReturnValue) == 0x000160, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_SignOfFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000164, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, K2Node_Event_bNewZoom) == 0x000168, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::K2Node_Event_bNewZoom' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, K2Node_CreateDelegate_OutputDelegate) == 0x00016C, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000180, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, K2Node_CreateDelegate_OutputDelegate_1) == 0x000188, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000198, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_IsDedicatedServer_ReturnValue) == 0x0001A0, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001A1, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_BooleanAND_ReturnValue) == 0x0001A2, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_NotEqual_BoolBool_ReturnValue_1) == 0x0001A3, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_NotEqual_BoolBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_GetOwnerPawn_ReturnValue) == 0x0001A8, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_GetOwnerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_IsLocallyControlled_ReturnValue) == 0x0001B0, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, K2Node_CustomEvent_NewState) == 0x0001B1, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::K2Node_CustomEvent_NewState' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_NotEqual_BoolBool_ReturnValue_2) == 0x0001B2, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_NotEqual_BoolBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0001B3, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_IsZoomed_ReturnValue) == 0x0001B4, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_IsZoomed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_BooleanAND_ReturnValue_1) == 0x0001B5, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_NotEqual_BoolBool_ReturnValue_3) == 0x0001B6, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_NotEqual_BoolBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x0001B7, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_IsSoldierValid_Result) == 0x0001B8, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_IsSoldierValid_Result' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_IsSoldierValid_Result_1) == 0x0001B9, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_IsSoldierValid_Result_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_GetMaterial_ReturnValue) == 0x0001C0, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, CallFunc_SelectFloat_ReturnValue) == 0x0001C8, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, K2Node_DynamicCast_AsMaterial_Instance_Dynamic) == 0x0001D0, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::K2Node_DynamicCast_AsMaterial_Instance_Dynamic' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_ExecuteUbergraph_BP_NLAW, K2Node_DynamicCast_bSuccess) == 0x0001D8, "Member 'BP_NLAW_C_ExecuteUbergraph_BP_NLAW::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_NLAW.BP_NLAW_C.UpdateInertiaTrackerStateOnServer
// 0x0001 (0x0001 - 0x0000)
struct BP_NLAW_C_UpdateInertiaTrackerStateOnServer final
{
public:
	bool                                          NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NLAW_C_UpdateInertiaTrackerStateOnServer) == 0x000001, "Wrong alignment on BP_NLAW_C_UpdateInertiaTrackerStateOnServer");
static_assert(sizeof(BP_NLAW_C_UpdateInertiaTrackerStateOnServer) == 0x000001, "Wrong size on BP_NLAW_C_UpdateInertiaTrackerStateOnServer");
static_assert(offsetof(BP_NLAW_C_UpdateInertiaTrackerStateOnServer, NewState) == 0x000000, "Member 'BP_NLAW_C_UpdateInertiaTrackerStateOnServer::NewState' has a wrong offset!");

// Function BP_NLAW.BP_NLAW_C.BlueprintOnZoom
// 0x0001 (0x0001 - 0x0000)
struct BP_NLAW_C_BlueprintOnZoom final
{
public:
	bool                                          bNewZoom;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NLAW_C_BlueprintOnZoom) == 0x000001, "Wrong alignment on BP_NLAW_C_BlueprintOnZoom");
static_assert(sizeof(BP_NLAW_C_BlueprintOnZoom) == 0x000001, "Wrong size on BP_NLAW_C_BlueprintOnZoom");
static_assert(offsetof(BP_NLAW_C_BlueprintOnZoom, bNewZoom) == 0x000000, "Member 'BP_NLAW_C_BlueprintOnZoom::bNewZoom' has a wrong offset!");

// Function BP_NLAW.BP_NLAW_C.GetNewAimDirection
// 0x0038 (0x0038 - 0x0000)
struct BP_NLAW_C_GetNewAimDirection final
{
public:
	struct FVector                                Param_New_Aim_Direction;                           // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Aim_Point;                                         // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NLAW_C_GetNewAimDirection) == 0x000008, "Wrong alignment on BP_NLAW_C_GetNewAimDirection");
static_assert(sizeof(BP_NLAW_C_GetNewAimDirection) == 0x000038, "Wrong size on BP_NLAW_C_GetNewAimDirection");
static_assert(offsetof(BP_NLAW_C_GetNewAimDirection, Param_New_Aim_Direction) == 0x000000, "Member 'BP_NLAW_C_GetNewAimDirection::Param_New_Aim_Direction' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_GetNewAimDirection, Aim_Point) == 0x00000C, "Member 'BP_NLAW_C_GetNewAimDirection::Aim_Point' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_GetNewAimDirection, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_NLAW_C_GetNewAimDirection::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_GetNewAimDirection, CallFunc_GetActorForwardVector_ReturnValue) == 0x000020, "Member 'BP_NLAW_C_GetNewAimDirection::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_GetNewAimDirection, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00002C, "Member 'BP_NLAW_C_GetNewAimDirection::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_NLAW.BP_NLAW_C.GetAverageRotationAnglePerSecond
// 0x0008 (0x0008 - 0x0000)
struct BP_NLAW_C_GetAverageRotationAnglePerSecond final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NLAW_C_GetAverageRotationAnglePerSecond) == 0x000004, "Wrong alignment on BP_NLAW_C_GetAverageRotationAnglePerSecond");
static_assert(sizeof(BP_NLAW_C_GetAverageRotationAnglePerSecond) == 0x000008, "Wrong size on BP_NLAW_C_GetAverageRotationAnglePerSecond");
static_assert(offsetof(BP_NLAW_C_GetAverageRotationAnglePerSecond, Angle) == 0x000000, "Member 'BP_NLAW_C_GetAverageRotationAnglePerSecond::Angle' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_GetAverageRotationAnglePerSecond, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_NLAW_C_GetAverageRotationAnglePerSecond::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_NLAW.BP_NLAW_C.LogDirectionDeltaAngle
// 0x0014 (0x0014 - 0x0000)
struct BP_NLAW_C_LogDirectionDeltaAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NLAW_C_LogDirectionDeltaAngle) == 0x000004, "Wrong alignment on BP_NLAW_C_LogDirectionDeltaAngle");
static_assert(sizeof(BP_NLAW_C_LogDirectionDeltaAngle) == 0x000014, "Wrong size on BP_NLAW_C_LogDirectionDeltaAngle");
static_assert(offsetof(BP_NLAW_C_LogDirectionDeltaAngle, Angle) == 0x000000, "Member 'BP_NLAW_C_LogDirectionDeltaAngle::Angle' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_LogDirectionDeltaAngle, Temp_int_Variable) == 0x000004, "Member 'BP_NLAW_C_LogDirectionDeltaAngle::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_LogDirectionDeltaAngle, CallFunc_Subtract_IntInt_ReturnValue) == 0x000008, "Member 'BP_NLAW_C_LogDirectionDeltaAngle::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_LogDirectionDeltaAngle, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_NLAW_C_LogDirectionDeltaAngle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_LogDirectionDeltaAngle, CallFunc_Greater_IntInt_ReturnValue) == 0x000010, "Member 'BP_NLAW_C_LogDirectionDeltaAngle::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function BP_NLAW.BP_NLAW_C.EstimateStability
// 0x00B8 (0x00B8 - 0x0000)
struct BP_NLAW_C_EstimateStability final
{
public:
	bool                                          IsStable;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_300C[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeviationPercent;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UseOnlyNumSamples;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_300D[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 LocalDeltasArray;                                  // 0x0010(0x0010)(Edit, BlueprintVisible)
	int32                                         WeightSum;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeightedAverage;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LStartIndex;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SamplesCount;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_PreviousAverageSpeed;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_300E[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item;                           // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_300F[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_1;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3010[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Array_Get_Item_2;                         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3011[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3012[0x3];                                     // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3013[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NLAW_C_EstimateStability) == 0x000008, "Wrong alignment on BP_NLAW_C_EstimateStability");
static_assert(sizeof(BP_NLAW_C_EstimateStability) == 0x0000B8, "Wrong size on BP_NLAW_C_EstimateStability");
static_assert(offsetof(BP_NLAW_C_EstimateStability, IsStable) == 0x000000, "Member 'BP_NLAW_C_EstimateStability::IsStable' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, DeviationPercent) == 0x000004, "Member 'BP_NLAW_C_EstimateStability::DeviationPercent' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, UseOnlyNumSamples) == 0x000008, "Member 'BP_NLAW_C_EstimateStability::UseOnlyNumSamples' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, LocalDeltasArray) == 0x000010, "Member 'BP_NLAW_C_EstimateStability::LocalDeltasArray' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, WeightSum) == 0x000020, "Member 'BP_NLAW_C_EstimateStability::WeightSum' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, WeightedAverage) == 0x000024, "Member 'BP_NLAW_C_EstimateStability::WeightedAverage' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, LStartIndex) == 0x000028, "Member 'BP_NLAW_C_EstimateStability::LStartIndex' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, SamplesCount) == 0x00002C, "Member 'BP_NLAW_C_EstimateStability::SamplesCount' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, L_PreviousAverageSpeed) == 0x000030, "Member 'BP_NLAW_C_EstimateStability::L_PreviousAverageSpeed' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, Temp_int_Array_Index_Variable) == 0x000034, "Member 'BP_NLAW_C_EstimateStability::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Add_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_NLAW_C_EstimateStability::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000040, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Subtract_IntInt_ReturnValue) == 0x000044, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000048, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, Temp_int_Loop_Counter_Variable) == 0x000050, "Member 'BP_NLAW_C_EstimateStability::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Add_IntInt_ReturnValue) == 0x000054, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Add_IntInt_ReturnValue_1) == 0x000058, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Array_Get_Item) == 0x00005C, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000060, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000068, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, Temp_int_Variable) == 0x000070, "Member 'BP_NLAW_C_EstimateStability::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000074, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Array_Get_Item_1) == 0x000078, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x00007C, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Array_Add_ReturnValue) == 0x000080, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Add_IntInt_ReturnValue_2) == 0x000084, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000088, "Member 'BP_NLAW_C_EstimateStability::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Array_Get_Item_2) == 0x00008C, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Array_Add_ReturnValue_1) == 0x000090, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000094, "Member 'BP_NLAW_C_EstimateStability::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Add_IntInt_ReturnValue_3) == 0x000098, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, Temp_bool_Variable) == 0x00009C, "Member 'BP_NLAW_C_EstimateStability::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Array_Length_ReturnValue_1) == 0x0000A0, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, K2Node_Select_Default) == 0x0000A4, "Member 'BP_NLAW_C_EstimateStability::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0000A8, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Abs_ReturnValue) == 0x0000AC, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000B0, "Member 'BP_NLAW_C_EstimateStability::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_EstimateStability, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000B4, "Member 'BP_NLAW_C_EstimateStability::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_NLAW.BP_NLAW_C.OnRep_LastAverageSpeed
// 0x0018 (0x0018 - 0x0000)
struct BP_NLAW_C_OnRep_LastAverageSpeed final
{
public:
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3014[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwnerPawn_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NLAW_C_OnRep_LastAverageSpeed) == 0x000008, "Wrong alignment on BP_NLAW_C_OnRep_LastAverageSpeed");
static_assert(sizeof(BP_NLAW_C_OnRep_LastAverageSpeed) == 0x000018, "Wrong size on BP_NLAW_C_OnRep_LastAverageSpeed");
static_assert(offsetof(BP_NLAW_C_OnRep_LastAverageSpeed, CallFunc_IsDedicatedServer_ReturnValue) == 0x000000, "Member 'BP_NLAW_C_OnRep_LastAverageSpeed::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_OnRep_LastAverageSpeed, CallFunc_GetOwnerPawn_ReturnValue) == 0x000008, "Member 'BP_NLAW_C_OnRep_LastAverageSpeed::CallFunc_GetOwnerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_OnRep_LastAverageSpeed, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BP_NLAW_C_OnRep_LastAverageSpeed::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_OnRep_LastAverageSpeed, CallFunc_IsLocallyControlled_ReturnValue) == 0x000011, "Member 'BP_NLAW_C_OnRep_LastAverageSpeed::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_OnRep_LastAverageSpeed, CallFunc_Not_PreBool_ReturnValue_1) == 0x000012, "Member 'BP_NLAW_C_OnRep_LastAverageSpeed::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_OnRep_LastAverageSpeed, CallFunc_BooleanAND_ReturnValue) == 0x000013, "Member 'BP_NLAW_C_OnRep_LastAverageSpeed::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_NLAW.BP_NLAW_C.IsSoldierValid
// 0x0020 (0x0020 - 0x0000)
struct BP_NLAW_C_IsSoldierValid final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3015[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetOwnerPawn_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQSoldier*                             K2Node_DynamicCast_AsSQSoldier;                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAlive_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NLAW_C_IsSoldierValid) == 0x000008, "Wrong alignment on BP_NLAW_C_IsSoldierValid");
static_assert(sizeof(BP_NLAW_C_IsSoldierValid) == 0x000020, "Wrong size on BP_NLAW_C_IsSoldierValid");
static_assert(offsetof(BP_NLAW_C_IsSoldierValid, Result) == 0x000000, "Member 'BP_NLAW_C_IsSoldierValid::Result' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_IsSoldierValid, CallFunc_GetOwnerPawn_ReturnValue) == 0x000008, "Member 'BP_NLAW_C_IsSoldierValid::CallFunc_GetOwnerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_IsSoldierValid, K2Node_DynamicCast_AsSQSoldier) == 0x000010, "Member 'BP_NLAW_C_IsSoldierValid::K2Node_DynamicCast_AsSQSoldier' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_IsSoldierValid, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_NLAW_C_IsSoldierValid::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_IsSoldierValid, CallFunc_IsAlive_ReturnValue) == 0x000019, "Member 'BP_NLAW_C_IsSoldierValid::CallFunc_IsAlive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_IsSoldierValid, CallFunc_Not_PreBool_ReturnValue) == 0x00001A, "Member 'BP_NLAW_C_IsSoldierValid::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_IsSoldierValid, CallFunc_BooleanAND_ReturnValue) == 0x00001B, "Member 'BP_NLAW_C_IsSoldierValid::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_NLAW.BP_NLAW_C.GetGuidanceEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_NLAW_C_GetGuidanceEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_NLAW_C_GetGuidanceEnabled) == 0x000001, "Wrong alignment on BP_NLAW_C_GetGuidanceEnabled");
static_assert(sizeof(BP_NLAW_C_GetGuidanceEnabled) == 0x000001, "Wrong size on BP_NLAW_C_GetGuidanceEnabled");
static_assert(offsetof(BP_NLAW_C_GetGuidanceEnabled, bEnabled) == 0x000000, "Member 'BP_NLAW_C_GetGuidanceEnabled::bEnabled' has a wrong offset!");

// Function BP_NLAW.BP_NLAW_C.GetTargetAngularSpeedDegrees
// 0x0014 (0x0014 - 0x0000)
struct BP_NLAW_C_GetTargetAngularSpeedDegrees final
{
public:
	float                                         Target_Angular_Speed;                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3016[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NLAW_C_GetTargetAngularSpeedDegrees) == 0x000004, "Wrong alignment on BP_NLAW_C_GetTargetAngularSpeedDegrees");
static_assert(sizeof(BP_NLAW_C_GetTargetAngularSpeedDegrees) == 0x000014, "Wrong size on BP_NLAW_C_GetTargetAngularSpeedDegrees");
static_assert(offsetof(BP_NLAW_C_GetTargetAngularSpeedDegrees, Target_Angular_Speed) == 0x000000, "Member 'BP_NLAW_C_GetTargetAngularSpeedDegrees::Target_Angular_Speed' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_GetTargetAngularSpeedDegrees, Temp_bool_Variable) == 0x000004, "Member 'BP_NLAW_C_GetTargetAngularSpeedDegrees::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_GetTargetAngularSpeedDegrees, Temp_float_Variable) == 0x000008, "Member 'BP_NLAW_C_GetTargetAngularSpeedDegrees::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_GetTargetAngularSpeedDegrees, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_NLAW_C_GetTargetAngularSpeedDegrees::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NLAW_C_GetTargetAngularSpeedDegrees, K2Node_Select_Default) == 0x000010, "Member 'BP_NLAW_C_GetTargetAngularSpeedDegrees::K2Node_Select_Default' has a wrong offset!");

}

