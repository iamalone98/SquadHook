#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_SQMapBody

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Squad_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_SQMapBody.W_SQMapBody_C
// 0x0090 (0x0320 - 0x0290)
class UW_SQMapBody_C final : public USQMapWidgetBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class URelativeCanvasPanel*                   ElementsRoot;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           FixedSizeLayer;                                    // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_SQMapGridLines_C*                    GridLines;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_SQMapHorizontalBar_C*                HorizontalBar;                                     // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MapBoundary;                                       // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MapImage;                                          // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           PanLayer;                                          // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_SQMapScaleBars_C*                    Scalebars;                                         // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TB_MapName;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MapLattice_C*                        UMG_MapLattice;                                    // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_SQMapVerticalBar_C*                  VerticalBar;                                       // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_SQMapOrderWaypointLines_C*           W_SQMapOrderWaypointLines;                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               ZoomLayer;                                         // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FVector2D                              DesignTimeGridLines;                               // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              AppliedMapBoundsScale;                             // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MapBoundaryInitTimer;                              // 0x0310(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxMapBoundaryInitAttempts;                        // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MapBoundaryInitAttemptCount;                       // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_W_SQMapBody(int32 EntryPoint);
	void LoopInitMapBoundary();
	void Set_Flag_Lattice_Visibility(bool InVisibility);
	void InitializeLattice(class USQCoreStateMapComponent* MapComponent);
	void Construct();
	void PreConstruct(bool IsDesignTime);
	class USQMapMarkerBase* CreateMarkerWidget(const struct FSQMapMarkerVisualData& MapMarkerVisualData);
	bool RemoveMarkerWidget(class USQMapMarkerBase* Target);
	void Init_Map_Boundary(bool* Success);
	void Map_Corner_Bounds(struct FVector* Extent);
	void Get_Relative_Location(const struct FVector& In_Location, struct FVector2D* Relative);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_SQMapBody_C">();
	}
	static class UW_SQMapBody_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_SQMapBody_C>();
	}
};
static_assert(alignof(UW_SQMapBody_C) == 0x000008, "Wrong alignment on UW_SQMapBody_C");
static_assert(sizeof(UW_SQMapBody_C) == 0x000320, "Wrong size on UW_SQMapBody_C");
static_assert(offsetof(UW_SQMapBody_C, UberGraphFrame) == 0x000290, "Member 'UW_SQMapBody_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, ElementsRoot) == 0x000298, "Member 'UW_SQMapBody_C::ElementsRoot' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, FixedSizeLayer) == 0x0002A0, "Member 'UW_SQMapBody_C::FixedSizeLayer' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, GridLines) == 0x0002A8, "Member 'UW_SQMapBody_C::GridLines' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, HorizontalBar) == 0x0002B0, "Member 'UW_SQMapBody_C::HorizontalBar' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, MapBoundary) == 0x0002B8, "Member 'UW_SQMapBody_C::MapBoundary' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, MapImage) == 0x0002C0, "Member 'UW_SQMapBody_C::MapImage' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, PanLayer) == 0x0002C8, "Member 'UW_SQMapBody_C::PanLayer' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, Scalebars) == 0x0002D0, "Member 'UW_SQMapBody_C::Scalebars' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, TB_MapName) == 0x0002D8, "Member 'UW_SQMapBody_C::TB_MapName' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, UMG_MapLattice) == 0x0002E0, "Member 'UW_SQMapBody_C::UMG_MapLattice' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, VerticalBar) == 0x0002E8, "Member 'UW_SQMapBody_C::VerticalBar' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, W_SQMapOrderWaypointLines) == 0x0002F0, "Member 'UW_SQMapBody_C::W_SQMapOrderWaypointLines' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, ZoomLayer) == 0x0002F8, "Member 'UW_SQMapBody_C::ZoomLayer' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, DesignTimeGridLines) == 0x000300, "Member 'UW_SQMapBody_C::DesignTimeGridLines' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, AppliedMapBoundsScale) == 0x000308, "Member 'UW_SQMapBody_C::AppliedMapBoundsScale' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, MapBoundaryInitTimer) == 0x000310, "Member 'UW_SQMapBody_C::MapBoundaryInitTimer' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, MaxMapBoundaryInitAttempts) == 0x000318, "Member 'UW_SQMapBody_C::MaxMapBoundaryInitAttempts' has a wrong offset!");
static_assert(offsetof(UW_SQMapBody_C, MapBoundaryInitAttemptCount) == 0x00031C, "Member 'UW_SQMapBody_C::MapBoundaryInitAttemptCount' has a wrong offset!");

}

