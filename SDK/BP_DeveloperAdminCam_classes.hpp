#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DeveloperAdminCam

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Squad_structs.hpp"
#include "Squad_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DeveloperAdminCam.BP_DeveloperAdminCam_C
// 0x0050 (0x0620 - 0x05D0)
class ABP_DeveloperAdminCam_C final : public ASQDeveloperCameraMan
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_CameraManInterface_C*                UI;                                                // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 HideMouseReason;                                   // 0x05E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           RotateEventHandle;                                 // 0x05F0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentRotation;                                   // 0x05F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LeftRotation;                                      // 0x0604(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               RightRotation;                                     // 0x0610(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_DeveloperAdminCam(int32 EntryPoint);
	void ClearSelection_Event();
	void CLIENT_HideSelectionMenu();
	void Server_DamageVehicle(class AActor* DamagedActor, float BaseDamage, TSubclassOf<class UDamageType> DamageTypeClass);
	void SERVER_SetTeam(class AActor* Actor, int32 Team);
	void VehicleDestroyed(class ASQVehicle* Vehicle);
	void Server_PossessSelection(class ASQSoldier* Soldier);
	void Server_Destroy(class AActor* Actor);
	void Client_ApplyDamage(class AActor* Actor, class USQVehicleComponent* Component, float Damage, class UClass* DamageType);
	void ClientSetMousemode(EMouseMode NewMode);
	void OnActorPlaced(class AActor* Actor);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ToggleMenu();
	void ToggleLookEnd();
	void ToggleLookStart();
	void SelectVehicle(class ASQVehicle* Vehicle);
	void SelectDeployable(class ASQDeployable* Deployable);
	void SelectPlayer(class ASQSoldier* Soldier);
	void On_Selection_Updated(class AActor* Selected);
	void On_Selected_Destroyed(class AActor* Actor);
	void OnActorTrackStart(class AActor* TrackedActor);
	void ApplyDamageToVehicle(class AActor* ActorRef, float Amount, class UClass* Type);
	void SetTeam(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DeveloperAdminCam_C">();
	}
	static class ABP_DeveloperAdminCam_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DeveloperAdminCam_C>();
	}
};
static_assert(alignof(ABP_DeveloperAdminCam_C) == 0x000010, "Wrong alignment on ABP_DeveloperAdminCam_C");
static_assert(sizeof(ABP_DeveloperAdminCam_C) == 0x000620, "Wrong size on ABP_DeveloperAdminCam_C");
static_assert(offsetof(ABP_DeveloperAdminCam_C, UberGraphFrame) == 0x0005D0, "Member 'ABP_DeveloperAdminCam_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DeveloperAdminCam_C, UI) == 0x0005D8, "Member 'ABP_DeveloperAdminCam_C::UI' has a wrong offset!");
static_assert(offsetof(ABP_DeveloperAdminCam_C, HideMouseReason) == 0x0005E0, "Member 'ABP_DeveloperAdminCam_C::HideMouseReason' has a wrong offset!");
static_assert(offsetof(ABP_DeveloperAdminCam_C, RotateEventHandle) == 0x0005F0, "Member 'ABP_DeveloperAdminCam_C::RotateEventHandle' has a wrong offset!");
static_assert(offsetof(ABP_DeveloperAdminCam_C, CurrentRotation) == 0x0005F8, "Member 'ABP_DeveloperAdminCam_C::CurrentRotation' has a wrong offset!");
static_assert(offsetof(ABP_DeveloperAdminCam_C, LeftRotation) == 0x000604, "Member 'ABP_DeveloperAdminCam_C::LeftRotation' has a wrong offset!");
static_assert(offsetof(ABP_DeveloperAdminCam_C, RightRotation) == 0x000610, "Member 'ABP_DeveloperAdminCam_C::RightRotation' has a wrong offset!");

}

