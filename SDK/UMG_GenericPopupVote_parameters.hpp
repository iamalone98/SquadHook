#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_GenericPopupVote

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "SQVoteEntry_structs.hpp"


namespace SDK::Params
{

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.ExecuteUbergraph_UMG_GenericPopupVote
// 0x0050 (0x0050 - 0x0000)
struct UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_ChoiceID;                             // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C60[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession_2;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              K2Node_Event_Winner;                               // 0x0018(0x0018)(NoDestructor)
	class USQVoteSessionClient*                   K2Node_Event_VoteSession_1;                        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_VotePossible;                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C61[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession;                          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerCurrentVoteCount;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Activated;                            // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote) == 0x000008, "Wrong alignment on UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote");
static_assert(sizeof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote) == 0x000050, "Wrong size on UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote");
static_assert(offsetof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote, EntryPoint) == 0x000000, "Member 'UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote::EntryPoint' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote, K2Node_Event_ChoiceID) == 0x000004, "Member 'UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote::K2Node_Event_ChoiceID' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote, K2Node_Event_VoteSession_2) == 0x000010, "Member 'UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote::K2Node_Event_VoteSession_2' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote, K2Node_Event_Winner) == 0x000018, "Member 'UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote::K2Node_Event_Winner' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote, K2Node_Event_VoteSession_1) == 0x000030, "Member 'UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote::K2Node_Event_VoteSession_1' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote, K2Node_Event_VotePossible) == 0x000038, "Member 'UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote::K2Node_Event_VotePossible' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote, K2Node_Event_VoteSession) == 0x000040, "Member 'UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote::K2Node_Event_VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote, K2Node_Event_PlayerCurrentVoteCount) == 0x000048, "Member 'UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote::K2Node_Event_PlayerCurrentVoteCount' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote, K2Node_Event_Activated) == 0x00004C, "Member 'UMG_GenericPopupVote_C_ExecuteUbergraph_UMG_GenericPopupVote::K2Node_Event_Activated' has a wrong offset!");

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.SetVoteScreenActive
// 0x0001 (0x0001 - 0x0000)
struct UMG_GenericPopupVote_C_SetVoteScreenActive final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_GenericPopupVote_C_SetVoteScreenActive) == 0x000001, "Wrong alignment on UMG_GenericPopupVote_C_SetVoteScreenActive");
static_assert(sizeof(UMG_GenericPopupVote_C_SetVoteScreenActive) == 0x000001, "Wrong size on UMG_GenericPopupVote_C_SetVoteScreenActive");
static_assert(offsetof(UMG_GenericPopupVote_C_SetVoteScreenActive, Activated) == 0x000000, "Member 'UMG_GenericPopupVote_C_SetVoteScreenActive::Activated' has a wrong offset!");

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.OnVoteUpdated
// 0x0010 (0x0010 - 0x0000)
struct UMG_GenericPopupVote_C_OnVoteUpdated final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerCurrentVoteCount;                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericPopupVote_C_OnVoteUpdated) == 0x000008, "Wrong alignment on UMG_GenericPopupVote_C_OnVoteUpdated");
static_assert(sizeof(UMG_GenericPopupVote_C_OnVoteUpdated) == 0x000010, "Wrong size on UMG_GenericPopupVote_C_OnVoteUpdated");
static_assert(offsetof(UMG_GenericPopupVote_C_OnVoteUpdated, VoteSession) == 0x000000, "Member 'UMG_GenericPopupVote_C_OnVoteUpdated::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_OnVoteUpdated, PlayerCurrentVoteCount) == 0x000008, "Member 'UMG_GenericPopupVote_C_OnVoteUpdated::PlayerCurrentVoteCount' has a wrong offset!");

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.OnVoteStarted
// 0x0010 (0x0010 - 0x0000)
struct UMG_GenericPopupVote_C_OnVoteStarted final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VotePossible;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_GenericPopupVote_C_OnVoteStarted) == 0x000008, "Wrong alignment on UMG_GenericPopupVote_C_OnVoteStarted");
static_assert(sizeof(UMG_GenericPopupVote_C_OnVoteStarted) == 0x000010, "Wrong size on UMG_GenericPopupVote_C_OnVoteStarted");
static_assert(offsetof(UMG_GenericPopupVote_C_OnVoteStarted, VoteSession) == 0x000000, "Member 'UMG_GenericPopupVote_C_OnVoteStarted::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_OnVoteStarted, VotePossible) == 0x000008, "Member 'UMG_GenericPopupVote_C_OnVoteStarted::VotePossible' has a wrong offset!");

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.OnVoteEnded
// 0x0020 (0x0020 - 0x0000)
struct UMG_GenericPopupVote_C_OnVoteEnded final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(UMG_GenericPopupVote_C_OnVoteEnded) == 0x000008, "Wrong alignment on UMG_GenericPopupVote_C_OnVoteEnded");
static_assert(sizeof(UMG_GenericPopupVote_C_OnVoteEnded) == 0x000020, "Wrong size on UMG_GenericPopupVote_C_OnVoteEnded");
static_assert(offsetof(UMG_GenericPopupVote_C_OnVoteEnded, VoteSession) == 0x000000, "Member 'UMG_GenericPopupVote_C_OnVoteEnded::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_OnVoteEnded, Winner) == 0x000008, "Member 'UMG_GenericPopupVote_C_OnVoteEnded::Winner' has a wrong offset!");

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.OnVoteUpdatedByID
// 0x0008 (0x0008 - 0x0000)
struct UMG_GenericPopupVote_C_OnVoteUpdatedByID final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericPopupVote_C_OnVoteUpdatedByID) == 0x000004, "Wrong alignment on UMG_GenericPopupVote_C_OnVoteUpdatedByID");
static_assert(sizeof(UMG_GenericPopupVote_C_OnVoteUpdatedByID) == 0x000008, "Wrong size on UMG_GenericPopupVote_C_OnVoteUpdatedByID");
static_assert(offsetof(UMG_GenericPopupVote_C_OnVoteUpdatedByID, ChoiceId) == 0x000000, "Member 'UMG_GenericPopupVote_C_OnVoteUpdatedByID::ChoiceId' has a wrong offset!");

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.ConfigureVoteWindow
// 0x0098 (0x0098 - 0x0000)
struct UMG_GenericPopupVote_C_ConfigureVoteWindow final
{
public:
	class USQVoteSession*                         In_Vote_Session;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSQChoice>                      Out_Choices;                                       // 0x0008(0x0010)(Parm, OutParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C62[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQVoteEntry                           CallFunc_GetDataTableRowFromName_OutRow;           // 0x0020(0x0058)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C63[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0080(0x0018)()
};
static_assert(alignof(UMG_GenericPopupVote_C_ConfigureVoteWindow) == 0x000008, "Wrong alignment on UMG_GenericPopupVote_C_ConfigureVoteWindow");
static_assert(sizeof(UMG_GenericPopupVote_C_ConfigureVoteWindow) == 0x000098, "Wrong size on UMG_GenericPopupVote_C_ConfigureVoteWindow");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureVoteWindow, In_Vote_Session) == 0x000000, "Member 'UMG_GenericPopupVote_C_ConfigureVoteWindow::In_Vote_Session' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureVoteWindow, Out_Choices) == 0x000008, "Member 'UMG_GenericPopupVote_C_ConfigureVoteWindow::Out_Choices' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureVoteWindow, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'UMG_GenericPopupVote_C_ConfigureVoteWindow::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureVoteWindow, CallFunc_GetDataTableRowFromName_OutRow) == 0x000020, "Member 'UMG_GenericPopupVote_C_ConfigureVoteWindow::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureVoteWindow, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000078, "Member 'UMG_GenericPopupVote_C_ConfigureVoteWindow::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureVoteWindow, CallFunc_Conv_NameToText_ReturnValue) == 0x000080, "Member 'UMG_GenericPopupVote_C_ConfigureVoteWindow::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.ConfigureChoices
// 0x0090 (0x0090 - 0x0000)
struct UMG_GenericPopupVote_C_ConfigureChoices final
{
public:
	TArray<struct FSQChoice>                      In_Choices;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class USQVoteSessionClient*                   In_Vote_Session;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C64[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQChoice                              CallFunc_Array_Get_Item;                           // 0x0028(0x0018)(NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C65[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_GenericPopupVoteEntry_C*           CallFunc_Create_ReturnValue;                       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericPopupVote_C_ConfigureChoices) == 0x000008, "Wrong alignment on UMG_GenericPopupVote_C_ConfigureChoices");
static_assert(sizeof(UMG_GenericPopupVote_C_ConfigureChoices) == 0x000090, "Wrong size on UMG_GenericPopupVote_C_ConfigureChoices");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, In_Choices) == 0x000000, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::In_Choices' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, In_Vote_Session) == 0x000010, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::In_Vote_Session' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_Array_Get_Item) == 0x000028, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_Add_IntInt_ReturnValue) == 0x000044, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_Conv_IntToString_ReturnValue) == 0x000048, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_Concat_StrStr_ReturnValue) == 0x000058, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_Conv_StringToName_ReturnValue) == 0x000068, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_GetOwningPlayer_ReturnValue) == 0x000070, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_Create_ReturnValue) == 0x000078, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000080, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_ConfigureChoices, CallFunc_Array_Add_ReturnValue) == 0x000088, "Member 'UMG_GenericPopupVote_C_ConfigureChoices::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.Generate Items
// 0x0018 (0x0018 - 0x0000)
struct UMG_GenericPopupVote_C_Generate_Items final
{
public:
	class USQVoteSessionClient*                   Vote_Session;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSQChoice>                      CallFunc_ConfigureVoteWindow_Out_Choices;          // 0x0008(0x0010)(ReferenceParm)
};
static_assert(alignof(UMG_GenericPopupVote_C_Generate_Items) == 0x000008, "Wrong alignment on UMG_GenericPopupVote_C_Generate_Items");
static_assert(sizeof(UMG_GenericPopupVote_C_Generate_Items) == 0x000018, "Wrong size on UMG_GenericPopupVote_C_Generate_Items");
static_assert(offsetof(UMG_GenericPopupVote_C_Generate_Items, Vote_Session) == 0x000000, "Member 'UMG_GenericPopupVote_C_Generate_Items::Vote_Session' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Generate_Items, CallFunc_ConfigureVoteWindow_Out_Choices) == 0x000008, "Member 'UMG_GenericPopupVote_C_Generate_Items::CallFunc_ConfigureVoteWindow_Out_Choices' has a wrong offset!");

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.Update Choices
// 0x0038 (0x0038 - 0x0000)
struct UMG_GenericPopupVote_C_Update_Choices final
{
public:
	class USQVoteSessionClient*                   Vote_Session;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Player_Current_Vote_Count;                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C66[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMG_GenericPopupVoteEntry_C*           CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C67[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_GenericPopupVote_C_Update_Choices) == 0x000008, "Wrong alignment on UMG_GenericPopupVote_C_Update_Choices");
static_assert(sizeof(UMG_GenericPopupVote_C_Update_Choices) == 0x000038, "Wrong size on UMG_GenericPopupVote_C_Update_Choices");
static_assert(offsetof(UMG_GenericPopupVote_C_Update_Choices, Vote_Session) == 0x000000, "Member 'UMG_GenericPopupVote_C_Update_Choices::Vote_Session' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Update_Choices, Player_Current_Vote_Count) == 0x000008, "Member 'UMG_GenericPopupVote_C_Update_Choices::Player_Current_Vote_Count' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Update_Choices, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'UMG_GenericPopupVote_C_Update_Choices::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Update_Choices, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'UMG_GenericPopupVote_C_Update_Choices::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Update_Choices, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'UMG_GenericPopupVote_C_Update_Choices::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Update_Choices, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'UMG_GenericPopupVote_C_Update_Choices::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Update_Choices, CallFunc_Array_Get_Item) == 0x000020, "Member 'UMG_GenericPopupVote_C_Update_Choices::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Update_Choices, CallFunc_Greater_IntInt_ReturnValue) == 0x000028, "Member 'UMG_GenericPopupVote_C_Update_Choices::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Update_Choices, CallFunc_Array_Length_ReturnValue_1) == 0x00002C, "Member 'UMG_GenericPopupVote_C_Update_Choices::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Update_Choices, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'UMG_GenericPopupVote_C_Update_Choices::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function UMG_GenericPopupVote.UMG_GenericPopupVote_C.Display Result
// 0x0048 (0x0048 - 0x0000)
struct UMG_GenericPopupVote_C_Display_Result final
{
public:
	class USQVoteSessionClient*                   Vote_Session;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_GenericPopupVoteEntry_C*           CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C68[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_GenericPopupVote_C_Display_Result) == 0x000008, "Wrong alignment on UMG_GenericPopupVote_C_Display_Result");
static_assert(sizeof(UMG_GenericPopupVote_C_Display_Result) == 0x000048, "Wrong size on UMG_GenericPopupVote_C_Display_Result");
static_assert(offsetof(UMG_GenericPopupVote_C_Display_Result, Vote_Session) == 0x000000, "Member 'UMG_GenericPopupVote_C_Display_Result::Vote_Session' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Display_Result, Winner) == 0x000008, "Member 'UMG_GenericPopupVote_C_Display_Result::Winner' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Display_Result, Temp_int_Array_Index_Variable) == 0x000020, "Member 'UMG_GenericPopupVote_C_Display_Result::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Display_Result, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'UMG_GenericPopupVote_C_Display_Result::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Display_Result, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'UMG_GenericPopupVote_C_Display_Result::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Display_Result, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'UMG_GenericPopupVote_C_Display_Result::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Display_Result, CallFunc_Array_Get_Item) == 0x000030, "Member 'UMG_GenericPopupVote_C_Display_Result::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Display_Result, CallFunc_Greater_IntInt_ReturnValue) == 0x000038, "Member 'UMG_GenericPopupVote_C_Display_Result::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Display_Result, CallFunc_Array_Length_ReturnValue_1) == 0x00003C, "Member 'UMG_GenericPopupVote_C_Display_Result::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVote_C_Display_Result, CallFunc_Less_IntInt_ReturnValue) == 0x000040, "Member 'UMG_GenericPopupVote_C_Display_Result::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

