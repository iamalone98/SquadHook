#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeWindow

#include "Basic.hpp"

#include "ChallengeWindow_classes.hpp"
#include "ChallengeWindow_parameters.hpp"


namespace SDK
{

// Function ChallengeWindow.ChallengeWindow_C.OnLeftButtonClicked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UChallengeWindow_C::OnLeftButtonClicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeWindow_C", "OnLeftButtonClicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengeWindow.ChallengeWindow_C.OnRightButtonClicked__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UChallengeWindow_C::OnRightButtonClicked__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeWindow_C", "OnRightButtonClicked__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengeWindow.ChallengeWindow_C.ExecuteUbergraph_ChallengeWindow
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengeWindow_C::ExecuteUbergraph_ChallengeWindow(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeWindow_C", "ExecuteUbergraph_ChallengeWindow");

	Params::ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeWindow.ChallengeWindow_C.BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bSelected                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UMainMenu_Button_C*               Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengeWindow_C::BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature(bool bSelected, class UMainMenu_Button_C* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeWindow_C", "BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature");

	Params::ChallengeWindow_C_BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature Parms{};

	Parms.bSelected = bSelected;
	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeWindow.ChallengeWindow_C.BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature
// (BlueprintEvent)
// Parameters:
// bool                                    bSelected                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UMainMenu_Button_C*               Button                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UChallengeWindow_C::BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature(bool bSelected, class UMainMenu_Button_C* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeWindow_C", "BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature");

	Params::ChallengeWindow_C_BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature Parms{};

	Parms.bSelected = bSelected;
	Parms.Button = Button;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeWindow.ChallengeWindow_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UChallengeWindow_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeWindow_C", "PreConstruct");

	Params::ChallengeWindow_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ChallengeWindow.ChallengeWindow_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UChallengeWindow_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeWindow_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ChallengeWindow.ChallengeWindow_C.SetDescription
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             InDescription                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void UChallengeWindow_C::SetDescription(const class FText& InDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeWindow_C", "SetDescription");

	Params::ChallengeWindow_C_SetDescription Parms{};

	Parms.InDescription = std::move(InDescription);

	UObject::ProcessEvent(Func, &Parms);
}

}

