#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RadialTowingWidget

#include "Basic.hpp"

#include "W_RadialTowingWidget_classes.hpp"
#include "W_RadialTowingWidget_parameters.hpp"


namespace SDK
{

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.ExecuteUbergraph_W_RadialTowingWidget
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RadialTowingWidget_C::ExecuteUbergraph_W_RadialTowingWidget(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "ExecuteUbergraph_W_RadialTowingWidget");

	Params::W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_RadialTowingWidget_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.ToggleEmergencyJump
// (BlueprintCallable, BlueprintEvent)

void UW_RadialTowingWidget_C::ToggleEmergencyJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "ToggleEmergencyJump");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.AddEmergencyYaw
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Degrees                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RadialTowingWidget_C::AddEmergencyYaw(float Degrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "AddEmergencyYaw");

	Params::W_RadialTowingWidget_C_AddEmergencyYaw Parms{};

	Parms.Degrees = Degrees;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.OnTimerReached
// (BlueprintCallable, BlueprintEvent)

void UW_RadialTowingWidget_C::OnTimerReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "OnTimerReached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.OnHoverEnd
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UW_RadialTowingWidget_C::OnHoverEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "OnHoverEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.OnHoverBegin
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UW_RadialTowingWidget_C::OnHoverBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "OnHoverBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.ComputeEmergencyYaw
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Degress                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RadialTowingWidget_C::ComputeEmergencyYaw(float Degress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "ComputeEmergencyYaw");

	Params::W_RadialTowingWidget_C_ComputeEmergencyYaw Parms{};

	Parms.Degress = Degress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.CollectVehicleReference
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RadialTowingWidget_C::CollectVehicleReference(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "CollectVehicleReference");

	Params::W_RadialTowingWidget_C_CollectVehicleReference Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.CollectSoldierReference
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RadialTowingWidget_C::CollectSoldierReference(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "CollectSoldierReference");

	Params::W_RadialTowingWidget_C_CollectSoldierReference Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.IsTeleportationValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RadialTowingWidget_C::IsTeleportationValid(bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "IsTeleportationValid");

	Params::W_RadialTowingWidget_C_IsTeleportationValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.SetupWaitDuration
// (Public, BlueprintCallable, BlueprintEvent)

void UW_RadialTowingWidget_C::SetupWaitDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "SetupWaitDuration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.UpdateText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_RadialTowingWidget_C::UpdateText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "UpdateText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.UpdateCentralButton
// (Public, BlueprintCallable, BlueprintEvent)

void UW_RadialTowingWidget_C::UpdateCentralButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "UpdateCentralButton");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTowingWidget.W_RadialTowingWidget_C.Is Recovery Method Valid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESQVehicleRecoveryMethod                Method                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UW_RadialTowingWidget_C::Is_Recovery_Method_Valid(class ASQVehicle* Vehicle, ESQVehicleRecoveryMethod Method)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTowingWidget_C", "Is Recovery Method Valid");

	Params::W_RadialTowingWidget_C_Is_Recovery_Method_Valid Parms{};

	Parms.Vehicle = Vehicle;
	Parms.Method = Method;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

