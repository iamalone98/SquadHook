#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EmoteRadialEntry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Squad_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass EmoteRadialEntry.EmoteRadialEntry_C
// 0x0040 (0x0488 - 0x0448)
class UEmoteRadialEntry_C final : public USQRadialIconButton
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0448(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       OnHover;                                           // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 BPElementImage;                                    // 0x0458(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BPIconImage;                                       // 0x0460(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BPOuterRimImage;                                   // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTexture2D*                             BPIconImageTexture;                                // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RadialItemModel_C*                  RelatedActionModel;                                // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EmoteIndex;                                        // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEmptySlot;                                        // 0x0484(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_EmoteRadialEntry(int32 EntryPoint);
	void Construct();
	void BPInit();
	void CreateToolTip();
	void OnHoverEnd();
	void OnHoverBegin();
	void UpdateActiveState();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"EmoteRadialEntry_C">();
	}
	static class UEmoteRadialEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEmoteRadialEntry_C>();
	}
};
static_assert(alignof(UEmoteRadialEntry_C) == 0x000008, "Wrong alignment on UEmoteRadialEntry_C");
static_assert(sizeof(UEmoteRadialEntry_C) == 0x000488, "Wrong size on UEmoteRadialEntry_C");
static_assert(offsetof(UEmoteRadialEntry_C, UberGraphFrame) == 0x000448, "Member 'UEmoteRadialEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UEmoteRadialEntry_C, OnHover) == 0x000450, "Member 'UEmoteRadialEntry_C::OnHover' has a wrong offset!");
static_assert(offsetof(UEmoteRadialEntry_C, BPElementImage) == 0x000458, "Member 'UEmoteRadialEntry_C::BPElementImage' has a wrong offset!");
static_assert(offsetof(UEmoteRadialEntry_C, BPIconImage) == 0x000460, "Member 'UEmoteRadialEntry_C::BPIconImage' has a wrong offset!");
static_assert(offsetof(UEmoteRadialEntry_C, BPOuterRimImage) == 0x000468, "Member 'UEmoteRadialEntry_C::BPOuterRimImage' has a wrong offset!");
static_assert(offsetof(UEmoteRadialEntry_C, BPIconImageTexture) == 0x000470, "Member 'UEmoteRadialEntry_C::BPIconImageTexture' has a wrong offset!");
static_assert(offsetof(UEmoteRadialEntry_C, RelatedActionModel) == 0x000478, "Member 'UEmoteRadialEntry_C::RelatedActionModel' has a wrong offset!");
static_assert(offsetof(UEmoteRadialEntry_C, EmoteIndex) == 0x000480, "Member 'UEmoteRadialEntry_C::EmoteIndex' has a wrong offset!");
static_assert(offsetof(UEmoteRadialEntry_C, bEmptySlot) == 0x000484, "Member 'UEmoteRadialEntry_C::bEmptySlot' has a wrong offset!");

}

