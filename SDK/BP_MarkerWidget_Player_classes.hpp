#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MarkerWidget_Player

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Squad_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_MarkerWidget_Player.BP_MarkerWidget_Player_C
// 0x0138 (0x03E0 - 0x02A8)
class UBP_MarkerWidget_Player_C final : public USQMapSoldierIconWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       PlayerWoundedAnim;                                 // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       PlayerIncapAnim;                                   // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SelfPulseAnim;                                     // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           IncapPanel;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MedicOverlayImage;                                 // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Player_Cone_Image;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Player_Image;                                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              PlayerPulseScaleBox;                               // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 PulseImage;                                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SL_Text;                                           // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               WidgetOverlay;                                     // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WoundedBackground;                                 // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WoundedBloodDrop;                                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           WoundedPanel;                                      // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 WoundedRing;                                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           Self_Color;                                        // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EnemyColor;                                        // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SquadColor;                                        // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TeamColor;                                         // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SquadLeaderImage;                                  // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Medic_Overlay_Image;                               // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Self_Image;                                        // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             PlayerImage;                                       // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MapAngleAdjust;                                    // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SL_Scale;                                          // 0x038C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SelfScale;                                         // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Medic_Overlay_Scale;                               // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SoldierScale;                                      // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Medic_Scale;                                       // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CloseTooltip;                                      // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              DefaultPulseScale;                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PlayerPulseSLScale;                                // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIncapAnimPlaying;                                 // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bBleedingAnimPlaying;                              // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_309A[0x6];                                     // 0x03C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             VehicleImage;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VehicleScale;                                      // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StateUpdateTime;                                   // 0x03D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VisualsUpdateTime;                                 // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CloseTooltip__DelegateSignature();
	void ExecuteUbergraph_BP_MarkerWidget_Player(int32 EntryPoint);
	void UpdateVisuals_Event();
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetAngle(float InAngle);
	void Update_SL_Text();
	void Update_PlayerImage_Brush();
	void UpdateMedicOverlayVisibility();
	void Update_IncapPanel_Visibility();
	class UWidget* Get_Player_Image_ToolTipWidget();
	void Update_BleedingPanel_Visibility();
	void Update_Player_Cone_Visibility();
	bool IsMarkerVisible();
	void UpdateViewAngle();
	void UpdateSizeAndZOrder();
	void UpdateStateData();
	void UpdateVisibilities();

	ESlateVisibility Get_SL_Text_Visibility() const;
	ESlateVisibility Get_Player_Image_Visibility() const;
	void BPGetWidgetPlayerState(class APlayerState** SquadPlayerState) const;
	void BPUpdateIsInVehicle(bool* IsInVehicle) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MarkerWidget_Player_C">();
	}
	static class UBP_MarkerWidget_Player_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MarkerWidget_Player_C>();
	}
};
static_assert(alignof(UBP_MarkerWidget_Player_C) == 0x000008, "Wrong alignment on UBP_MarkerWidget_Player_C");
static_assert(sizeof(UBP_MarkerWidget_Player_C) == 0x0003E0, "Wrong size on UBP_MarkerWidget_Player_C");
static_assert(offsetof(UBP_MarkerWidget_Player_C, UberGraphFrame) == 0x0002A8, "Member 'UBP_MarkerWidget_Player_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, PlayerWoundedAnim) == 0x0002B0, "Member 'UBP_MarkerWidget_Player_C::PlayerWoundedAnim' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, PlayerIncapAnim) == 0x0002B8, "Member 'UBP_MarkerWidget_Player_C::PlayerIncapAnim' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, SelfPulseAnim) == 0x0002C0, "Member 'UBP_MarkerWidget_Player_C::SelfPulseAnim' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, IncapPanel) == 0x0002C8, "Member 'UBP_MarkerWidget_Player_C::IncapPanel' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, MedicOverlayImage) == 0x0002D0, "Member 'UBP_MarkerWidget_Player_C::MedicOverlayImage' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, Player_Cone_Image) == 0x0002D8, "Member 'UBP_MarkerWidget_Player_C::Player_Cone_Image' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, Player_Image) == 0x0002E0, "Member 'UBP_MarkerWidget_Player_C::Player_Image' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, PlayerPulseScaleBox) == 0x0002E8, "Member 'UBP_MarkerWidget_Player_C::PlayerPulseScaleBox' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, PulseImage) == 0x0002F0, "Member 'UBP_MarkerWidget_Player_C::PulseImage' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, SL_Text) == 0x0002F8, "Member 'UBP_MarkerWidget_Player_C::SL_Text' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, WidgetOverlay) == 0x000300, "Member 'UBP_MarkerWidget_Player_C::WidgetOverlay' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, WoundedBackground) == 0x000308, "Member 'UBP_MarkerWidget_Player_C::WoundedBackground' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, WoundedBloodDrop) == 0x000310, "Member 'UBP_MarkerWidget_Player_C::WoundedBloodDrop' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, WoundedPanel) == 0x000318, "Member 'UBP_MarkerWidget_Player_C::WoundedPanel' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, WoundedRing) == 0x000320, "Member 'UBP_MarkerWidget_Player_C::WoundedRing' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, Self_Color) == 0x000328, "Member 'UBP_MarkerWidget_Player_C::Self_Color' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, EnemyColor) == 0x000338, "Member 'UBP_MarkerWidget_Player_C::EnemyColor' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, SquadColor) == 0x000348, "Member 'UBP_MarkerWidget_Player_C::SquadColor' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, TeamColor) == 0x000358, "Member 'UBP_MarkerWidget_Player_C::TeamColor' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, SquadLeaderImage) == 0x000368, "Member 'UBP_MarkerWidget_Player_C::SquadLeaderImage' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, Medic_Overlay_Image) == 0x000370, "Member 'UBP_MarkerWidget_Player_C::Medic_Overlay_Image' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, Self_Image) == 0x000378, "Member 'UBP_MarkerWidget_Player_C::Self_Image' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, PlayerImage) == 0x000380, "Member 'UBP_MarkerWidget_Player_C::PlayerImage' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, MapAngleAdjust) == 0x000388, "Member 'UBP_MarkerWidget_Player_C::MapAngleAdjust' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, SL_Scale) == 0x00038C, "Member 'UBP_MarkerWidget_Player_C::SL_Scale' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, SelfScale) == 0x000390, "Member 'UBP_MarkerWidget_Player_C::SelfScale' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, Medic_Overlay_Scale) == 0x000394, "Member 'UBP_MarkerWidget_Player_C::Medic_Overlay_Scale' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, SoldierScale) == 0x000398, "Member 'UBP_MarkerWidget_Player_C::SoldierScale' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, Medic_Scale) == 0x00039C, "Member 'UBP_MarkerWidget_Player_C::Medic_Scale' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, CloseTooltip) == 0x0003A0, "Member 'UBP_MarkerWidget_Player_C::CloseTooltip' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, DefaultPulseScale) == 0x0003B0, "Member 'UBP_MarkerWidget_Player_C::DefaultPulseScale' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, PlayerPulseSLScale) == 0x0003B8, "Member 'UBP_MarkerWidget_Player_C::PlayerPulseSLScale' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, bIncapAnimPlaying) == 0x0003C0, "Member 'UBP_MarkerWidget_Player_C::bIncapAnimPlaying' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, bBleedingAnimPlaying) == 0x0003C1, "Member 'UBP_MarkerWidget_Player_C::bBleedingAnimPlaying' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, VehicleImage) == 0x0003C8, "Member 'UBP_MarkerWidget_Player_C::VehicleImage' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, VehicleScale) == 0x0003D0, "Member 'UBP_MarkerWidget_Player_C::VehicleScale' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, StateUpdateTime) == 0x0003D4, "Member 'UBP_MarkerWidget_Player_C::StateUpdateTime' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Player_C, VisualsUpdateTime) == 0x0003D8, "Member 'UBP_MarkerWidget_Player_C::VisualsUpdateTime' has a wrong offset!");

}

