#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PrefabAsset

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function PrefabAsset.PrefabActor.DestroyPrefabActor
// 0x0001 (0x0001 - 0x0000)
struct PrefabActor_DestroyPrefabActor final
{
public:
	bool                                          bDestroyAttachedChildren;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabActor_DestroyPrefabActor) == 0x000001, "Wrong alignment on PrefabActor_DestroyPrefabActor");
static_assert(sizeof(PrefabActor_DestroyPrefabActor) == 0x000001, "Wrong size on PrefabActor_DestroyPrefabActor");
static_assert(offsetof(PrefabActor_DestroyPrefabActor, bDestroyAttachedChildren) == 0x000000, "Member 'PrefabActor_DestroyPrefabActor::bDestroyAttachedChildren' has a wrong offset!");

// Function PrefabAsset.PrefabActor.SetMobility
// 0x0001 (0x0001 - 0x0000)
struct PrefabActor_SetMobility final
{
public:
	EComponentMobility                            InMobility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabActor_SetMobility) == 0x000001, "Wrong alignment on PrefabActor_SetMobility");
static_assert(sizeof(PrefabActor_SetMobility) == 0x000001, "Wrong size on PrefabActor_SetMobility");
static_assert(offsetof(PrefabActor_SetMobility, InMobility) == 0x000000, "Member 'PrefabActor_SetMobility::InMobility' has a wrong offset!");

// Function PrefabAsset.PrefabActor.SetPrefab
// 0x0010 (0x0010 - 0x0000)
struct PrefabActor_SetPrefab final
{
public:
	class UPrefabAsset*                           NewPrefab;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceRevertEvenDisconnected;                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PrefabActor_SetPrefab) == 0x000008, "Wrong alignment on PrefabActor_SetPrefab");
static_assert(sizeof(PrefabActor_SetPrefab) == 0x000010, "Wrong size on PrefabActor_SetPrefab");
static_assert(offsetof(PrefabActor_SetPrefab, NewPrefab) == 0x000000, "Member 'PrefabActor_SetPrefab::NewPrefab' has a wrong offset!");
static_assert(offsetof(PrefabActor_SetPrefab, bForceRevertEvenDisconnected) == 0x000008, "Member 'PrefabActor_SetPrefab::bForceRevertEvenDisconnected' has a wrong offset!");

// Function PrefabAsset.PrefabActor.GetPrefab
// 0x0008 (0x0008 - 0x0000)
struct PrefabActor_GetPrefab final
{
public:
	class UPrefabAsset*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PrefabActor_GetPrefab) == 0x000008, "Wrong alignment on PrefabActor_GetPrefab");
static_assert(sizeof(PrefabActor_GetPrefab) == 0x000008, "Wrong size on PrefabActor_GetPrefab");
static_assert(offsetof(PrefabActor_GetPrefab, ReturnValue) == 0x000000, "Member 'PrefabActor_GetPrefab::ReturnValue' has a wrong offset!");

// Function PrefabAsset.PrefabFunctionLibrary.SpawnPrefab
// 0x0070 (0x0070 - 0x0000)
struct PrefabFunctionLibrary_SpawnPrefab final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrefabAsset*                           PrefabAsset;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutSpawnPrefabInstances;                           // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSpawnInstancesOnly;                               // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            CollisionHandlingOverride;                         // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF4[0x6];                                     // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APrefabActor*                           ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF5[0x8];                                     // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PrefabFunctionLibrary_SpawnPrefab) == 0x000010, "Wrong alignment on PrefabFunctionLibrary_SpawnPrefab");
static_assert(sizeof(PrefabFunctionLibrary_SpawnPrefab) == 0x000070, "Wrong size on PrefabFunctionLibrary_SpawnPrefab");
static_assert(offsetof(PrefabFunctionLibrary_SpawnPrefab, WorldContextObject) == 0x000000, "Member 'PrefabFunctionLibrary_SpawnPrefab::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PrefabFunctionLibrary_SpawnPrefab, PrefabAsset) == 0x000008, "Member 'PrefabFunctionLibrary_SpawnPrefab::PrefabAsset' has a wrong offset!");
static_assert(offsetof(PrefabFunctionLibrary_SpawnPrefab, SpawnTransform) == 0x000010, "Member 'PrefabFunctionLibrary_SpawnPrefab::SpawnTransform' has a wrong offset!");
static_assert(offsetof(PrefabFunctionLibrary_SpawnPrefab, OutSpawnPrefabInstances) == 0x000040, "Member 'PrefabFunctionLibrary_SpawnPrefab::OutSpawnPrefabInstances' has a wrong offset!");
static_assert(offsetof(PrefabFunctionLibrary_SpawnPrefab, bSpawnInstancesOnly) == 0x000050, "Member 'PrefabFunctionLibrary_SpawnPrefab::bSpawnInstancesOnly' has a wrong offset!");
static_assert(offsetof(PrefabFunctionLibrary_SpawnPrefab, CollisionHandlingOverride) == 0x000051, "Member 'PrefabFunctionLibrary_SpawnPrefab::CollisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(PrefabFunctionLibrary_SpawnPrefab, Owner) == 0x000058, "Member 'PrefabFunctionLibrary_SpawnPrefab::Owner' has a wrong offset!");
static_assert(offsetof(PrefabFunctionLibrary_SpawnPrefab, ReturnValue) == 0x000060, "Member 'PrefabFunctionLibrary_SpawnPrefab::ReturnValue' has a wrong offset!");

}

