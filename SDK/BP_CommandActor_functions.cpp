#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CommandActor

#include "Basic.hpp"

#include "BP_CommandActor_classes.hpp"
#include "BP_CommandActor_parameters.hpp"


namespace SDK
{

// Function BP_CommandActor.BP_CommandActor_C.ExecuteUbergraph_BP_CommandActor
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CommandActor_C::ExecuteUbergraph_BP_CommandActor(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandActor_C", "ExecuteUbergraph_BP_CommandActor");

	Params::BP_CommandActor_C_ExecuteUbergraph_BP_CommandActor Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CommandActor.BP_CommandActor_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_CommandActor_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandActor_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CommandActor.BP_CommandActor_C.Multi Death Cosmetics
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_CommandActor_C::Multi_Death_Cosmetics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandActor_C", "Multi Death Cosmetics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CommandActor.BP_CommandActor_C.Server Destroy Action
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_CommandActor_C::Server_Destroy_Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandActor_C", "Server Destroy Action");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CommandActor.BP_CommandActor_C.Owner Load and Play Sound
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CommandActor_C::Owner_Load_and_Play_Sound(uint8 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandActor_C", "Owner Load and Play Sound");

	Params::BP_CommandActor_C_Owner_Load_and_Play_Sound Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CommandActor.BP_CommandActor_C.Try to Load and Play Sound
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   ID                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CommandActor_C::Try_to_Load_and_Play_Sound(uint8 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandActor_C", "Try to Load and Play Sound");

	Params::BP_CommandActor_C_Try_to_Load_and_Play_Sound Parms{};

	Parms.ID = ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CommandActor.BP_CommandActor_C.Server End Active Duration
// (BlueprintCallable, BlueprintEvent)

void ABP_CommandActor_C::Server_End_Active_Duration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandActor_C", "Server End Active Duration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CommandActor.BP_CommandActor_C.Server Start Active Duration
// (BlueprintCallable, BlueprintEvent)

void ABP_CommandActor_C::Server_Start_Active_Duration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandActor_C", "Server Start Active Duration");

	UObject::ProcessEvent(Func, nullptr);
}

}

