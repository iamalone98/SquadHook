#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_JoyCurve

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_JoyCurve.WBP_JoyCurve_C.ExecuteUbergraph_WBP_JoyCurve
// 0x0108 (0x0108 - 0x0000)
struct WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_318F[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3190[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetEnumeratorValueFromIndex_ReturnValue;  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3191[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_ToUpper_ReturnValue;                      // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3192[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0058(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bIsChecked;             // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3193[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue;     // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQJoyStickConfig                      CallFunc_GetJoyConfig_ReturnValue;                 // 0x00A8(0x0010)(ConstParm, NoDestructor)
	class FString                                 K2Node_ComponentBoundEvent_SelectedItem;           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   K2Node_ComponentBoundEvent_SelectionType;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3194[0x1];                                     // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_NewParam_1;             // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_NewParam;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3195[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_MakeLiteralText_ReturnValue;              // 0x00E0(0x0018)()
	int32                                         CallFunc_MakeLiteralInt_ReturnValue;               // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindOptionIndex_ReturnValue;              // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_2;             // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue_1;              // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve) == 0x000008, "Wrong alignment on WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve");
static_assert(sizeof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve) == 0x000108, "Wrong size on WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, EntryPoint) == 0x000000, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, Temp_int_Variable) == 0x000004, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, Temp_int_Variable_1) == 0x000008, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_Conv_IntToByte_ReturnValue) == 0x00000C, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_GetValidValue_ReturnValue) == 0x000014, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000015, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000018, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_GetEnumeratorValueFromIndex_ReturnValue) == 0x000028, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_GetEnumeratorValueFromIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_ToUpper_ReturnValue) == 0x000030, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_ToUpper_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000040, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, K2Node_Event_MyGeometry) == 0x000058, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, K2Node_Event_InDeltaTime) == 0x000090, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, K2Node_ComponentBoundEvent_bIsChecked) == 0x000094, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::K2Node_ComponentBoundEvent_bIsChecked' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_GetPlayerController_ReturnValue) == 0x000098, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_GetSquadGameUserSettings_ReturnValue) == 0x0000A0, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_GetSquadGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_GetJoyConfig_ReturnValue) == 0x0000A8, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_GetJoyConfig_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, K2Node_ComponentBoundEvent_SelectedItem) == 0x0000B8, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::K2Node_ComponentBoundEvent_SelectedItem' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, K2Node_ComponentBoundEvent_SelectionType) == 0x0000C8, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::K2Node_ComponentBoundEvent_SelectionType' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_IsEmpty_ReturnValue) == 0x0000C9, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_Not_PreBool_ReturnValue) == 0x0000CA, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x0000CC, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, K2Node_ComponentBoundEvent_NewParam_1) == 0x0000D0, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::K2Node_ComponentBoundEvent_NewParam_1' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, K2Node_ComponentBoundEvent_NewParam) == 0x0000D4, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::K2Node_ComponentBoundEvent_NewParam' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, K2Node_Event_IsDesignTime) == 0x0000D8, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_MakeLiteralText_ReturnValue) == 0x0000E0, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_MakeLiteralText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_MakeLiteralInt_ReturnValue) == 0x0000F8, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_MakeLiteralInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_FindOptionIndex_ReturnValue) == 0x0000FC, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_FindOptionIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_Less_IntInt_ReturnValue) == 0x000100, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_Conv_IntToByte_ReturnValue_2) == 0x000101, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_Conv_IntToByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve, CallFunc_GetValidValue_ReturnValue_1) == 0x000102, "Member 'WBP_JoyCurve_C_ExecuteUbergraph_WBP_JoyCurve::CallFunc_GetValidValue_ReturnValue_1' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_JoyCurve_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_JoyCurve_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_JoyCurve_C_PreConstruct");
static_assert(sizeof(WBP_JoyCurve_C_PreConstruct) == 0x000001, "Wrong size on WBP_JoyCurve_C_PreConstruct");
static_assert(offsetof(WBP_JoyCurve_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_JoyCurve_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.BndEvt__DeadzoneControl_K2Node_ComponentBoundEvent_6_OnValueChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct WBP_JoyCurve_C_BndEvt__DeadzoneControl_K2Node_ComponentBoundEvent_6_OnValueChanged__DelegateSignature final
{
public:
	float                                         NewParam;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JoyCurve_C_BndEvt__DeadzoneControl_K2Node_ComponentBoundEvent_6_OnValueChanged__DelegateSignature) == 0x000004, "Wrong alignment on WBP_JoyCurve_C_BndEvt__DeadzoneControl_K2Node_ComponentBoundEvent_6_OnValueChanged__DelegateSignature");
static_assert(sizeof(WBP_JoyCurve_C_BndEvt__DeadzoneControl_K2Node_ComponentBoundEvent_6_OnValueChanged__DelegateSignature) == 0x000004, "Wrong size on WBP_JoyCurve_C_BndEvt__DeadzoneControl_K2Node_ComponentBoundEvent_6_OnValueChanged__DelegateSignature");
static_assert(offsetof(WBP_JoyCurve_C_BndEvt__DeadzoneControl_K2Node_ComponentBoundEvent_6_OnValueChanged__DelegateSignature, NewParam) == 0x000000, "Member 'WBP_JoyCurve_C_BndEvt__DeadzoneControl_K2Node_ComponentBoundEvent_6_OnValueChanged__DelegateSignature::NewParam' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.BndEvt__W_Slider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct WBP_JoyCurve_C_BndEvt__W_Slider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature final
{
public:
	float                                         NewParam;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JoyCurve_C_BndEvt__W_Slider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature) == 0x000004, "Wrong alignment on WBP_JoyCurve_C_BndEvt__W_Slider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature");
static_assert(sizeof(WBP_JoyCurve_C_BndEvt__W_Slider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature) == 0x000004, "Wrong size on WBP_JoyCurve_C_BndEvt__W_Slider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature");
static_assert(offsetof(WBP_JoyCurve_C_BndEvt__W_Slider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature, NewParam) == 0x000000, "Member 'WBP_JoyCurve_C_BndEvt__W_Slider_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature::NewParam' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.BndEvt__ComboBoxString_1105_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct WBP_JoyCurve_C_BndEvt__ComboBoxString_1105_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature final
{
public:
	class FString                                 SelectedItem;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	ESelectInfo                                   SelectionType;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JoyCurve_C_BndEvt__ComboBoxString_1105_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on WBP_JoyCurve_C_BndEvt__ComboBoxString_1105_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature");
static_assert(sizeof(WBP_JoyCurve_C_BndEvt__ComboBoxString_1105_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature) == 0x000018, "Wrong size on WBP_JoyCurve_C_BndEvt__ComboBoxString_1105_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature");
static_assert(offsetof(WBP_JoyCurve_C_BndEvt__ComboBoxString_1105_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature, SelectedItem) == 0x000000, "Member 'WBP_JoyCurve_C_BndEvt__ComboBoxString_1105_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature::SelectedItem' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_BndEvt__ComboBoxString_1105_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature, SelectionType) == 0x000010, "Member 'WBP_JoyCurve_C_BndEvt__ComboBoxString_1105_K2Node_ComponentBoundEvent_3_OnSelectionChangedEvent__DelegateSignature::SelectionType' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.BndEvt__CheckBox_356_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct WBP_JoyCurve_C_BndEvt__CheckBox_356_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_JoyCurve_C_BndEvt__CheckBox_356_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on WBP_JoyCurve_C_BndEvt__CheckBox_356_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature");
static_assert(sizeof(WBP_JoyCurve_C_BndEvt__CheckBox_356_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature) == 0x000001, "Wrong size on WBP_JoyCurve_C_BndEvt__CheckBox_356_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature");
static_assert(offsetof(WBP_JoyCurve_C_BndEvt__CheckBox_356_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature, bIsChecked) == 0x000000, "Member 'WBP_JoyCurve_C_BndEvt__CheckBox_356_K2Node_ComponentBoundEvent_4_OnCheckBoxComponentStateChanged__DelegateSignature::bIsChecked' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_JoyCurve_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JoyCurve_C_Tick) == 0x000004, "Wrong alignment on WBP_JoyCurve_C_Tick");
static_assert(sizeof(WBP_JoyCurve_C_Tick) == 0x00003C, "Wrong size on WBP_JoyCurve_C_Tick");
static_assert(offsetof(WBP_JoyCurve_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_JoyCurve_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_JoyCurve_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.Create_MID
// 0x0030 (0x0030 - 0x0000)
struct WBP_JoyCurve_C_Create_MID final
{
public:
	class UMaterialInterface*                     Temp_object_Variable;                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Temp_object_Variable_1;                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESQJoystickCurveTypes                         Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3196[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JoyCurve_C_Create_MID) == 0x000008, "Wrong alignment on WBP_JoyCurve_C_Create_MID");
static_assert(sizeof(WBP_JoyCurve_C_Create_MID) == 0x000030, "Wrong size on WBP_JoyCurve_C_Create_MID");
static_assert(offsetof(WBP_JoyCurve_C_Create_MID, Temp_object_Variable) == 0x000000, "Member 'WBP_JoyCurve_C_Create_MID::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Create_MID, Temp_object_Variable_1) == 0x000008, "Member 'WBP_JoyCurve_C_Create_MID::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Create_MID, Temp_byte_Variable) == 0x000010, "Member 'WBP_JoyCurve_C_Create_MID::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Create_MID, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000018, "Member 'WBP_JoyCurve_C_Create_MID::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Create_MID, K2Node_Select_Default) == 0x000020, "Member 'WBP_JoyCurve_C_Create_MID::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Create_MID, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000028, "Member 'WBP_JoyCurve_C_Create_MID::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.Update_MID
// 0x0028 (0x0028 - 0x0000)
struct WBP_JoyCurve_C_Update_MID final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESQJoyStickControls                           Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESQJoyStickControls                           Temp_byte_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3197[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SensitivityPreview_Out;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_JoyCurve_C_Update_MID) == 0x000004, "Wrong alignment on WBP_JoyCurve_C_Update_MID");
static_assert(sizeof(WBP_JoyCurve_C_Update_MID) == 0x000028, "Wrong size on WBP_JoyCurve_C_Update_MID");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, Temp_bool_Variable) == 0x000000, "Member 'WBP_JoyCurve_C_Update_MID::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, Temp_bool_Variable_1) == 0x000001, "Member 'WBP_JoyCurve_C_Update_MID::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, Temp_bool_Variable_2) == 0x000002, "Member 'WBP_JoyCurve_C_Update_MID::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, Temp_byte_Variable) == 0x000003, "Member 'WBP_JoyCurve_C_Update_MID::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, Temp_float_Variable) == 0x000004, "Member 'WBP_JoyCurve_C_Update_MID::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, Temp_float_Variable_1) == 0x000008, "Member 'WBP_JoyCurve_C_Update_MID::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, Temp_float_Variable_2) == 0x00000C, "Member 'WBP_JoyCurve_C_Update_MID::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, Temp_float_Variable_3) == 0x000010, "Member 'WBP_JoyCurve_C_Update_MID::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, Temp_byte_Variable_1) == 0x000014, "Member 'WBP_JoyCurve_C_Update_MID::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, K2Node_Select_Default) == 0x000015, "Member 'WBP_JoyCurve_C_Update_MID::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, K2Node_Select_Default_1) == 0x000018, "Member 'WBP_JoyCurve_C_Update_MID::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x00001C, "Member 'WBP_JoyCurve_C_Update_MID::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, CallFunc_SensitivityPreview_Out) == 0x000020, "Member 'WBP_JoyCurve_C_Update_MID::CallFunc_SensitivityPreview_Out' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'WBP_JoyCurve_C_Update_MID::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Update_MID, CallFunc_IsValid_ReturnValue_1) == 0x000025, "Member 'WBP_JoyCurve_C_Update_MID::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.GetCurveText
// 0x0050 (0x0050 - 0x0000)
struct WBP_JoyCurve_C_GetCurveText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0038(0x0018)()
};
static_assert(alignof(WBP_JoyCurve_C_GetCurveText) == 0x000008, "Wrong alignment on WBP_JoyCurve_C_GetCurveText");
static_assert(sizeof(WBP_JoyCurve_C_GetCurveText) == 0x000050, "Wrong size on WBP_JoyCurve_C_GetCurveText");
static_assert(offsetof(WBP_JoyCurve_C_GetCurveText, ReturnValue) == 0x000000, "Member 'WBP_JoyCurve_C_GetCurveText::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetCurveText, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000018, "Member 'WBP_JoyCurve_C_GetCurveText::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetCurveText, CallFunc_Concat_StrStr_ReturnValue) == 0x000028, "Member 'WBP_JoyCurve_C_GetCurveText::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetCurveText, CallFunc_Conv_StringToText_ReturnValue) == 0x000038, "Member 'WBP_JoyCurve_C_GetCurveText::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.GetDeadZoneValText
// 0x0040 (0x0040 - 0x0000)
struct WBP_JoyCurve_C_GetDeadZoneValText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0028(0x0018)()
};
static_assert(alignof(WBP_JoyCurve_C_GetDeadZoneValText) == 0x000008, "Wrong alignment on WBP_JoyCurve_C_GetDeadZoneValText");
static_assert(sizeof(WBP_JoyCurve_C_GetDeadZoneValText) == 0x000040, "Wrong size on WBP_JoyCurve_C_GetDeadZoneValText");
static_assert(offsetof(WBP_JoyCurve_C_GetDeadZoneValText, ReturnValue) == 0x000000, "Member 'WBP_JoyCurve_C_GetDeadZoneValText::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetDeadZoneValText, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'WBP_JoyCurve_C_GetDeadZoneValText::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetDeadZoneValText, CallFunc_FTrunc_ReturnValue) == 0x00001C, "Member 'WBP_JoyCurve_C_GetDeadZoneValText::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetDeadZoneValText, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000020, "Member 'WBP_JoyCurve_C_GetDeadZoneValText::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetDeadZoneValText, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'WBP_JoyCurve_C_GetDeadZoneValText::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetDeadZoneValText, CallFunc_Conv_FloatToText_ReturnValue) == 0x000028, "Member 'WBP_JoyCurve_C_GetDeadZoneValText::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.GetSensitivityText
// 0x0040 (0x0040 - 0x0000)
struct WBP_JoyCurve_C_GetSensitivityText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0028(0x0018)()
};
static_assert(alignof(WBP_JoyCurve_C_GetSensitivityText) == 0x000008, "Wrong alignment on WBP_JoyCurve_C_GetSensitivityText");
static_assert(sizeof(WBP_JoyCurve_C_GetSensitivityText) == 0x000040, "Wrong size on WBP_JoyCurve_C_GetSensitivityText");
static_assert(offsetof(WBP_JoyCurve_C_GetSensitivityText, ReturnValue) == 0x000000, "Member 'WBP_JoyCurve_C_GetSensitivityText::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetSensitivityText, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'WBP_JoyCurve_C_GetSensitivityText::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetSensitivityText, CallFunc_FTrunc_ReturnValue) == 0x00001C, "Member 'WBP_JoyCurve_C_GetSensitivityText::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetSensitivityText, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000020, "Member 'WBP_JoyCurve_C_GetSensitivityText::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetSensitivityText, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'WBP_JoyCurve_C_GetSensitivityText::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_GetSensitivityText, CallFunc_Conv_FloatToText_ReturnValue) == 0x000028, "Member 'WBP_JoyCurve_C_GetSensitivityText::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.SensitivityPreview
// 0x0028 (0x0028 - 0x0000)
struct WBP_JoyCurve_C_SensitivityPreview final
{
public:
	float                                         Out;                                               // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3198[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQJoyStickConfig                      CallFunc_GetJoyConfig_ReturnValue;                 // 0x0010(0x0010)(ConstParm, NoDestructor)
	float                                         CallFunc_CurveType_Out;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JoyCurve_C_SensitivityPreview) == 0x000008, "Wrong alignment on WBP_JoyCurve_C_SensitivityPreview");
static_assert(sizeof(WBP_JoyCurve_C_SensitivityPreview) == 0x000028, "Wrong size on WBP_JoyCurve_C_SensitivityPreview");
static_assert(offsetof(WBP_JoyCurve_C_SensitivityPreview, Out) == 0x000000, "Member 'WBP_JoyCurve_C_SensitivityPreview::Out' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_SensitivityPreview, CallFunc_GetSquadGameUserSettings_ReturnValue) == 0x000008, "Member 'WBP_JoyCurve_C_SensitivityPreview::CallFunc_GetSquadGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_SensitivityPreview, CallFunc_GetJoyConfig_ReturnValue) == 0x000010, "Member 'WBP_JoyCurve_C_SensitivityPreview::CallFunc_GetJoyConfig_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_SensitivityPreview, CallFunc_CurveType_Out) == 0x000020, "Member 'WBP_JoyCurve_C_SensitivityPreview::CallFunc_CurveType_Out' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.PopulateDefaults
// 0x0010 (0x0010 - 0x0000)
struct WBP_JoyCurve_C_PopulateDefaults final
{
public:
	struct FSQJoyStickConfig                      SQJoyStickConfig;                                  // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(WBP_JoyCurve_C_PopulateDefaults) == 0x000004, "Wrong alignment on WBP_JoyCurve_C_PopulateDefaults");
static_assert(sizeof(WBP_JoyCurve_C_PopulateDefaults) == 0x000010, "Wrong size on WBP_JoyCurve_C_PopulateDefaults");
static_assert(offsetof(WBP_JoyCurve_C_PopulateDefaults, SQJoyStickConfig) == 0x000000, "Member 'WBP_JoyCurve_C_PopulateDefaults::SQJoyStickConfig' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.SaveSettings
// 0x0018 (0x0018 - 0x0000)
struct WBP_JoyCurve_C_SaveSettings final
{
public:
	struct FSQJoyStickConfig                      K2Node_MakeStruct_SQJoyStickConfig;                // 0x0000(0x0010)(NoDestructor)
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue;     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JoyCurve_C_SaveSettings) == 0x000008, "Wrong alignment on WBP_JoyCurve_C_SaveSettings");
static_assert(sizeof(WBP_JoyCurve_C_SaveSettings) == 0x000018, "Wrong size on WBP_JoyCurve_C_SaveSettings");
static_assert(offsetof(WBP_JoyCurve_C_SaveSettings, K2Node_MakeStruct_SQJoyStickConfig) == 0x000000, "Member 'WBP_JoyCurve_C_SaveSettings::K2Node_MakeStruct_SQJoyStickConfig' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_SaveSettings, CallFunc_GetSquadGameUserSettings_ReturnValue) == 0x000010, "Member 'WBP_JoyCurve_C_SaveSettings::CallFunc_GetSquadGameUserSettings_ReturnValue' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.Get_AxisText_Text_0
// 0x00B0 (0x00B0 - 0x0000)
struct WBP_JoyCurve_C_Get_AxisText_Text_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	ESQJoyStickControls                           Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3199[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	class FText                                   Temp_text_Variable_2;                              // 0x0050(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0068(0x0018)()
	class FText                                   K2Node_Select_Default;                             // 0x0080(0x0018)()
	class FText                                   CallFunc_TextToUpper_ReturnValue;                  // 0x0098(0x0018)()
};
static_assert(alignof(WBP_JoyCurve_C_Get_AxisText_Text_0) == 0x000008, "Wrong alignment on WBP_JoyCurve_C_Get_AxisText_Text_0");
static_assert(sizeof(WBP_JoyCurve_C_Get_AxisText_Text_0) == 0x0000B0, "Wrong size on WBP_JoyCurve_C_Get_AxisText_Text_0");
static_assert(offsetof(WBP_JoyCurve_C_Get_AxisText_Text_0, ReturnValue) == 0x000000, "Member 'WBP_JoyCurve_C_Get_AxisText_Text_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Get_AxisText_Text_0, Temp_byte_Variable) == 0x000018, "Member 'WBP_JoyCurve_C_Get_AxisText_Text_0::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Get_AxisText_Text_0, Temp_text_Variable) == 0x000020, "Member 'WBP_JoyCurve_C_Get_AxisText_Text_0::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Get_AxisText_Text_0, Temp_text_Variable_1) == 0x000038, "Member 'WBP_JoyCurve_C_Get_AxisText_Text_0::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Get_AxisText_Text_0, Temp_text_Variable_2) == 0x000050, "Member 'WBP_JoyCurve_C_Get_AxisText_Text_0::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Get_AxisText_Text_0, Temp_text_Variable_3) == 0x000068, "Member 'WBP_JoyCurve_C_Get_AxisText_Text_0::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Get_AxisText_Text_0, K2Node_Select_Default) == 0x000080, "Member 'WBP_JoyCurve_C_Get_AxisText_Text_0::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_JoyCurve_C_Get_AxisText_Text_0, CallFunc_TextToUpper_ReturnValue) == 0x000098, "Member 'WBP_JoyCurve_C_Get_AxisText_Text_0::CallFunc_TextToUpper_ReturnValue' has a wrong offset!");

// Function WBP_JoyCurve.WBP_JoyCurve_C.Get Axis Deadzone
// 0x0004 (0x0004 - 0x0000)
struct WBP_JoyCurve_C_Get_Axis_Deadzone final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JoyCurve_C_Get_Axis_Deadzone) == 0x000004, "Wrong alignment on WBP_JoyCurve_C_Get_Axis_Deadzone");
static_assert(sizeof(WBP_JoyCurve_C_Get_Axis_Deadzone) == 0x000004, "Wrong size on WBP_JoyCurve_C_Get_Axis_Deadzone");
static_assert(offsetof(WBP_JoyCurve_C_Get_Axis_Deadzone, ReturnValue) == 0x000000, "Member 'WBP_JoyCurve_C_Get_Axis_Deadzone::ReturnValue' has a wrong offset!");

}

