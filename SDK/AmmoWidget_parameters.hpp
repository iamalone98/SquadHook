#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmmoWidget

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function AmmoWidget.AmmoWidget_C.ExecuteUbergraph_AmmoWidget
// 0x00D8 (0x00D8 - 0x0000)
struct AmmoWidget_C_ExecuteUbergraph_AmmoWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BF8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQMagazineGroupWidget*>         K2Node_MakeArray_Array;                            // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	class ASQWeapon*                              K2Node_DynamicCast_AsSQWeapon;                     // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BF9[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_Map_Values_Values;                        // 0x0040(0x0010)(ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BFA[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BFB[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BFC[0x2];                                     // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMagazineGroupWidget*                 CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BFD[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMagazineWidget*                      CallFunc_Array_Get_Item_2;                         // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_NewFOV;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_NewMagnification;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BFE[0x3];                                     // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool bIsStateA)>               K2Node_CreateDelegate_OutputDelegate_1;            // 0x009C(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BFF[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C00[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQSettingsSubsystem*                   CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(float NewFOV, int32 NewMagnification)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x00C0(0x0010)(ZeroConstructor, NoDestructor)
	class USQGameplayEventsSubsystem*             CallFunc_GetGameInstanceSubsystem_ReturnValue_1;   // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget) == 0x000008, "Wrong alignment on AmmoWidget_C_ExecuteUbergraph_AmmoWidget");
static_assert(sizeof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget) == 0x0000D8, "Wrong size on AmmoWidget_C_ExecuteUbergraph_AmmoWidget");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, EntryPoint) == 0x000000, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, Temp_int_Array_Index_Variable) == 0x000014, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, K2Node_MakeArray_Array) == 0x000020, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, K2Node_DynamicCast_AsSQWeapon) == 0x000030, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::K2Node_DynamicCast_AsSQWeapon' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Map_Values_Values) == 0x000040, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Array_Get_Item) == 0x000054, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000058, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00005C, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Round_ReturnValue) == 0x000060, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Less_FloatFloat_ReturnValue) == 0x000064, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_BooleanAND_ReturnValue) == 0x000065, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Array_Get_Item_2) == 0x000078, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Array_Length_ReturnValue_1) == 0x000080, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, K2Node_CustomEvent_NewFOV) == 0x000084, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::K2Node_CustomEvent_NewFOV' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, K2Node_CustomEvent_NewMagnification) == 0x000088, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::K2Node_CustomEvent_NewMagnification' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, Temp_int_Loop_Counter_Variable) == 0x00008C, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Add_IntInt_ReturnValue) == 0x000094, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, Temp_int_Loop_Counter_Variable_1) == 0x000098, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, K2Node_CreateDelegate_OutputDelegate_1) == 0x00009C, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000AC, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000B0, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x0000B8, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, K2Node_CreateDelegate_OutputDelegate_2) == 0x0000C0, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_ExecuteUbergraph_AmmoWidget, CallFunc_GetGameInstanceSubsystem_ReturnValue_1) == 0x0000D0, "Member 'AmmoWidget_C_ExecuteUbergraph_AmmoWidget::CallFunc_GetGameInstanceSubsystem_ReturnValue_1' has a wrong offset!");

// Function AmmoWidget.AmmoWidget_C.MagnificationChanged
// 0x0008 (0x0008 - 0x0000)
struct AmmoWidget_C_MagnificationChanged final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewMagnification;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AmmoWidget_C_MagnificationChanged) == 0x000004, "Wrong alignment on AmmoWidget_C_MagnificationChanged");
static_assert(sizeof(AmmoWidget_C_MagnificationChanged) == 0x000008, "Wrong size on AmmoWidget_C_MagnificationChanged");
static_assert(offsetof(AmmoWidget_C_MagnificationChanged, NewFOV) == 0x000000, "Member 'AmmoWidget_C_MagnificationChanged::NewFOV' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_MagnificationChanged, NewMagnification) == 0x000004, "Member 'AmmoWidget_C_MagnificationChanged::NewMagnification' has a wrong offset!");

// Function AmmoWidget.AmmoWidget_C.UpdateScopeMagnificationText
// 0x0070 (0x0070 - 0x0000)
struct AmmoWidget_C_UpdateScopeMagnificationText final
{
public:
	int32                                         Magnification;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C01[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0008(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0058(0x0018)()
};
static_assert(alignof(AmmoWidget_C_UpdateScopeMagnificationText) == 0x000008, "Wrong alignment on AmmoWidget_C_UpdateScopeMagnificationText");
static_assert(sizeof(AmmoWidget_C_UpdateScopeMagnificationText) == 0x000070, "Wrong size on AmmoWidget_C_UpdateScopeMagnificationText");
static_assert(offsetof(AmmoWidget_C_UpdateScopeMagnificationText, Magnification) == 0x000000, "Member 'AmmoWidget_C_UpdateScopeMagnificationText::Magnification' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateScopeMagnificationText, K2Node_MakeStruct_FormatArgumentData) == 0x000008, "Member 'AmmoWidget_C_UpdateScopeMagnificationText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateScopeMagnificationText, K2Node_MakeArray_Array) == 0x000048, "Member 'AmmoWidget_C_UpdateScopeMagnificationText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateScopeMagnificationText, CallFunc_Format_ReturnValue) == 0x000058, "Member 'AmmoWidget_C_UpdateScopeMagnificationText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function AmmoWidget.AmmoWidget_C.OnAdsEventDelegate
// 0x0020 (0x0020 - 0x0000)
struct AmmoWidget_C_OnAdsEventDelegate final
{
public:
	bool                                          bIsStateA;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C02[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQWeapon*                              K2Node_DynamicCast_AsSQWeapon;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C03[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Map_Length_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AmmoWidget_C_OnAdsEventDelegate) == 0x000008, "Wrong alignment on AmmoWidget_C_OnAdsEventDelegate");
static_assert(sizeof(AmmoWidget_C_OnAdsEventDelegate) == 0x000020, "Wrong size on AmmoWidget_C_OnAdsEventDelegate");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, bIsStateA) == 0x000000, "Member 'AmmoWidget_C_OnAdsEventDelegate::bIsStateA' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, Temp_byte_Variable) == 0x000001, "Member 'AmmoWidget_C_OnAdsEventDelegate::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, Temp_byte_Variable_1) == 0x000002, "Member 'AmmoWidget_C_OnAdsEventDelegate::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, Temp_bool_Variable) == 0x000003, "Member 'AmmoWidget_C_OnAdsEventDelegate::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, K2Node_DynamicCast_AsSQWeapon) == 0x000008, "Member 'AmmoWidget_C_OnAdsEventDelegate::K2Node_DynamicCast_AsSQWeapon' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'AmmoWidget_C_OnAdsEventDelegate::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'AmmoWidget_C_OnAdsEventDelegate::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, CallFunc_Map_Length_ReturnValue) == 0x000014, "Member 'AmmoWidget_C_OnAdsEventDelegate::CallFunc_Map_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'AmmoWidget_C_OnAdsEventDelegate::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, CallFunc_BooleanAND_ReturnValue) == 0x000019, "Member 'AmmoWidget_C_OnAdsEventDelegate::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_OnAdsEventDelegate, K2Node_Select_Default) == 0x00001A, "Member 'AmmoWidget_C_OnAdsEventDelegate::K2Node_Select_Default' has a wrong offset!");

// Function AmmoWidget.AmmoWidget_C.UpdateKeybind
// 0x0080 (0x0080 - 0x0000)
struct AmmoWidget_C_UpdateKeybind final
{
public:
	struct FKey                                   PreviousKey;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   CallFunc_GetKeyName_OutName;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetShortActionName_Short_Name;            // 0x0020(0x0018)()
	class UInputSettings*                         CallFunc_GetInputSettings_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C04[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputActionKeyMapping>         CallFunc_GetActionMappingByName_OutMappings;       // 0x0048(0x0010)(ReferenceParm)
	class FName                                   CallFunc_BreakInputActionKeyMapping_ActionName;    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   CallFunc_BreakInputActionKeyMapping_Key;           // 0x0060(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_BreakInputActionKeyMapping_bShift;        // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakInputActionKeyMapping_bCtrl;         // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakInputActionKeyMapping_bAlt;          // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakInputActionKeyMapping_bCmd;          // 0x007B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(AmmoWidget_C_UpdateKeybind) == 0x000008, "Wrong alignment on AmmoWidget_C_UpdateKeybind");
static_assert(sizeof(AmmoWidget_C_UpdateKeybind) == 0x000080, "Wrong size on AmmoWidget_C_UpdateKeybind");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, PreviousKey) == 0x000000, "Member 'AmmoWidget_C_UpdateKeybind::PreviousKey' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_GetKeyName_OutName) == 0x000018, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_GetKeyName_OutName' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_GetShortActionName_Short_Name) == 0x000020, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_GetShortActionName_Short_Name' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_GetInputSettings_ReturnValue) == 0x000038, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_GetInputSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_GetActionMappingByName_OutMappings) == 0x000048, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_GetActionMappingByName_OutMappings' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_BreakInputActionKeyMapping_ActionName) == 0x000058, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_BreakInputActionKeyMapping_ActionName' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_BreakInputActionKeyMapping_Key) == 0x000060, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_BreakInputActionKeyMapping_Key' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_BreakInputActionKeyMapping_bShift) == 0x000078, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_BreakInputActionKeyMapping_bShift' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_BreakInputActionKeyMapping_bCtrl) == 0x000079, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_BreakInputActionKeyMapping_bCtrl' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_BreakInputActionKeyMapping_bAlt) == 0x00007A, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_BreakInputActionKeyMapping_bAlt' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_BreakInputActionKeyMapping_bCmd) == 0x00007B, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_BreakInputActionKeyMapping_bCmd' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_UpdateKeybind, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x00007C, "Member 'AmmoWidget_C_UpdateKeybind::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");

// Function AmmoWidget.AmmoWidget_C.GetShortActionName
// 0x0040 (0x0040 - 0x0000)
struct AmmoWidget_C_GetShortActionName final
{
public:
	class FName                                   InAction;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Short_Name;                                        // 0x0008(0x0018)(Parm, OutParm)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C05[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0028(0x0018)()
};
static_assert(alignof(AmmoWidget_C_GetShortActionName) == 0x000008, "Wrong alignment on AmmoWidget_C_GetShortActionName");
static_assert(sizeof(AmmoWidget_C_GetShortActionName) == 0x000040, "Wrong size on AmmoWidget_C_GetShortActionName");
static_assert(offsetof(AmmoWidget_C_GetShortActionName, InAction) == 0x000000, "Member 'AmmoWidget_C_GetShortActionName::InAction' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_GetShortActionName, Short_Name) == 0x000008, "Member 'AmmoWidget_C_GetShortActionName::Short_Name' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_GetShortActionName, K2Node_SwitchName_CmpSuccess) == 0x000020, "Member 'AmmoWidget_C_GetShortActionName::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_GetShortActionName, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000021, "Member 'AmmoWidget_C_GetShortActionName::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_GetShortActionName, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x000022, "Member 'AmmoWidget_C_GetShortActionName::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AmmoWidget_C_GetShortActionName, CallFunc_Conv_NameToText_ReturnValue) == 0x000028, "Member 'AmmoWidget_C_GetShortActionName::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");

}

