#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleSpawner

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ESQVehicleSpawnerSize_structs.hpp"
#include "ESQVehicleTag_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ESQBiome_structs.hpp"
#include "Squad_structs.hpp"
#include "Squad_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VehicleSpawner.BP_VehicleSpawner_C
// 0x0170 (0x0470 - 0x0300)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_VehicleSpawner_C : public ASQVehicleSpawner
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0300(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   PreviewText;                                       // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 PreviewMesh;                                       // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SQVehicleSpawnerSettings_C*         Settings;                                          // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMap<ESQVehicleSpawnerSize, struct FVector>   SizeMap;                                           // 0x0330(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                          OverlappedAtStart;                                 // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B01[0x7];                                     // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESQVehicleSpawnerSize, struct FTimespan> DelayMap;                                          // 0x0388(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FTimespan                              PrioritarySpawnerDelayOffset;                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NeutralVehicleAlive;                               // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Override_Initial_Health;                           // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          NeverDestroyComponents;                            // 0x03E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_4B02[0x1];                                     // 0x03E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialHealthFraction;                             // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         InitialEngineHealthFraction;                       // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         InitialPropulsionHealthFraction;                   // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Override_Initial_Resource_Loadout;                 // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_4B03[0x3];                                     // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialLoadPct_Ammo;                               // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         InitalLoadPct_Construction;                        // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Override_Initial_Weapon_Ammo;                      // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_4B04[0x3];                                     // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialWeaponAmmo;                                 // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_4B05[0x4];                                     // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<ESQVehicleTag>                           RequiredTags;                                      // 0x0408(0x0050)(Edit, BlueprintVisible)
	int32                                         MaxNumSpawns;                                      // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentSpawnCount;                                 // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         UniqueUsageVehiclePriorityBonus;                   // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOverridedBiome;                                 // 0x0464(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay)
	ESQBiome                                      TargetBiomeOverride;                               // 0x0465(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_VehicleSpawner(int32 EntryPoint);
	void ReceiveDestroyed();
	void OnNeutralVehicleDestroyed(class ASQVehicle* Vehicle);
	void OnVehicleSpawned(class ASQVehicle* OutVehicle);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void GeneratePreviewMesh();
	void GenerateReservedAreaDisplay(bool Reset);
	void SetVehicleDamage(class ASQVehicle* In_Vehicle);
	void SetEngineDamage(class ASQVehicle* In_Vehicle);
	void SetPropulsionDamage(class ASQVehicle* In_Vehicle);
	void SetComponentsArrayHealth(TArray<class USQVehicleComponent*>& Components, bool Param_NeverDestroyComponents, float NewHealthFrac);
	void SetComponentsHealthByType(class ASQVehicle* VehicleTarget, class UClass* ClassToChangeHealth, float FractionHealth, bool* Success);
	void SetWeaponInitialAmmo(class ASQVehicle* InputPin);
	void GetDebugTeam(ESQTeam* OutDebugTeam);
	void LoadPreviewMesh(TSoftClassPtr<class UClass> AssetClass);
	void RefreshPreview();
	void SetPreviewMesh(class USkinnedMeshComponent* Mesh);
	void GetDebugPosition(struct FTransform* OutPosition);
	void Set_PreviewText(const struct FLinearColor& InTextColor);
	void Editor_GetVehicleToSpawn(TArray<class USQAvailability_Vehicle*>& In_Vehicles, bool* Out_Has_Something_To_Spawn, class USQVehicleSettings** Out_Selected_Vehicle);

	bool CanSpawnVehicle(const class USQVehicleSettings* InAvailableVehicle) const;
	void GetVehicleReference(class USQVehicleSettings* InVehicleSettings, TSoftClassPtr<class UClass>* OutVehicleReference) const;
	bool IsConfigurationValid() const;
	void GetSpawnerBound(struct FVector* OutBounds) const;
	bool IsSpawnerAvailable() const;
	int32 GetVehiclePriority(const struct FSQAvailabilityState_Vehicle& InAvailableVehicle) const;
	struct FTimespan ComputeInitialSpawnerDelay() const;
	struct FTimespan ComputeSpawnerDelay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VehicleSpawner_C">();
	}
	static class ABP_VehicleSpawner_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VehicleSpawner_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_VehicleSpawner_C) == 0x000010, "Wrong alignment on ABP_VehicleSpawner_C");
static_assert(sizeof(ABP_VehicleSpawner_C) == 0x000470, "Wrong size on ABP_VehicleSpawner_C");
static_assert(offsetof(ABP_VehicleSpawner_C, UberGraphFrame) == 0x000300, "Member 'ABP_VehicleSpawner_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, PreviewText) == 0x000308, "Member 'ABP_VehicleSpawner_C::PreviewText' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, PreviewMesh) == 0x000310, "Member 'ABP_VehicleSpawner_C::PreviewMesh' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, Arrow) == 0x000318, "Member 'ABP_VehicleSpawner_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, DefaultSceneRoot) == 0x000320, "Member 'ABP_VehicleSpawner_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, Settings) == 0x000328, "Member 'ABP_VehicleSpawner_C::Settings' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, SizeMap) == 0x000330, "Member 'ABP_VehicleSpawner_C::SizeMap' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, OverlappedAtStart) == 0x000380, "Member 'ABP_VehicleSpawner_C::OverlappedAtStart' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, DelayMap) == 0x000388, "Member 'ABP_VehicleSpawner_C::DelayMap' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, PrioritarySpawnerDelayOffset) == 0x0003D8, "Member 'ABP_VehicleSpawner_C::PrioritarySpawnerDelayOffset' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, NeutralVehicleAlive) == 0x0003E0, "Member 'ABP_VehicleSpawner_C::NeutralVehicleAlive' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, Override_Initial_Health) == 0x0003E1, "Member 'ABP_VehicleSpawner_C::Override_Initial_Health' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, NeverDestroyComponents) == 0x0003E2, "Member 'ABP_VehicleSpawner_C::NeverDestroyComponents' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, InitialHealthFraction) == 0x0003E4, "Member 'ABP_VehicleSpawner_C::InitialHealthFraction' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, InitialEngineHealthFraction) == 0x0003E8, "Member 'ABP_VehicleSpawner_C::InitialEngineHealthFraction' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, InitialPropulsionHealthFraction) == 0x0003EC, "Member 'ABP_VehicleSpawner_C::InitialPropulsionHealthFraction' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, Override_Initial_Resource_Loadout) == 0x0003F0, "Member 'ABP_VehicleSpawner_C::Override_Initial_Resource_Loadout' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, InitialLoadPct_Ammo) == 0x0003F4, "Member 'ABP_VehicleSpawner_C::InitialLoadPct_Ammo' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, InitalLoadPct_Construction) == 0x0003F8, "Member 'ABP_VehicleSpawner_C::InitalLoadPct_Construction' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, Override_Initial_Weapon_Ammo) == 0x0003FC, "Member 'ABP_VehicleSpawner_C::Override_Initial_Weapon_Ammo' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, InitialWeaponAmmo) == 0x000400, "Member 'ABP_VehicleSpawner_C::InitialWeaponAmmo' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, RequiredTags) == 0x000408, "Member 'ABP_VehicleSpawner_C::RequiredTags' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, MaxNumSpawns) == 0x000458, "Member 'ABP_VehicleSpawner_C::MaxNumSpawns' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, CurrentSpawnCount) == 0x00045C, "Member 'ABP_VehicleSpawner_C::CurrentSpawnCount' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, UniqueUsageVehiclePriorityBonus) == 0x000460, "Member 'ABP_VehicleSpawner_C::UniqueUsageVehiclePriorityBonus' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, UseOverridedBiome) == 0x000464, "Member 'ABP_VehicleSpawner_C::UseOverridedBiome' has a wrong offset!");
static_assert(offsetof(ABP_VehicleSpawner_C, TargetBiomeOverride) == 0x000465, "Member 'ABP_VehicleSpawner_C::TargetBiomeOverride' has a wrong offset!");

}

