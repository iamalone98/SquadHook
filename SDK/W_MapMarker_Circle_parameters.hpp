#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MapMarker_Circle

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_MapMarker_Circle.W_MapMarker_Circle_C.ExecuteUbergraph_W_MapMarker_Circle
// 0x0058 (0x0058 - 0x0000)
struct W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B9[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Get_World_Distance_to_Pixel_Distance_Pixel; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46BA[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle) == 0x000008, "Wrong alignment on W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle");
static_assert(sizeof(W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle) == 0x000058, "Wrong size on W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle");
static_assert(offsetof(W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle, EntryPoint) == 0x000000, "Member 'W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle, K2Node_Event_MyGeometry) == 0x000004, "Member 'W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle, CallFunc_Get_World_Distance_to_Pixel_Distance_Pixel) == 0x000044, "Member 'W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle::CallFunc_Get_World_Distance_to_Pixel_Distance_Pixel' has a wrong offset!");
static_assert(offsetof(W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000048, "Member 'W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle, CallFunc_PlayAnimation_ReturnValue) == 0x000050, "Member 'W_MapMarker_Circle_C_ExecuteUbergraph_W_MapMarker_Circle::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");

// Function W_MapMarker_Circle.W_MapMarker_Circle_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_MapMarker_Circle_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapMarker_Circle_C_Tick) == 0x000004, "Wrong alignment on W_MapMarker_Circle_C_Tick");
static_assert(sizeof(W_MapMarker_Circle_C_Tick) == 0x00003C, "Wrong size on W_MapMarker_Circle_C_Tick");
static_assert(offsetof(W_MapMarker_Circle_C_Tick, MyGeometry) == 0x000000, "Member 'W_MapMarker_Circle_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_MapMarker_Circle_C_Tick, InDeltaTime) == 0x000038, "Member 'W_MapMarker_Circle_C_Tick::InDeltaTime' has a wrong offset!");

}

