#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Deployable_GenericMine_AT

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Squad_structs.hpp"
#include "Squad_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Deployable_GenericMine_AT.BP_Deployable_GenericMine_AT_C
// 0x00D8 (0x0528 - 0x0450)
class ABP_Deployable_GenericMine_AT_C : public ASQDeployableItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0450(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Mine;                                              // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       TriggerSphere;                                     // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQMapIconComponent*                    SQMapIcon;                                         // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ShovelSphere;                                      // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mine_partialdug;                                   // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mine_undug;                                        // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DamageType;                                        // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasExploded;                                      // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CC1[0x7];                                     // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 EquippableItem_Deployable_Class;                   // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            PlacedByController;                                // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MineBaseDamage;                                    // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MineMinimumDamage;                                 // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MineKillZoneRadius;                                // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MineDamageInnerRadius;                             // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MineDamageOuterRadius;                             // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MineDamageFalloff;                                 // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MineClickSound;                                    // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<ESQBuildState>                           BuildStatesToAllowPickup;                          // 0x04C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 LastingEffect;                                     // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SuppressionInfoClass;                              // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Deployable_GenericMine_AT(int32 EntryPoint);
	void OnOwningPlayerTeamStateChanged(class ASQTeamState* OldTeam, class ASQTeamState* NewTeam);
	void ReceiveBeginPlay();
	void Pickup_Item(class APlayerController* Player);
	void BPOnUsed(class AController* User);
	void RemovedFromPlayersPlacedList();
	void OnDestroyEvent();
	void BndEvt__Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Player_Left_Radius(class APlayerController* Player);
	void Player_Enter_Radius(class APlayerController* Player, bool Can_Pickup);
	int32 GetInterfaceTeam();
	struct FSQUsableData GetUsableData();
	void CanAddItem(class ASQEquipableItem* Item, int32 CountToAdd, bool* Can_Add);
	bool ShouldDisplayPrompt(class AController* User);
	void ApplySuppression();

	int32 GetTeamId() const;
	void GetEquippableItem(class USQPawnInventoryComponent* Inventory, class ASQEquipableItem** Item) const;
	void CanPlayerPickup(class ASQPlayerController* Player, bool* PlayerCanPickUpThis) const;
	void CanBePickedUp(bool* Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Deployable_GenericMine_AT_C">();
	}
	static class ABP_Deployable_GenericMine_AT_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Deployable_GenericMine_AT_C>();
	}
};
static_assert(alignof(ABP_Deployable_GenericMine_AT_C) == 0x000008, "Wrong alignment on ABP_Deployable_GenericMine_AT_C");
static_assert(sizeof(ABP_Deployable_GenericMine_AT_C) == 0x000528, "Wrong size on ABP_Deployable_GenericMine_AT_C");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, UberGraphFrame) == 0x000450, "Member 'ABP_Deployable_GenericMine_AT_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, Mine) == 0x000458, "Member 'ABP_Deployable_GenericMine_AT_C::Mine' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, TriggerSphere) == 0x000460, "Member 'ABP_Deployable_GenericMine_AT_C::TriggerSphere' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, SQMapIcon) == 0x000468, "Member 'ABP_Deployable_GenericMine_AT_C::SQMapIcon' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, ShovelSphere) == 0x000470, "Member 'ABP_Deployable_GenericMine_AT_C::ShovelSphere' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, Mine_partialdug) == 0x000478, "Member 'ABP_Deployable_GenericMine_AT_C::Mine_partialdug' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, Mine_undug) == 0x000480, "Member 'ABP_Deployable_GenericMine_AT_C::Mine_undug' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, DamageType) == 0x000488, "Member 'ABP_Deployable_GenericMine_AT_C::DamageType' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, bHasExploded) == 0x000490, "Member 'ABP_Deployable_GenericMine_AT_C::bHasExploded' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, EquippableItem_Deployable_Class) == 0x000498, "Member 'ABP_Deployable_GenericMine_AT_C::EquippableItem_Deployable_Class' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, PlacedByController) == 0x0004A0, "Member 'ABP_Deployable_GenericMine_AT_C::PlacedByController' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, MineBaseDamage) == 0x0004A8, "Member 'ABP_Deployable_GenericMine_AT_C::MineBaseDamage' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, MineMinimumDamage) == 0x0004AC, "Member 'ABP_Deployable_GenericMine_AT_C::MineMinimumDamage' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, MineKillZoneRadius) == 0x0004B0, "Member 'ABP_Deployable_GenericMine_AT_C::MineKillZoneRadius' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, MineDamageInnerRadius) == 0x0004B4, "Member 'ABP_Deployable_GenericMine_AT_C::MineDamageInnerRadius' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, MineDamageOuterRadius) == 0x0004B8, "Member 'ABP_Deployable_GenericMine_AT_C::MineDamageOuterRadius' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, MineDamageFalloff) == 0x0004BC, "Member 'ABP_Deployable_GenericMine_AT_C::MineDamageFalloff' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, MineClickSound) == 0x0004C0, "Member 'ABP_Deployable_GenericMine_AT_C::MineClickSound' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, BuildStatesToAllowPickup) == 0x0004C8, "Member 'ABP_Deployable_GenericMine_AT_C::BuildStatesToAllowPickup' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, LastingEffect) == 0x000518, "Member 'ABP_Deployable_GenericMine_AT_C::LastingEffect' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericMine_AT_C, SuppressionInfoClass) == 0x000520, "Member 'ABP_Deployable_GenericMine_AT_C::SuppressionInfoClass' has a wrong offset!");

}

