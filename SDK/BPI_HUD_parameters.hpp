#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_HUD

#include "Basic.hpp"

#include "Squad_structs.hpp"


namespace SDK::Params
{

// Function BPI_HUD.BPI_HUD_C.Create Radial Menu
// 0x0018 (0x0018 - 0x0000)
struct BPI_HUD_C_Create_Radial_Menu final
{
public:
	class UClass*                                 Model;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Close_Command;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Context;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_Create_Radial_Menu) == 0x000008, "Wrong alignment on BPI_HUD_C_Create_Radial_Menu");
static_assert(sizeof(BPI_HUD_C_Create_Radial_Menu) == 0x000018, "Wrong size on BPI_HUD_C_Create_Radial_Menu");
static_assert(offsetof(BPI_HUD_C_Create_Radial_Menu, Model) == 0x000000, "Member 'BPI_HUD_C_Create_Radial_Menu::Model' has a wrong offset!");
static_assert(offsetof(BPI_HUD_C_Create_Radial_Menu, Close_Command) == 0x000008, "Member 'BPI_HUD_C_Create_Radial_Menu::Close_Command' has a wrong offset!");
static_assert(offsetof(BPI_HUD_C_Create_Radial_Menu, Context) == 0x000010, "Member 'BPI_HUD_C_Create_Radial_Menu::Context' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Get Radial Menu
// 0x0008 (0x0008 - 0x0000)
struct BPI_HUD_C_Get_Radial_Menu final
{
public:
	class UBaseRadialMenu_C*                      Radial_Menu;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_Get_Radial_Menu) == 0x000008, "Wrong alignment on BPI_HUD_C_Get_Radial_Menu");
static_assert(sizeof(BPI_HUD_C_Get_Radial_Menu) == 0x000008, "Wrong size on BPI_HUD_C_Get_Radial_Menu");
static_assert(offsetof(BPI_HUD_C_Get_Radial_Menu, Radial_Menu) == 0x000000, "Member 'BPI_HUD_C_Get_Radial_Menu::Radial_Menu' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Show 3D Marker
// 0x0008 (0x0008 - 0x0000)
struct BPI_HUD_C_Show_3D_Marker final
{
public:
	class ASQMapMarker*                           Marker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_Show_3D_Marker) == 0x000008, "Wrong alignment on BPI_HUD_C_Show_3D_Marker");
static_assert(sizeof(BPI_HUD_C_Show_3D_Marker) == 0x000008, "Wrong size on BPI_HUD_C_Show_3D_Marker");
static_assert(offsetof(BPI_HUD_C_Show_3D_Marker, Marker) == 0x000000, "Member 'BPI_HUD_C_Show_3D_Marker::Marker' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Get Main Menus
// 0x0018 (0x0018 - 0x0000)
struct BPI_HUD_C_Get_Main_Menus final
{
public:
	class UUMG_MenuBase_C*                        Deployment;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_MenuBase_C*                        Command;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_MenuBase_C*                        Roaming;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_Get_Main_Menus) == 0x000008, "Wrong alignment on BPI_HUD_C_Get_Main_Menus");
static_assert(sizeof(BPI_HUD_C_Get_Main_Menus) == 0x000018, "Wrong size on BPI_HUD_C_Get_Main_Menus");
static_assert(offsetof(BPI_HUD_C_Get_Main_Menus, Deployment) == 0x000000, "Member 'BPI_HUD_C_Get_Main_Menus::Deployment' has a wrong offset!");
static_assert(offsetof(BPI_HUD_C_Get_Main_Menus, Command) == 0x000008, "Member 'BPI_HUD_C_Get_Main_Menus::Command' has a wrong offset!");
static_assert(offsetof(BPI_HUD_C_Get_Main_Menus, Roaming) == 0x000010, "Member 'BPI_HUD_C_Get_Main_Menus::Roaming' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Get Is Showing Settings Menu
// 0x0001 (0x0001 - 0x0000)
struct BPI_HUD_C_Get_Is_Showing_Settings_Menu final
{
public:
	bool                                          Showing_Main_Menu;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HUD_C_Get_Is_Showing_Settings_Menu) == 0x000001, "Wrong alignment on BPI_HUD_C_Get_Is_Showing_Settings_Menu");
static_assert(sizeof(BPI_HUD_C_Get_Is_Showing_Settings_Menu) == 0x000001, "Wrong size on BPI_HUD_C_Get_Is_Showing_Settings_Menu");
static_assert(offsetof(BPI_HUD_C_Get_Is_Showing_Settings_Menu, Showing_Main_Menu) == 0x000000, "Member 'BPI_HUD_C_Get_Is_Showing_Settings_Menu::Showing_Main_Menu' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Get Map Core
// 0x0008 (0x0008 - 0x0000)
struct BPI_HUD_C_Get_Map_Core final
{
public:
	class UW_SQMapCore_C*                         Map_Core;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_Get_Map_Core) == 0x000008, "Wrong alignment on BPI_HUD_C_Get_Map_Core");
static_assert(sizeof(BPI_HUD_C_Get_Map_Core) == 0x000008, "Wrong size on BPI_HUD_C_Get_Map_Core");
static_assert(offsetof(BPI_HUD_C_Get_Map_Core, Map_Core) == 0x000000, "Member 'BPI_HUD_C_Get_Map_Core::Map_Core' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Get Map Component
// 0x0008 (0x0008 - 0x0000)
struct BPI_HUD_C_Get_Map_Component final
{
public:
	class USQCoreStateMapComponent*               Map_Component;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_Get_Map_Component) == 0x000008, "Wrong alignment on BPI_HUD_C_Get_Map_Component");
static_assert(sizeof(BPI_HUD_C_Get_Map_Component) == 0x000008, "Wrong size on BPI_HUD_C_Get_Map_Component");
static_assert(offsetof(BPI_HUD_C_Get_Map_Component, Map_Component) == 0x000000, "Member 'BPI_HUD_C_Get_Map_Component::Map_Component' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Menu Toggle
// 0x0018 (0x0018 - 0x0000)
struct BPI_HUD_C_Menu_Toggle final
{
public:
	bool                                          Instant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F65[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMG_MenuBase_C*                        In_Menu;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_Mouse;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HUD_C_Menu_Toggle) == 0x000008, "Wrong alignment on BPI_HUD_C_Menu_Toggle");
static_assert(sizeof(BPI_HUD_C_Menu_Toggle) == 0x000018, "Wrong size on BPI_HUD_C_Menu_Toggle");
static_assert(offsetof(BPI_HUD_C_Menu_Toggle, Instant) == 0x000000, "Member 'BPI_HUD_C_Menu_Toggle::Instant' has a wrong offset!");
static_assert(offsetof(BPI_HUD_C_Menu_Toggle, In_Menu) == 0x000008, "Member 'BPI_HUD_C_Menu_Toggle::In_Menu' has a wrong offset!");
static_assert(offsetof(BPI_HUD_C_Menu_Toggle, Show_Mouse) == 0x000010, "Member 'BPI_HUD_C_Menu_Toggle::Show_Mouse' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Menu Close
// 0x0008 (0x0008 - 0x0000)
struct BPI_HUD_C_Menu_Close final
{
public:
	class UUMG_MenuBase_C*                        Menu;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_Menu_Close) == 0x000008, "Wrong alignment on BPI_HUD_C_Menu_Close");
static_assert(sizeof(BPI_HUD_C_Menu_Close) == 0x000008, "Wrong size on BPI_HUD_C_Menu_Close");
static_assert(offsetof(BPI_HUD_C_Menu_Close, Menu) == 0x000000, "Member 'BPI_HUD_C_Menu_Close::Menu' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.End Match
// 0x0010 (0x0010 - 0x0000)
struct BPI_HUD_C_End_Match final
{
public:
	int32                                         Winning_Team;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Losing_Team;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Winning_Tickets;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Loser_Tickets;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_End_Match) == 0x000004, "Wrong alignment on BPI_HUD_C_End_Match");
static_assert(sizeof(BPI_HUD_C_End_Match) == 0x000010, "Wrong size on BPI_HUD_C_End_Match");
static_assert(offsetof(BPI_HUD_C_End_Match, Winning_Team) == 0x000000, "Member 'BPI_HUD_C_End_Match::Winning_Team' has a wrong offset!");
static_assert(offsetof(BPI_HUD_C_End_Match, Losing_Team) == 0x000004, "Member 'BPI_HUD_C_End_Match::Losing_Team' has a wrong offset!");
static_assert(offsetof(BPI_HUD_C_End_Match, Winning_Tickets) == 0x000008, "Member 'BPI_HUD_C_End_Match::Winning_Tickets' has a wrong offset!");
static_assert(offsetof(BPI_HUD_C_End_Match, Loser_Tickets) == 0x00000C, "Member 'BPI_HUD_C_End_Match::Loser_Tickets' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Show Leaderboard
// 0x0001 (0x0001 - 0x0000)
struct BPI_HUD_C_Show_Leaderboard final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HUD_C_Show_Leaderboard) == 0x000001, "Wrong alignment on BPI_HUD_C_Show_Leaderboard");
static_assert(sizeof(BPI_HUD_C_Show_Leaderboard) == 0x000001, "Wrong size on BPI_HUD_C_Show_Leaderboard");
static_assert(offsetof(BPI_HUD_C_Show_Leaderboard, Show) == 0x000000, "Member 'BPI_HUD_C_Show_Leaderboard::Show' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Get Scoreboard
// 0x0008 (0x0008 - 0x0000)
struct BPI_HUD_C_Get_Scoreboard final
{
public:
	class USQScoreboard*                          ScoreBoard;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_Get_Scoreboard) == 0x000008, "Wrong alignment on BPI_HUD_C_Get_Scoreboard");
static_assert(sizeof(BPI_HUD_C_Get_Scoreboard) == 0x000008, "Wrong size on BPI_HUD_C_Get_Scoreboard");
static_assert(offsetof(BPI_HUD_C_Get_Scoreboard, ScoreBoard) == 0x000000, "Member 'BPI_HUD_C_Get_Scoreboard::ScoreBoard' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Get UI Input Stacks
// 0x0010 (0x0010 - 0x0000)
struct BPI_HUD_C_Get_UI_Input_Stacks final
{
public:
	TArray<struct FSQInputState>                  Input_Stacks;                                      // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BPI_HUD_C_Get_UI_Input_Stacks) == 0x000008, "Wrong alignment on BPI_HUD_C_Get_UI_Input_Stacks");
static_assert(sizeof(BPI_HUD_C_Get_UI_Input_Stacks) == 0x000010, "Wrong size on BPI_HUD_C_Get_UI_Input_Stacks");
static_assert(offsetof(BPI_HUD_C_Get_UI_Input_Stacks, Input_Stacks) == 0x000000, "Member 'BPI_HUD_C_Get_UI_Input_Stacks::Input_Stacks' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Get Interactable Widget
// 0x0008 (0x0008 - 0x0000)
struct BPI_HUD_C_Get_Interactable_Widget final
{
public:
	class USQInteractableWidgetList*              Interact_Widget;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_Get_Interactable_Widget) == 0x000008, "Wrong alignment on BPI_HUD_C_Get_Interactable_Widget");
static_assert(sizeof(BPI_HUD_C_Get_Interactable_Widget) == 0x000008, "Wrong size on BPI_HUD_C_Get_Interactable_Widget");
static_assert(offsetof(BPI_HUD_C_Get_Interactable_Widget, Interact_Widget) == 0x000000, "Member 'BPI_HUD_C_Get_Interactable_Widget::Interact_Widget' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Get Showing Main Menu
// 0x0001 (0x0001 - 0x0000)
struct BPI_HUD_C_Get_Showing_Main_Menu final
{
public:
	bool                                          Showing;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HUD_C_Get_Showing_Main_Menu) == 0x000001, "Wrong alignment on BPI_HUD_C_Get_Showing_Main_Menu");
static_assert(sizeof(BPI_HUD_C_Get_Showing_Main_Menu) == 0x000001, "Wrong size on BPI_HUD_C_Get_Showing_Main_Menu");
static_assert(offsetof(BPI_HUD_C_Get_Showing_Main_Menu, Showing) == 0x000000, "Member 'BPI_HUD_C_Get_Showing_Main_Menu::Showing' has a wrong offset!");

// Function BPI_HUD.BPI_HUD_C.Zoom In Map Wheel
// 0x0004 (0x0004 - 0x0000)
struct BPI_HUD_C_Zoom_In_Map_Wheel final
{
public:
	float                                         Axis;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HUD_C_Zoom_In_Map_Wheel) == 0x000004, "Wrong alignment on BPI_HUD_C_Zoom_In_Map_Wheel");
static_assert(sizeof(BPI_HUD_C_Zoom_In_Map_Wheel) == 0x000004, "Wrong size on BPI_HUD_C_Zoom_In_Map_Wheel");
static_assert(offsetof(BPI_HUD_C_Zoom_In_Map_Wheel, Axis) == 0x000000, "Member 'BPI_HUD_C_Zoom_In_Map_Wheel::Axis' has a wrong offset!");

}

