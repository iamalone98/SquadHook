#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Squad

#include "Basic.hpp"

#include "AnimGraphRuntime_structs.hpp"
#include "SquadVoice_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "EngineSettings_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"


namespace SDK
{

// Enum Squad.ESQBuildState
// NumValues: 0x0004
enum class ESQBuildState : uint8
{
	Completed                                = 0,
	HalfBuilt                                = 1,
	Unbuilt                                  = 2,
	ESQBuildState_MAX                        = 3,
};

// Enum Squad.ESQSoldierSeatState
// NumValues: 0x0005
enum class ESQSoldierSeatState : uint8
{
	Locked                                   = 0,
	LockedWithWeapon                         = 1,
	Hidden                                   = 2,
	None                                     = 3,
	ESQSoldierSeatState_MAX                  = 4,
};

// Enum Squad.ESQEmotes
// NumValues: 0x000D
enum class ESQEmotes : uint8
{
	None                                     = 0,
	HandSignalAttack                         = 1,
	HandSignalBuild                          = 2,
	HandSignalDefend                         = 3,
	HandSignalMove                           = 4,
	HandSignalRally                          = 5,
	HandSignalObserve                        = 6,
	HandActionRearm                          = 7,
	HandActionLoadup                         = 8,
	HandActionUnload                         = 9,
	MAX_Visible                              = 10,
	Custom                                   = 11,
	MAX                                      = 12,
};

// Enum Squad.EClimbState
// NumValues: 0x0006
enum class EClimbState : uint8
{
	Interpolating                            = 0,
	RequiredOutro                            = 1,
	Outro                                    = 2,
	End                                      = 3,
	None                                     = 4,
	EClimbState_MAX                          = 5,
};

// Enum Squad.EClimbType
// NumValues: 0x0007
enum class EClimbType : uint8
{
	None                                     = 0,
	OverLow                                  = 1,
	OverMid                                  = 2,
	OntoLow                                  = 3,
	OntoMid                                  = 4,
	OntoHigh                                 = 5,
	MAX                                      = 6,
};

// Enum Squad.EThirdPersonCameraMode
// NumValues: 0x000A
enum class EThirdPersonCameraMode : uint8
{
	None                                     = 0,
	EmoteCameraLocked                        = 1,
	EmoteCameraFree                          = 2,
	CameraBone                               = 3,
	DebugCameraFollowCharacter               = 4,
	DebugCameraFollowCharacterLocked         = 5,
	DebugCameraStationaryPan                 = 6,
	DebugCameraStationary                    = 7,
	ENUM_MAX                                 = 8,
	EThirdPersonCameraMode_MAX               = 9,
};

// Enum Squad.ESQDraggingStatus
// NumValues: 0x0004
enum class ESQDraggingStatus : uint8
{
	None                                     = 0,
	Dragging                                 = 1,
	BeingDragged                             = 2,
	ESQDraggingStatus_MAX                    = 3,
};

// Enum Squad.ESQListenerType
// NumValues: 0x000B
enum class ESQListenerType : uint8
{
	Default                                  = 0,
	Soldier                                  = 1,
	TurretOpenAir                            = 2,
	TurretLight                              = 3,
	TurretHeavy                              = 4,
	TurretArmored                            = 5,
	VehicleOpenAir                           = 6,
	VehicleLight                             = 7,
	VehicleHeavy                             = 8,
	VehicleArmored                           = 9,
	ESQListenerType_MAX                      = 10,
};

// Enum Squad.ESQStance
// NumValues: 0x0005
enum class ESQStance : uint8
{
	Prone                                    = 0,
	Crouched                                 = 1,
	Standing                                 = 2,
	Jumping                                  = 3,
	ESQStance_MAX                            = 4,
};

// Enum Squad.ESQInteractVisibility
// NumValues: 0x0004
enum class ESQInteractVisibility : uint8
{
	Invisible                                = 0,
	Team                                     = 1,
	AlwaysVisible                            = 2,
	ESQInteractVisibility_MAX                = 3,
};

// Enum Squad.ESQTextVerticalAlignment
// NumValues: 0x0004
enum class ESQTextVerticalAlignment : uint8
{
	Top                                      = 0,
	Center                                   = 1,
	Bottom                                   = 2,
	ESQTextVerticalAlignment_MAX             = 3,
};

// Enum Squad.ESQTextHorizontalAlignment
// NumValues: 0x0004
enum class ESQTextHorizontalAlignment : uint8
{
	Left                                     = 0,
	Center                                   = 1,
	Right                                    = 2,
	ESQTextHorizontalAlignment_MAX           = 3,
};

// Enum Squad.ESQByteUnit
// NumValues: 0x000A
enum class ESQByteUnit : uint8
{
	BYTE                                     = 0,
	KILOBYTE                                 = 1,
	MEGABYTE                                 = 2,
	GIGABYTE                                 = 3,
	TERABYTE                                 = 4,
	PETABYTE                                 = 5,
	EXABYTE                                  = 6,
	ZETTABYTE                                = 7,
	YOTTABYTE                                = 8,
	ESQByteUnit_MAX                          = 9,
};

// Enum Squad.ESQReturnBool
// NumValues: 0x0003
enum class ESQReturnBool : uint8
{
	IsTrue                                   = 0,
	IsFalse                                  = 1,
	ESQReturnBool_MAX                        = 2,
};

// Enum Squad.ESQCreditsLineType
// NumValues: 0x0005
enum class ESQCreditsLineType : uint8
{
	None                                     = 0,
	Header                                   = 1,
	LineBreak                                = 2,
	Names                                    = 3,
	ESQCreditsLineType_MAX                   = 4,
};

// Enum Squad.EBPLogSeverity
// NumValues: 0x0006
enum class EBPLogSeverity : uint8
{
	CriticalError                            = 0,
	Error                                    = 1,
	PerformanceWarning                       = 2,
	Warning                                  = 3,
	Info                                     = 4,
	EBPLogSeverity_MAX                       = 5,
};

// Enum Squad.ESQTeam
// NumValues: 0x0004
enum class ESQTeam : uint8
{
	Team_Neutral                             = 0,
	Team_One                                 = 1,
	Team_Two                                 = 2,
	Team_Max                                 = 3,
};

// Enum Squad.ESQBuffTypes
// NumValues: 0x0006
enum class ESQBuffTypes : uint8
{
	ProtectionZone                           = 0,
	OnlyUnderwaterDamage                     = 1,
	PendingDeath                             = 2,
	NoFallDamage                             = 3,
	StagingPhase                             = 4,
	Max                                      = 5,
};

// Enum Squad.ESQCommandOptionState
// NumValues: 0x0006
enum class ESQCommandOptionState : uint8
{
	Ready                                    = 0,
	Enroute                                  = 1,
	Active                                   = 2,
	Cooldown                                 = 3,
	None                                     = 4,
	ESQCommandOptionState_MAX                = 5,
};

// Enum Squad.ESQNotificationTypes
// NumValues: 0x000C
enum class ESQNotificationTypes : uint8
{
	None                                     = 0,
	Error                                    = 1,
	Warning                                  = 2,
	Message                                  = 3,
	Negative                                 = 4,
	Positive                                 = 5,
	Commander                                = 6,
	Team                                     = 7,
	Squad                                    = 8,
	Fireteam                                 = 9,
	GameMode                                 = 10,
	MAX                                      = 11,
};

// Enum Squad.ESQChat
// NumValues: 0x000E
enum class ESQChat : uint8
{
	Unknown                                  = 0,
	All                                      = 1,
	Team                                     = 2,
	Squad                                    = 3,
	GameNotification                         = 4,
	GameNotificationTeam                     = 5,
	GameChat                                 = 6,
	AdminBroadcast                           = 7,
	AdminChat                                = 8,
	AdminNotification                        = 9,
	PlayerNotification                       = 10,
	ServerMessage                            = 11,
	System                                   = 12,
	ESQChat_MAX                              = 13,
};

// Enum Squad.ESQMapItemDrawMode
// NumValues: 0x0005
enum class ESQMapItemDrawMode : uint8
{
	ZoomedOut                                = 0,
	ZoomedIn                                 = 1,
	Absolute                                 = 2,
	Meters                                   = 3,
	ESQMapItemDrawMode_MAX                   = 4,
};

// Enum Squad.ESQMapItemType
// NumValues: 0x0007
enum class ESQMapItemType : uint8
{
	Map                                      = 0,
	Default                                  = 1,
	Player                                   = 2,
	Spawn                                    = 3,
	LocalPlayer                              = 4,
	Gameplay                                 = 5,
	ESQMapItemType_MAX                       = 6,
};

// Enum Squad.ESQMapMarkerVisibleTo
// NumValues: 0x000C
enum class ESQMapMarkerVisibleTo : uint8
{
	None                                     = 0,
	All                                      = 1,
	Team                                     = 2,
	Squad                                    = 3,
	FireTeam                                 = 4,
	Self                                     = 5,
	FireTeamLeader                           = 6,
	SquadLeader                              = 7,
	SquadAndSLs                              = 8,
	Commander                                = 9,
	Admin                                    = 10,
	ESQMapMarkerVisibleTo_MAX                = 11,
};

// Enum Squad.ESQMapWidgetTint
// NumValues: 0x0009
enum class ESQMapWidgetTint : uint8
{
	Neutral                                  = 0,
	Self                                     = 1,
	Squad                                    = 2,
	Team                                     = 3,
	SquadLeader                              = 4,
	AllCommand                               = 5,
	Enemy                                    = 6,
	FireTeam                                 = 7,
	MAX                                      = 8,
};

// Enum Squad.ESQMapMarkerType
// NumValues: 0x0009
enum class ESQMapMarkerType : uint8
{
	Action                                   = 0,
	Spot                                     = 1,
	POI                                      = 2,
	Fireteam                                 = 3,
	Request                                  = 4,
	Arrow                                    = 5,
	Frontline                                = 6,
	CommanderOrder                           = 7,
	MAX                                      = 8,
};

// Enum Squad.ESQMapIconSelectionGroup
// NumValues: 0x0004
enum class ESQMapIconSelectionGroup : uint8
{
	None                                     = 0,
	Spawns                                   = 1,
	Players                                  = 2,
	ESQMapIconSelectionGroup_MAX             = 3,
};

// Enum Squad.ESQJumpState
// NumValues: 0x0005
enum class ESQJumpState : uint8
{
	Jumping                                  = 0,
	Falling                                  = 1,
	Landing                                  = 2,
	None                                     = 3,
	ESQJumpState_MAX                         = 4,
};

// Enum Squad.ESQSoldierLeanDirection
// NumValues: 0x0004
enum class ESQSoldierLeanDirection : uint8
{
	LeftLean                                 = 0,
	NoLean                                   = 1,
	RightLean                                = 2,
	ESQSoldierLeanDirection_MAX              = 3,
};

// Enum Squad.EMouseMode
// NumValues: 0x0003
enum class EMouseMode : uint8
{
	Select                                   = 0,
	Placement                                = 1,
	EMouseMode_MAX                           = 2,
};

// Enum Squad.EGuidanceLossReason
// NumValues: 0x000B
enum class EGuidanceLossReason : uint8
{
	LineOfSightBlocked                       = 0,
	WireSnagged                              = 1,
	OutOfRange                               = 2,
	OutOfFov                                 = 3,
	TriedToGuideTooMany                      = 4,
	MovedAwayFromFireLocation                = 5,
	GuidanceDestroyed                        = 6,
	GuidanceControllerDestroyed              = 7,
	GuidanceDelayInProgress                  = 8,
	Invalid                                  = 9,
	EGuidanceLossReason_MAX                  = 10,
};

// Enum Squad.ESQAnimState
// NumValues: 0x0005
enum class ESQAnimState : uint8
{
	Out                                      = 0,
	Entered                                  = 1,
	FullWeight                               = 2,
	Left                                     = 3,
	ESQAnimState_MAX                         = 4,
};

// Enum Squad.ESQDrivenDestinationMode
// NumValues: 0x0004
enum class ESQDrivenDestinationMode : uint8
{
	Bone                                     = 0,
	MorphTarget                              = 1,
	MaterialParameter                        = 2,
	ESQDrivenDestinationMode_MAX             = 3,
};

// Enum Squad.ESQDrivenBoneModificationMode
// NumValues: 0x0004
enum class ESQDrivenBoneModificationMode : uint8
{
	AddToInput                               = 0,
	ReplaceComponent                         = 1,
	AddToRefPose                             = 2,
	ESQDrivenBoneModificationMode_MAX        = 3,
};

// Enum Squad.ESQComponentType
// NumValues: 0x000C
enum class ESQComponentType : uint8
{
	None                                     = 0,
	TranslationX                             = 1,
	TranslationY                             = 2,
	TranslationZ                             = 3,
	RotationX                                = 4,
	RotationY                                = 5,
	RotationZ                                = 6,
	Scale                                    = 7,
	ScaleX                                   = 8,
	ScaleY                                   = 9,
	ScaleZ                                   = 10,
	ESQComponentType_MAX                     = 11,
};

// Enum Squad.EApprovalRequestChannels
// NumValues: 0x0004
enum class EApprovalRequestChannels : uint8
{
	Undefined                                = 0,
	SquadLeader                              = 1,
	SinglePlayer                             = 2,
	EApprovalRequestChannels_MAX             = 3,
};

// Enum Squad.EApprovalRequestTypes
// NumValues: 0x0004
enum class EApprovalRequestTypes : uint8
{
	Undefined                                = 0,
	VehicleClaim                             = 1,
	RequestToJoinSquad                       = 2,
	EApprovalRequestTypes_MAX                = 3,
};

// Enum Squad.ESQChunkBehavior
// NumValues: 0x0004
enum class ESQChunkBehavior : uint8
{
	RemoveParent                             = 0,
	RemoveChild                              = 1,
	KeepBoth                                 = 2,
	ESQChunkBehavior_MAX                     = 3,
};

// Enum Squad.ECloudProvider
// NumValues: 0x0003
enum class ECloudProvider : uint8
{
	ProviderPlayFab                          = 0,
	ProviderAws                              = 1,
	ECloudProvider_MAX                       = 2,
};

// Enum Squad.ESQConsoleMessageType
// NumValues: 0x0004
enum class ESQConsoleMessageType : uint8
{
	Normal                                   = 0,
	Warning                                  = 1,
	Error                                    = 2,
	ESQConsoleMessageType_MAX                = 3,
};

// Enum Squad.ESQConsoleVariableViewerState
// NumValues: 0x0006
enum class ESQConsoleVariableViewerState : uint8
{
	None                                     = 0,
	Soldier                                  = 1,
	Driver                                   = 2,
	Passenger                                = 3,
	Spectator                                = 4,
	MAX                                      = 5,
};

// Enum Squad.ESQConsoleVariableRange
// NumValues: 0x000F
enum class ESQConsoleVariableRange : uint8
{
	Self                                     = 0,
	Meters_0                                 = 1,
	Meters_25                                = 2,
	Meters_50                                = 3,
	Meters_100                               = 4,
	Meters_250                               = 5,
	Meters_500                               = 6,
	Meters_1000                              = 7,
	Meters_1500                              = 8,
	Meters_2000                              = 9,
	Meters_2500                              = 10,
	Meters_3000                              = 11,
	Meters_4000                              = 12,
	Meters_5000                              = 13,
	MAX                                      = 14,
};

// Enum Squad.EListLayout
// NumValues: 0x0004
enum class EListLayout : uint8
{
	SquadList                                = 0,
	RoleList                                 = 1,
	InviteList                               = 2,
	EListLayout_MAX                          = 3,
};

// Enum Squad.ESQSelectionState
// NumValues: 0x0004
enum class ESQSelectionState : uint8
{
	None                                     = 0,
	Highlighted                              = 1,
	Selected                                 = 2,
	ESQSelectionState_MAX                    = 3,
};

// Enum Squad.EJoinButtonState
// NumValues: 0x0005
enum class EJoinButtonState : uint8
{
	None                                     = 0,
	Join                                     = 1,
	Full                                     = 2,
	Locked                                   = 3,
	EJoinButtonState_MAX                     = 4,
};

// Enum Squad.ESQAuthorityTypes
// NumValues: 0x0005
enum class ESQAuthorityTypes : uint8
{
	None                                     = 0,
	FireteamLeader                           = 1,
	SquadLeader                              = 2,
	Commander                                = 3,
	ESQAuthorityTypes_MAX                    = 4,
};

// Enum Squad.ESQScalingCountingMode
// NumValues: 0x0003
enum class ESQScalingCountingMode : uint8
{
	Available                                = 0,
	MaxAvailable                             = 1,
	ESQScalingCountingMode_MAX               = 2,
};

// Enum Squad.EToolMode
// NumValues: 0x0005
enum class EToolMode : uint8
{
	AdminManagement                          = 0,
	Vehicles                                 = 1,
	Deployable                               = 2,
	Role                                     = 3,
	EToolMode_MAX                            = 4,
};

// Enum Squad.ESQEmotesCamera
// NumValues: 0x0003
enum class ESQEmotesCamera : uint8
{
	FirstPerson                              = 0,
	ThirdPerson                              = 1,
	ESQEmotesCamera_MAX                      = 2,
};

// Enum Squad.ESQEmotePropMode
// NumValues: 0x0004
enum class ESQEmotePropMode : uint8
{
	SkeletalMesh                             = 0,
	StaticMesh                               = 1,
	CustomActor                              = 2,
	ESQEmotePropMode_MAX                     = 3,
};

// Enum Squad.ESQPropNotifyAction
// NumValues: 0x0004
enum class ESQPropNotifyAction : uint8
{
	Detach                                   = 0,
	DetachWithPhysics                        = 1,
	Attach                                   = 2,
	ESQPropNotifyAction_MAX                  = 3,
};

// Enum Squad.ESQDLCEmotes
// NumValues: 0x0008
enum class ESQDLCEmotes : uint8
{
	None                                     = 0,
	Gesture                                  = 1,
	FullBody                                 = 2,
	Shared                                   = 3,
	PartnerActivated                         = 4,
	MAX_Visible                              = 5,
	Custom                                   = 6,
	MAX                                      = 7,
};

// Enum Squad.EExclusionMode
// NumValues: 0x0003
enum class EExclusionMode : uint8
{
	Deny_List                                = 0,
	Allow_List                               = 1,
	EExclusionMode_MAX                       = 2,
};

// Enum Squad.ESQItemLowerReason
// NumValues: 0x0004
enum class ESQItemLowerReason : uint8
{
	None                                     = 0,
	Collision                                = 1,
	Water                                    = 2,
	ESQItemLowerReason_MAX                   = 3,
};

// Enum Squad.ESQAxis
// NumValues: 0x0005
enum class ESQAxis : uint8
{
	None                                     = 0,
	X                                        = 1,
	Y                                        = 2,
	Z                                        = 3,
	ESQAxis_MAX                              = 4,
};

// Enum Squad.EFreeLookMode
// NumValues: 0x0004
enum class EFreeLookMode : uint8
{
	NeverFreeLook                            = 0,
	ToggleFreeLook                           = 1,
	AlwaysFreeLook                           = 2,
	EFreeLookMode_MAX                        = 3,
};

// Enum Squad.ESQLoadingRequirement
// NumValues: 0x0008
enum class ESQLoadingRequirement : uint8
{
	PCValid                                  = 0,
	PSValid                                  = 1,
	TSValid                                  = 2,
	TSConfigured                             = 3,
	DeploymentMenuReady                      = 4,
	TutorialReady                            = 5,
	Count                                    = 6,
	ESQLoadingRequirement_MAX                = 7,
};

// Enum Squad.ESQSpawnPointType
// NumValues: 0x0006
enum class ESQSpawnPointType : uint8
{
	None                                     = 0,
	BaseSpawn                                = 1,
	HABSpawn                                 = 2,
	RallySpawn                               = 3,
	CacheSpawn                               = 4,
	ESQSpawnPointType_MAX                    = 5,
};

// Enum Squad.ESQJoyStickControls
// NumValues: 0x0005
enum class ESQJoyStickControls : uint8
{
	Pitch                                    = 0,
	Yaw                                      = 1,
	Roll                                     = 2,
	Collective                               = 3,
	ESQJoyStickControls_MAX                  = 4,
};

// Enum Squad.ESQJoystickCurveTypes
// NumValues: 0x0003
enum class ESQJoystickCurveTypes : uint8
{
	Exponential                              = 0,
	Smooth                                   = 1,
	ESQJoystickCurveTypes_MAX                = 2,
};

// Enum Squad.ESQStreamerModeLevel
// NumValues: 0x0008
enum class ESQStreamerModeLevel : uint8
{
	None                                     = 0,
	HideServer                               = 1,
	HideSquadNames                           = 2,
	HideOurName                              = 4,
	HideAllNames                             = 8,
	HideChat                                 = 16,
	HideMiscData                             = 32,
	ESQStreamerModeLevel_MAX                 = 33,
};

// Enum Squad.EUpscaleMode
// NumValues: 0x0005
enum class EUpscaleMode : uint8
{
	NONE                                     = 0,
	NVIDIADLSS                               = 1,
	AMDFSR                                   = 2,
	INTELXESS                                = 3,
	MAX                                      = 4,
};

// Enum Squad.EGuidanceLossBehaviour
// NumValues: 0x0006
enum class EGuidanceLossBehaviour : uint8
{
	Nothing                                  = 0,
	ChangeMovementMode                       = 1,
	ContinueLastKnownTarget                  = 2,
	TurnOffEngine                            = 3,
	SelfDestruct                             = 4,
	EGuidanceLossBehaviour_MAX               = 5,
};

// Enum Squad.ESQToggleType
// NumValues: 0x0006
enum class ESQToggleType : uint8
{
	Toggle                                   = 0,
	Hold                                     = 1,
	HoldAndDoubleTap                         = 2,
	HoldAndDoubleTap_EasyUnlock              = 3,
	INVALID                                  = 255,
	ESQToggleType_MAX                        = 256,
};

// Enum Squad.EWeaponSpringOverrideFlags
// NumValues: 0x0006
enum class EWeaponSpringOverrideFlags : uint8
{
	WeaponsSpringMultiplierTranslation       = 0,
	WeaponSpringMultiplierRotation           = 1,
	WeaponSpringSide                         = 2,
	WeaponSpringFactor                       = 3,
	WeaponSpringClamp                        = 4,
	EWeaponSpringOverrideFlags_MAX           = 5,
};

// Enum Squad.ESQContestingState
// NumValues: 0x0004
enum class ESQContestingState : uint8
{
	None                                     = 0,
	Attackable                               = 1,
	Defendable                               = 2,
	ESQContestingState_MAX                   = 3,
};

// Enum Squad.ESQMoveSerializationMode
// NumValues: 0x0005
enum class ESQMoveSerializationMode : uint8
{
	OldMove                                  = 0,
	DualFirstMove                            = 1,
	DualSecondMove                           = 2,
	SingleMove                               = 3,
	ESQMoveSerializationMode_MAX             = 4,
};

// Enum Squad.ESQRenameReplayResponse
// NumValues: 0x0005
enum class ESQRenameReplayResponse : uint8
{
	Success                                  = 0,
	UnspecifiedFailure                       = 1,
	TryingToOverwrite                        = 2,
	FileDoesNotExist                         = 3,
	ESQRenameReplayResponse_MAX              = 4,
};

// Enum Squad.ESQReplaySubsystemState
// NumValues: 0x0005
enum class ESQReplaySubsystemState : uint8
{
	NotRecording                             = 0,
	RecordingNamed                           = 1,
	RecordingDated                           = 2,
	Replaying                                = 3,
	ESQReplaySubsystemState_MAX              = 4,
};

// Enum Squad.EClassRepNodeMapping
// NumValues: 0x0007
enum class EClassRepNodeMapping : uint8
{
	NotRouted                                = 0,
	RelevantAllConnections                   = 1,
	AllwaysRelevantTeamOnly                  = 2,
	Spatialize_Static                        = 3,
	Spatialize_Dynamic                       = 4,
	Spatialize_Dormancy                      = 5,
	EClassRepNodeMapping_MAX                 = 6,
};

// Enum Squad.ESQPlayerStatus
// NumValues: 0x0008
enum class ESQPlayerStatus : uint8
{
	NotLeader                                = 0,
	SquadLeader                              = 1,
	FireTeamLeader                           = 2,
	Commander                                = 3,
	Admin                                    = 4,
	QA                                       = 5,
	Dev                                      = 6,
	ESQPlayerStatus_MAX                      = 7,
};

// Enum Squad.ESQRotationMovementState
// NumValues: 0x0005
enum class ESQRotationMovementState : uint8
{
	Idle                                     = 0,
	Starting                                 = 1,
	Moving                                   = 2,
	Stopping                                 = 3,
	ESQRotationMovementState_MAX             = 4,
};

// Enum Squad.ESQRotorRunningState
// NumValues: 0x0004
enum class ESQRotorRunningState : uint8
{
	Accelerating                             = 1,
	Idling                                   = 2,
	Locked                                   = 3,
	ESQRotorRunningState_MAX                 = 4,
};

// Enum Squad.ESQRotorState
// NumValues: 0x0006
enum class ESQRotorState : uint8
{
	None                                     = 0,
	Starting                                 = 1,
	Running                                  = 2,
	Stopping                                 = 3,
	Stopped                                  = 4,
	ESQRotorState_MAX                        = 5,
};

// Enum Squad.ESQRotorType
// NumValues: 0x0003
enum class ESQRotorType : uint8
{
	Main                                     = 0,
	Lateral                                  = 1,
	ESQRotorType_MAX                         = 2,
};

// Enum Squad.ESQTagType
// NumValues: 0x0009
enum class ESQTagType : uint8
{
	None                                     = 0,
	Language                                 = 1,
	GameMode                                 = 2,
	Playstyle                                = 3,
	Region                                   = 4,
	Experience                               = 5,
	MapRotation                              = 6,
	Rule                                     = 7,
	ESQTagType_MAX                           = 8,
};

// Enum Squad.ESQShockwaveEffectType
// NumValues: 0x0003
enum class ESQShockwaveEffectType : uint8
{
	Explosion                                = 0,
	Blast                                    = 1,
	ESQShockwaveEffectType_MAX               = 2,
};

// Enum Squad.ECustomMovementMode
// NumValues: 0x0003
enum class ECustomMovementMode : uint8
{
	MOVE_Bipod                               = 0,
	MOVE_Climbing                            = 1,
	MOVE_MAX                                 = 2,
};

// Enum Squad.ESQUnderwaterBone
// NumValues: 0x0006
enum class ESQUnderwaterBone : uint8
{
	Head                                     = 0,
	Chest                                    = 1,
	Hip                                      = 2,
	Foot                                     = 3,
	Knee                                     = 4,
	ESQUnderwaterBone_MAX                    = 5,
};

// Enum Squad.ESQSoundNodeFlyByState
// NumValues: 0x0005
enum class ESQSoundNodeFlyByState : uint8
{
	Idle                                     = 0,
	ComingTowardsNotPlaying                  = 1,
	Playing                                  = 2,
	MovingAwayNotPlaying                     = 3,
	ESQSoundNodeFlyByState_MAX               = 4,
};

// Enum Squad.EVehicleClaimCheckResults
// NumValues: 0x0004
enum class EVehicleClaimCheckResults : uint8
{
	OK                                       = 0,
	NullPtr                                  = 1,
	EmptyRole                                = 2,
	EVehicleClaimCheckResults_MAX            = 3,
};

// Enum Squad.ESquadMemberUIAction
// NumValues: 0x0005
enum class ESquadMemberUIAction : uint8
{
	MenuOpen                                 = 0,
	PromoteToSL                              = 1,
	Kick                                     = 2,
	SLInvite                                 = 3,
	ESquadMemberUIAction_MAX                 = 4,
};

// Enum Squad.ESquadMemberUIViewMode
// NumValues: 0x0003
enum class ESquadMemberUIViewMode : uint8
{
	SquadMembers                             = 0,
	UnassignedMembers                        = 1,
	ESquadMemberUIViewMode_MAX               = 2,
};

// Enum Squad.ESeatProgressMenuMode
// NumValues: 0x0005
enum class ESeatProgressMenuMode : uint8
{
	InventoryOnly                            = 0,
	Entering                                 = 1,
	Switching                                = 2,
	Exiting                                  = 3,
	ESeatProgressMenuMode_MAX                = 4,
};

// Enum Squad.ESQVehicleClaimStatus
// NumValues: 0x0005
enum class ESQVehicleClaimStatus : uint8
{
	Active                                   = 0,
	DroppedOff                               = 1,
	Abandoned                                = 2,
	Destroyed                                = 3,
	ESQVehicleClaimStatus_MAX                = 4,
};

// Enum Squad.ESQInventoryModificationType
// NumValues: 0x0004
enum class ESQInventoryModificationType : uint8
{
	AddToInventory                           = 0,
	RemoveFromInventory                      = 1,
	UpdateInventory                          = 2,
	ESQInventoryModificationType_MAX         = 3,
};

// Enum Squad.EWeaponType
// NumValues: 0x0005
enum class EWeaponType : uint8
{
	Backpack                                 = 0,
	Primary                                  = 1,
	Secondary                                = 2,
	Special                                  = 3,
	EWeaponType_MAX                          = 4,
};

// Enum Squad.ESQKillReportChannel
// NumValues: 0x0006
enum class ESQKillReportChannel : uint8
{
	None                                     = 0,
	Admin                                    = 1,
	Team                                     = 2,
	TeamAndAdmin                             = 3,
	Public                                   = 4,
	ESQKillReportChannel_MAX                 = 5,
};

// Enum Squad.ESQRepairSource
// NumValues: 0x0003
enum class ESQRepairSource : uint8
{
	REPAIR_STATION                           = 0,
	REPAIR_TOOL                              = 1,
	REPAIR_MAX                               = 2,
};

// Enum Squad.ESQSpawnInventoryReason
// NumValues: 0x0004
enum class ESQSpawnInventoryReason : uint8
{
	SpawningIn                               = 0,
	SwappingRoles                            = 1,
	SwappingRolesPartialAmmo                 = 2,
	ESQSpawnInventoryReason_MAX              = 3,
};

// Enum Squad.ESQSoldierRagdollReason
// NumValues: 0x0005
enum class ESQSoldierRagdollReason : uint8
{
	NotInRagdoll                             = 0,
	NotReplicated                            = 1,
	Replicated                               = 2,
	ReplicatedAutoGetUp                      = 3,
	ESQSoldierRagdollReason_MAX              = 4,
};

// Enum Squad.ESQVehicleRoleAbility
// NumValues: 0x0004
enum class ESQVehicleRoleAbility : uint8
{
	LightVehicle                             = 0,
	HeavyVehicle                             = 1,
	FlyingVehicle                            = 2,
	ESQVehicleRoleAbility_MAX                = 3,
};

// Enum Squad.ESQRearmType
// NumValues: 0x0005
enum class ESQRearmType : uint8
{
	MainOrEnvironment                        = 0,
	ForwardBase                              = 1,
	Vehicle                                  = 2,
	AmmoBag                                  = 3,
	ESQRearmType_MAX                         = 4,
};

// Enum Squad.ESQGrenadeState
// NumValues: 0x0007
enum class ESQGrenadeState : uint8
{
	Idle                                     = 0,
	PreparingOverhandThrow                   = 1,
	PreparingUnderhandThrow                  = 2,
	ThrowingOverhand                         = 3,
	ThrowingUnderhand                        = 4,
	Reloading                                = 5,
	ESQGrenadeState_MAX                      = 6,
};

// Enum Squad.ESQEquippableState
// NumValues: 0x0006
enum class ESQEquippableState : uint8
{
	None                                     = 0,
	Unequipped                               = 1,
	Equipping                                = 2,
	Equipped                                 = 3,
	Unequipping                              = 4,
	ESQEquippableState_MAX                   = 5,
};

// Enum Squad.ESQVehicleDifferential4W
// NumValues: 0x0007
enum class ESQVehicleDifferential4W : uint8
{
	LimitedSlip_4W                           = 0,
	LimitedSlip_FrontDrive                   = 1,
	LimitedSlip_RearDrive                    = 2,
	Open_4W                                  = 3,
	Open_FrontDrive                          = 4,
	Open_RearDrive                           = 5,
	ESQVehicleDifferential4W_MAX             = 6,
};

// Enum Squad.ESQDeadState
// NumValues: 0x0007
enum class ESQDeadState : uint8
{
	GameNotStarted                           = 0,
	SpawningIn                               = 1,
	SelectingSpawn                           = 2,
	SelectingRole                            = 3,
	WaitingToSpawn                           = 4,
	InCap                                    = 5,
	ESQDeadState_MAX                         = 6,
};

// Enum Squad.ESQTileCount
// NumValues: 0x0007
enum class ESQTileCount : uint8
{
	COUNT_1                                  = 0,
	COUNT_2                                  = 1,
	COUNT_4                                  = 2,
	COUNT_8                                  = 3,
	COUNT_16                                 = 4,
	COUNT_32                                 = 5,
	COUNT_MAX                                = 6,
};

// Enum Squad.ESQTileResolution
// NumValues: 0x0005
enum class ESQTileResolution : uint8
{
	SIZE_512                                 = 0,
	SIZE_1024                                = 1,
	SIZE_2048                                = 2,
	SIZE_4096                                = 3,
	SIZE_MAX_0                               = 4,
};

// Enum Squad.ESQFOBRallyPointDisplayMode
// NumValues: 0x0005
enum class ESQFOBRallyPointDisplayMode : uint8
{
	None                                     = 0,
	FOB                                      = 1,
	RallyPoint                               = 2,
	Both                                     = 3,
	ESQFOBRallyPointDisplayMode_MAX          = 4,
};

// Enum Squad.ESQHUDView
// NumValues: 0x0005
enum class ESQHUDView : uint8
{
	None                                     = 0,
	AllPawns                                 = 1,
	SameTeam                                 = 2,
	OnlyEnemy                                = 3,
	ESQHUDView_MAX                           = 4,
};

// Enum Squad.ESQCameraMode
// NumValues: 0x0004
enum class ESQCameraMode : uint8
{
	FlySpeed                                 = 0,
	Deceleration                             = 1,
	FOV                                      = 2,
	ESQCameraMode_MAX                        = 3,
};

// Enum Squad.ESQExplosiveType
// NumValues: 0x0004
enum class ESQExplosiveType : uint8
{
	None                                     = 0,
	RemoteExplosive                          = 1,
	Mine                                     = 2,
	ESQExplosiveType_MAX                     = 3,
};

// Enum Squad.ESQDeployableSize
// NumValues: 0x0006
enum class ESQDeployableSize : uint8
{
	Very_Small                               = 0,
	Small                                    = 1,
	Medium                                   = 2,
	Large                                    = 3,
	Very_Large                               = 4,
	ESQDeployableSize_MAX                    = 5,
};

// Enum Squad.ESQInvalidPlacementReason
// NumValues: 0x000B
enum class ESQInvalidPlacementReason : uint8
{
	NOREASONGIVEN                            = 0,
	VALID                                    = 1,
	BAD_GROUND                               = 2,
	UNDERWATER                               = 3,
	OVERLAP                                  = 4,
	NO_DEPLOY_ZONE                           = 5,
	EXCLUSION_ZONE                           = 6,
	OUT_OF_VISION                            = 7,
	OUT_OF_MAP_BOUNDS                        = 8,
	MAX_DEPLOY_OF_TYPE                       = 9,
	ESQInvalidPlacementReason_MAX            = 10,
};

// Enum Squad.ESQMapRotationMode
// NumValues: 0x0006
enum class ESQMapRotationMode : uint8
{
	LevelList                                = 0,
	LevelList_Randomized                     = 1,
	LayerList                                = 2,
	LayerList_Randomized                     = 3,
	LayerList_Vote                           = 4,
	ESQMapRotationMode_MAX                   = 5,
};

// Enum Squad.ESQWeaponAnimType
// NumValues: 0x0004
enum class ESQWeaponAnimType : uint8
{
	Rifle                                    = 0,
	Grenade                                  = 1,
	Equippable                               = 2,
	ESQWeaponAnimType_MAX                    = 3,
};

// Enum Squad.ESQEquippableActionState
// NumValues: 0x000B
enum class ESQEquippableActionState : uint8
{
	Idle                                     = 0,
	Use                                      = 1,
	AltUse                                   = 2,
	Custom1                                  = 3,
	Custom2                                  = 4,
	Custom3                                  = 5,
	PreUse                                   = 6,
	PostUse                                  = 7,
	PreAltUse                                = 8,
	PostAltUse                               = 9,
	ESQEquippableActionState_MAX             = 10,
};

// Enum Squad.ESQWeaponState
// NumValues: 0x0007
enum class ESQWeaponState : uint8
{
	Idle                                     = 0,
	Firing                                   = 1,
	Bolting                                  = 2,
	Reloading                                = 3,
	Melee                                    = 4,
	ProcessingAttachment                     = 5,
	ESQWeaponState_MAX                       = 6,
};

// Enum Squad.ESQHitDetectionFailReason
// NumValues: 0x000A
enum class ESQHitDetectionFailReason : uint8
{
	None                                     = 0,
	NoAmmo                                   = 1,
	NoOwner                                  = 2,
	NoShot                                   = 3,
	InvalidViewAngle                         = 4,
	Blocked                                  = 5,
	Reloading                                = 6,
	Sprinting                                = 7,
	UnableToFire                             = 8,
	ESQHitDetectionFailReason_MAX            = 9,
};

// Enum Squad.ESQReadyToEndMatch
// NumValues: 0x0004
enum class ESQReadyToEndMatch : uint8
{
	Unhandled                                = 0,
	ReadyToEndMatch                          = 1,
	DoNotEndMatch                            = 2,
	ESQReadyToEndMatch_MAX                   = 3,
};

// Enum Squad.ESQRoleTypeEnum
// NumValues: 0x0005
enum class ESQRoleTypeEnum : uint8
{
	RoleType_Standard                        = 0,
	RoleType_Specialist                      = 1,
	RoleType_Support                         = 2,
	RoleType_FireSupport                     = 3,
	RoleType_MAX                             = 4,
};

// Enum Squad.ESQTeamRelationShip
// NumValues: 0x0005
enum class ESQTeamRelationShip : uint8
{
	SameTeam                                 = 0,
	Friend                                   = 1,
	Neutral                                  = 2,
	Enemy                                    = 3,
	ESQTeamRelationShip_MAX                  = 4,
};

// Enum Squad.ESQDialogType
// NumValues: 0x0004
enum class ESQDialogType : uint8
{
	None                                     = 0,
	Generic                                  = 1,
	ControllerDisconnected                   = 2,
	ESQDialogType_MAX                        = 3,
};

// Enum Squad.ESQRadialWidgetSizeEnum
// NumValues: 0x0005
enum class ESQRadialWidgetSizeEnum : uint8
{
	None                                     = 0,
	Small                                    = 1,
	Medium                                   = 2,
	Large                                    = 3,
	ESQRadialWidgetSizeEnum_MAX              = 4,
};

// Enum Squad.ESQHudPosition
// NumValues: 0x0009
enum class ESQHudPosition : uint8
{
	Left                                     = 0,
	FrontLeft                                = 1,
	Front                                    = 2,
	FrontRight                               = 3,
	Right                                    = 4,
	BackRight                                = 5,
	Back                                     = 6,
	BackLeft                                 = 7,
	ESQHudPosition_MAX                       = 8,
};

// Enum Squad.ESQCrosshairDirection
// NumValues: 0x0006
enum class ESQCrosshairDirection : uint8
{
	Left                                     = 0,
	Right                                    = 1,
	Top                                      = 2,
	Bottom                                   = 3,
	Center                                   = 4,
	ESQCrosshairDirection_MAX                = 5,
};

// Enum Squad.ESQAudioVolumeType
// NumValues: 0x000F
enum class ESQAudioVolumeType : uint8
{
	Default                                  = 0,
	FieldOpen                                = 1,
	FieldClosed                              = 2,
	Valley                                   = 3,
	ForestLarge                              = 4,
	ForestSmall                              = 5,
	UrbanLarge                               = 6,
	UrbanSmall                               = 7,
	RoomLarge                                = 8,
	RoomMedium                               = 9,
	RoomSmall                                = 10,
	RoomHollowLarge                          = 11,
	RoomHollowMedium                         = 12,
	RoomHollowSmall                          = 13,
	ESQAudioVolumeType_MAX                   = 14,
};

// Enum Squad.ESQLeftSquadWeaponBehaviour
// NumValues: 0x0006
enum class ESQLeftSquadWeaponBehaviour : uint8
{
	DoNotKeep                                = 0,
	KeepWithMagsAndLoadedAmmo                = 1,
	KeepWithOnlyLoadedAmmo                   = 2,
	OverWriteMagsAndKeepLoadedAmmo           = 3,
	OverWriteWithOnlyLoadedAmmo              = 4,
	ESQLeftSquadWeaponBehaviour_MAX          = 5,
};

// Enum Squad.ESQAdminAccessLevels
// NumValues: 0x001B
enum class ESQAdminAccessLevels : uint8
{
	Level_Public                             = 0,
	Level_StartVote                          = 1,
	Level_ChangeMap                          = 2,
	Level_Pause                              = 3,
	Level_Cheat                              = 4,
	Level_Private                            = 5,
	Level_Balance                            = 6,
	Level_Chat                               = 7,
	Level_Mute                               = 8,
	Level_Kick                               = 9,
	Level_Ban                                = 10,
	Level_Config                             = 11,
	Level_Immune                             = 12,
	Level_Server                             = 13,
	Level_CameraMan                          = 14,
	Level_Add                                = 15,
	Level_FeatureTest                        = 16,
	Level_Debug                              = 17,
	Level_Demos                              = 18,
	Level_Reserve                            = 19,
	Level_TeamChange                         = 20,
	Level_Developer                          = 21,
	Level_ForceTeamChange                    = 22,
	Level_CanSeeAdminChat                    = 23,
	Level_QA                                 = 24,
	Level_ClientDemos                        = 25,
	Level_MAX                                = 26,
};

// Enum Squad.ESQSortStates
// NumValues: 0x0004
enum class ESQSortStates : uint8
{
	Unsorted                                 = 0,
	Ascending                                = 1,
	Descending                               = 2,
	ESQSortStates_MAX                        = 3,
};

// Enum Squad.ESQSortLevels
// NumValues: 0x0006
enum class ESQSortLevels : uint8
{
	ServerName                               = 0,
	MapName                                  = 1,
	GameMode                                 = 2,
	Ping                                     = 3,
	NumPlayers                               = 4,
	ESQSortLevels_MAX                        = 5,
};

// Enum Squad.ESQTrackDeployableResult
// NumValues: 0x0006
enum class ESQTrackDeployableResult : uint8
{
	Allow                                    = 0,
	AllowButRemoveAllOthers                  = 1,
	AllowButRemoveFirst                      = 2,
	AllowButRemoveLast                       = 3,
	DoNotAllow                               = 4,
	ESQTrackDeployableResult_MAX             = 5,
};

// Enum Squad.ESQSeatChangeState
// NumValues: 0x0004
enum class ESQSeatChangeState : uint8
{
	Entered                                  = 0,
	Left                                     = 1,
	SWITCH                                   = 2,
	ESQSeatChangeState_MAX                   = 3,
};

// Enum Squad.ESQVehicleType
// NumValues: 0x0014
enum class ESQVehicleType : uint8
{
	None                                     = 0,
	Motorcycle                               = 1,
	Jeep                                     = 2,
	JeepTransport                            = 3,
	JeepLogistics                            = 4,
	JeepAntiTank                             = 5,
	JeepArtillery                            = 6,
	TruckTransport                           = 7,
	TruckLogistics                           = 8,
	TruckAntiAir                             = 9,
	APC                                      = 10,
	APCTracked                               = 11,
	AntiAirTracked                           = 12,
	IFV                                      = 13,
	IFVTracked                               = 14,
	Tank                                     = 15,
	HelicopterTransport                      = 16,
	HelicopterAttack                         = 17,
	Boat                                     = 18,
	MAX                                      = 19,
};

// Enum Squad.ESQVehicleComponentStates
// NumValues: 0x0004
enum class ESQVehicleComponentStates : uint8
{
	FullyRepaired                            = 0,
	RepairedFromDestruction                  = 1,
	Destroyed                                = 2,
	ESQVehicleComponentStates_MAX            = 3,
};

// Enum Squad.ESQVehicleRecoveryMethod
// NumValues: 0x0005
enum class ESQVehicleRecoveryMethod : uint8
{
	Teleport                                 = 0,
	Push                                     = 1,
	TeleportAndPush                          = 2,
	CustomMethod                             = 3,
	ESQVehicleRecoveryMethod_MAX             = 4,
};

// Enum Squad.ESQSkinOwnershipType
// NumValues: 0x0004
enum class ESQSkinOwnershipType : uint8
{
	Bazaar                                   = 0,
	NonOwnable                               = 1,
	Developer                                = 2,
	ESQSkinOwnershipType_MAX                 = 3,
};

// Enum Squad.ESQSkinEnableResult
// NumValues: 0x0009
enum class ESQSkinEnableResult : uint8
{
	NullValue                                = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	NonOwnable                               = 4,
	Unowned                                  = 16,
	AlreadyEnabled                           = 32,
	AlreadyDisabled                          = 64,
	InvalidSkin                              = 128,
	ESQSkinEnableResult_MAX                  = 129,
};

// Enum Squad.ESQFiringStances
// NumValues: 0x0005
enum class ESQFiringStances : uint8
{
	Standing                                 = 0,
	Crouching                                = 1,
	Prone                                    = 2,
	Bipoded                                  = 3,
	ESQFiringStances_MAX                     = 4,
};

// ScriptStruct Squad.SQCachedTransitionData
// 0x0024 (0x0024 - 0x0000)
struct FSQCachedTransitionData final
{
public:
	class FName                                   StateMachineName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FromStateName;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ToStateName;                                       // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C32[0xC];                                      // 0x0018(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQCachedTransitionData) == 0x000004, "Wrong alignment on FSQCachedTransitionData");
static_assert(sizeof(FSQCachedTransitionData) == 0x000024, "Wrong size on FSQCachedTransitionData");
static_assert(offsetof(FSQCachedTransitionData, StateMachineName) == 0x000000, "Member 'FSQCachedTransitionData::StateMachineName' has a wrong offset!");
static_assert(offsetof(FSQCachedTransitionData, FromStateName) == 0x000008, "Member 'FSQCachedTransitionData::FromStateName' has a wrong offset!");
static_assert(offsetof(FSQCachedTransitionData, ToStateName) == 0x000010, "Member 'FSQCachedTransitionData::ToStateName' has a wrong offset!");

// ScriptStruct Squad.SQChoice
// 0x0018 (0x0018 - 0x0000)
struct FSQChoice final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    Data;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQChoice) == 0x000008, "Wrong alignment on FSQChoice");
static_assert(sizeof(FSQChoice) == 0x000018, "Wrong size on FSQChoice");
static_assert(offsetof(FSQChoice, ID) == 0x000000, "Member 'FSQChoice::ID' has a wrong offset!");
static_assert(offsetof(FSQChoice, Data) == 0x000008, "Member 'FSQChoice::Data' has a wrong offset!");

// ScriptStruct Squad.PlayerData
// 0x0002 (0x0002 - 0x0000)
struct FPlayerData final
{
public:
	bool                                          bInitialized;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptedPolicy;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerData) == 0x000001, "Wrong alignment on FPlayerData");
static_assert(sizeof(FPlayerData) == 0x000002, "Wrong size on FPlayerData");
static_assert(offsetof(FPlayerData, bInitialized) == 0x000000, "Member 'FPlayerData::bInitialized' has a wrong offset!");
static_assert(offsetof(FPlayerData, bAcceptedPolicy) == 0x000001, "Member 'FPlayerData::bAcceptedPolicy' has a wrong offset!");

// ScriptStruct Squad.BlueprintOnlineItemDefinition
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBlueprintOnlineItemDefinition final
{
public:
	uint8                                         Pad_C33[0x10];                                     // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlueprintOnlineItemDefinition) == 0x000008, "Wrong alignment on FBlueprintOnlineItemDefinition");
static_assert(sizeof(FBlueprintOnlineItemDefinition) == 0x000010, "Wrong size on FBlueprintOnlineItemDefinition");

// ScriptStruct Squad.SQVehicleDestroyedConfig
// 0x0010 (0x0010 - 0x0000)
struct FSQVehicleDestroyedConfig final
{
public:
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQDestroyedVehicle>        DestroyedVehicleClass;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVehicleDestroyedConfig) == 0x000008, "Wrong alignment on FSQVehicleDestroyedConfig");
static_assert(sizeof(FSQVehicleDestroyedConfig) == 0x000010, "Wrong size on FSQVehicleDestroyedConfig");
static_assert(offsetof(FSQVehicleDestroyedConfig, DamageType) == 0x000000, "Member 'FSQVehicleDestroyedConfig::DamageType' has a wrong offset!");
static_assert(offsetof(FSQVehicleDestroyedConfig, DestroyedVehicleClass) == 0x000008, "Member 'FSQVehicleDestroyedConfig::DestroyedVehicleClass' has a wrong offset!");

// ScriptStruct Squad.NewsData
// 0x0048 (0x0048 - 0x0000)
struct FNewsData final
{
public:
	bool                                          bInitialized;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C34[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CdnImageName;                                      // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewsData) == 0x000008, "Wrong alignment on FNewsData");
static_assert(sizeof(FNewsData) == 0x000048, "Wrong size on FNewsData");
static_assert(offsetof(FNewsData, bInitialized) == 0x000000, "Member 'FNewsData::bInitialized' has a wrong offset!");
static_assert(offsetof(FNewsData, Active) == 0x000001, "Member 'FNewsData::Active' has a wrong offset!");
static_assert(offsetof(FNewsData, Title) == 0x000008, "Member 'FNewsData::Title' has a wrong offset!");
static_assert(offsetof(FNewsData, Body) == 0x000018, "Member 'FNewsData::Body' has a wrong offset!");
static_assert(offsetof(FNewsData, CdnImageName) == 0x000028, "Member 'FNewsData::CdnImageName' has a wrong offset!");
static_assert(offsetof(FNewsData, URL) == 0x000038, "Member 'FNewsData::URL' has a wrong offset!");

// ScriptStruct Squad.SQHUDMessage
// 0x0030 (0x0030 - 0x0000)
struct FSQHUDMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Scale;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExpireTime;                                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeTime;                                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C35[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQHUDMessage) == 0x000008, "Wrong alignment on FSQHUDMessage");
static_assert(sizeof(FSQHUDMessage) == 0x000030, "Wrong size on FSQHUDMessage");
static_assert(offsetof(FSQHUDMessage, Message) == 0x000000, "Member 'FSQHUDMessage::Message' has a wrong offset!");
static_assert(offsetof(FSQHUDMessage, Color) == 0x000010, "Member 'FSQHUDMessage::Color' has a wrong offset!");
static_assert(offsetof(FSQHUDMessage, Scale) == 0x000020, "Member 'FSQHUDMessage::Scale' has a wrong offset!");
static_assert(offsetof(FSQHUDMessage, ExpireTime) == 0x000024, "Member 'FSQHUDMessage::ExpireTime' has a wrong offset!");
static_assert(offsetof(FSQHUDMessage, FadeTime) == 0x000028, "Member 'FSQHUDMessage::FadeTime' has a wrong offset!");

// ScriptStruct Squad.SQMenuSoundsStyle
// 0x0030 (0x0038 - 0x0008)
struct FSQMenuSoundsStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateSound                            StartGameSound;                                    // 0x0008(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            ExitGameSound;                                     // 0x0020(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMenuSoundsStyle) == 0x000008, "Wrong alignment on FSQMenuSoundsStyle");
static_assert(sizeof(FSQMenuSoundsStyle) == 0x000038, "Wrong size on FSQMenuSoundsStyle");
static_assert(offsetof(FSQMenuSoundsStyle, StartGameSound) == 0x000008, "Member 'FSQMenuSoundsStyle::StartGameSound' has a wrong offset!");
static_assert(offsetof(FSQMenuSoundsStyle, ExitGameSound) == 0x000020, "Member 'FSQMenuSoundsStyle::ExitGameSound' has a wrong offset!");

// ScriptStruct Squad.SQMontageSectionNames
// 0x0028 (0x0028 - 0x0000)
struct FSQMontageSectionNames final
{
public:
	class FName                                   BeginSection;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopSection1;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LoopSection2;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndSection;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MidEndSection;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMontageSectionNames) == 0x000004, "Wrong alignment on FSQMontageSectionNames");
static_assert(sizeof(FSQMontageSectionNames) == 0x000028, "Wrong size on FSQMontageSectionNames");
static_assert(offsetof(FSQMontageSectionNames, BeginSection) == 0x000000, "Member 'FSQMontageSectionNames::BeginSection' has a wrong offset!");
static_assert(offsetof(FSQMontageSectionNames, LoopSection1) == 0x000008, "Member 'FSQMontageSectionNames::LoopSection1' has a wrong offset!");
static_assert(offsetof(FSQMontageSectionNames, LoopSection2) == 0x000010, "Member 'FSQMontageSectionNames::LoopSection2' has a wrong offset!");
static_assert(offsetof(FSQMontageSectionNames, EndSection) == 0x000018, "Member 'FSQMontageSectionNames::EndSection' has a wrong offset!");
static_assert(offsetof(FSQMontageSectionNames, MidEndSection) == 0x000020, "Member 'FSQMontageSectionNames::MidEndSection' has a wrong offset!");

// ScriptStruct Squad.SQClimbTypeData
// 0x0028 (0x0028 - 0x0000)
struct FSQClimbTypeData
{
public:
	uint8                                         Pad_C36[0x8];                                      // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndSpace;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequiredAnimationTime;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaminaCost;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage1P;                                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage3P;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQClimbTypeData) == 0x000008, "Wrong alignment on FSQClimbTypeData");
static_assert(sizeof(FSQClimbTypeData) == 0x000028, "Wrong size on FSQClimbTypeData");
static_assert(offsetof(FSQClimbTypeData, EndSpace) == 0x000008, "Member 'FSQClimbTypeData::EndSpace' has a wrong offset!");
static_assert(offsetof(FSQClimbTypeData, MaxHeight) == 0x00000C, "Member 'FSQClimbTypeData::MaxHeight' has a wrong offset!");
static_assert(offsetof(FSQClimbTypeData, RequiredAnimationTime) == 0x000010, "Member 'FSQClimbTypeData::RequiredAnimationTime' has a wrong offset!");
static_assert(offsetof(FSQClimbTypeData, StaminaCost) == 0x000014, "Member 'FSQClimbTypeData::StaminaCost' has a wrong offset!");
static_assert(offsetof(FSQClimbTypeData, Montage1P) == 0x000018, "Member 'FSQClimbTypeData::Montage1P' has a wrong offset!");
static_assert(offsetof(FSQClimbTypeData, Montage3P) == 0x000020, "Member 'FSQClimbTypeData::Montage3P' has a wrong offset!");

// ScriptStruct Squad.SQClimbOntoTypeData
// 0x0008 (0x0030 - 0x0028)
struct FSQClimbOntoTypeData final : public FSQClimbTypeData
{
public:
	float                                         InterpolateTime;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C37[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQClimbOntoTypeData) == 0x000008, "Wrong alignment on FSQClimbOntoTypeData");
static_assert(sizeof(FSQClimbOntoTypeData) == 0x000030, "Wrong size on FSQClimbOntoTypeData");
static_assert(offsetof(FSQClimbOntoTypeData, InterpolateTime) == 0x000028, "Member 'FSQClimbOntoTypeData::InterpolateTime' has a wrong offset!");

// ScriptStruct Squad.SQClimbOntoData
// 0x0090 (0x0090 - 0x0000)
struct FSQClimbOntoData final
{
public:
	struct FSQClimbOntoTypeData                   Low;                                               // 0x0000(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQClimbOntoTypeData                   Mid;                                               // 0x0030(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQClimbOntoTypeData                   High;                                              // 0x0060(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQClimbOntoData) == 0x000008, "Wrong alignment on FSQClimbOntoData");
static_assert(sizeof(FSQClimbOntoData) == 0x000090, "Wrong size on FSQClimbOntoData");
static_assert(offsetof(FSQClimbOntoData, Low) == 0x000000, "Member 'FSQClimbOntoData::Low' has a wrong offset!");
static_assert(offsetof(FSQClimbOntoData, Mid) == 0x000030, "Member 'FSQClimbOntoData::Mid' has a wrong offset!");
static_assert(offsetof(FSQClimbOntoData, High) == 0x000060, "Member 'FSQClimbOntoData::High' has a wrong offset!");

// ScriptStruct Squad.CrossPromotionData
// 0x0078 (0x0078 - 0x0000)
struct FCrossPromotionData final
{
public:
	bool                                          bInitialized;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C38[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Body;                                              // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CdnImageName;                                      // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UrlText;                                           // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Url2;                                              // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UrlText2;                                          // 0x0068(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrossPromotionData) == 0x000008, "Wrong alignment on FCrossPromotionData");
static_assert(sizeof(FCrossPromotionData) == 0x000078, "Wrong size on FCrossPromotionData");
static_assert(offsetof(FCrossPromotionData, bInitialized) == 0x000000, "Member 'FCrossPromotionData::bInitialized' has a wrong offset!");
static_assert(offsetof(FCrossPromotionData, Active) == 0x000001, "Member 'FCrossPromotionData::Active' has a wrong offset!");
static_assert(offsetof(FCrossPromotionData, Title) == 0x000008, "Member 'FCrossPromotionData::Title' has a wrong offset!");
static_assert(offsetof(FCrossPromotionData, Body) == 0x000018, "Member 'FCrossPromotionData::Body' has a wrong offset!");
static_assert(offsetof(FCrossPromotionData, CdnImageName) == 0x000028, "Member 'FCrossPromotionData::CdnImageName' has a wrong offset!");
static_assert(offsetof(FCrossPromotionData, URL) == 0x000038, "Member 'FCrossPromotionData::URL' has a wrong offset!");
static_assert(offsetof(FCrossPromotionData, UrlText) == 0x000048, "Member 'FCrossPromotionData::UrlText' has a wrong offset!");
static_assert(offsetof(FCrossPromotionData, Url2) == 0x000058, "Member 'FCrossPromotionData::Url2' has a wrong offset!");
static_assert(offsetof(FCrossPromotionData, UrlText2) == 0x000068, "Member 'FCrossPromotionData::UrlText2' has a wrong offset!");

// ScriptStruct Squad.SQBoneDamageMod
// 0x000C (0x000C - 0x0000)
struct FSQBoneDamageMod final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageMod;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQBoneDamageMod) == 0x000004, "Wrong alignment on FSQBoneDamageMod");
static_assert(sizeof(FSQBoneDamageMod) == 0x00000C, "Wrong size on FSQBoneDamageMod");
static_assert(offsetof(FSQBoneDamageMod, BoneName) == 0x000000, "Member 'FSQBoneDamageMod::BoneName' has a wrong offset!");
static_assert(offsetof(FSQBoneDamageMod, DamageMod) == 0x000008, "Member 'FSQBoneDamageMod::DamageMod' has a wrong offset!");

// ScriptStruct Squad.SQBasedMovementInfo
// 0x0030 (0x0030 - 0x0000)
struct FSQBasedMovementInfo final
{
public:
	class UPrimitiveComponent*                    MovementBase;                                      // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 Location;                                          // 0x0010(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bServerHasBaseComponent;                           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelativeRotation;                                 // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServerHasVelocity;                                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C39[0x5];                                      // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQBasedMovementInfo) == 0x000008, "Wrong alignment on FSQBasedMovementInfo");
static_assert(sizeof(FSQBasedMovementInfo) == 0x000030, "Wrong size on FSQBasedMovementInfo");
static_assert(offsetof(FSQBasedMovementInfo, MovementBase) == 0x000000, "Member 'FSQBasedMovementInfo::MovementBase' has a wrong offset!");
static_assert(offsetof(FSQBasedMovementInfo, BoneName) == 0x000008, "Member 'FSQBasedMovementInfo::BoneName' has a wrong offset!");
static_assert(offsetof(FSQBasedMovementInfo, Location) == 0x000010, "Member 'FSQBasedMovementInfo::Location' has a wrong offset!");
static_assert(offsetof(FSQBasedMovementInfo, Rotation) == 0x00001C, "Member 'FSQBasedMovementInfo::Rotation' has a wrong offset!");
static_assert(offsetof(FSQBasedMovementInfo, bServerHasBaseComponent) == 0x000028, "Member 'FSQBasedMovementInfo::bServerHasBaseComponent' has a wrong offset!");
static_assert(offsetof(FSQBasedMovementInfo, bRelativeRotation) == 0x000029, "Member 'FSQBasedMovementInfo::bRelativeRotation' has a wrong offset!");
static_assert(offsetof(FSQBasedMovementInfo, bServerHasVelocity) == 0x00002A, "Member 'FSQBasedMovementInfo::bServerHasVelocity' has a wrong offset!");

// ScriptStruct Squad.StoreSettingsData
// 0x0018 (0x0018 - 0x0000)
struct FStoreSettingsData final
{
public:
	bool                                          bInitialized;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3A[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Bundles;                                           // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreSettingsData) == 0x000008, "Wrong alignment on FStoreSettingsData");
static_assert(sizeof(FStoreSettingsData) == 0x000018, "Wrong size on FStoreSettingsData");
static_assert(offsetof(FStoreSettingsData, bInitialized) == 0x000000, "Member 'FStoreSettingsData::bInitialized' has a wrong offset!");
static_assert(offsetof(FStoreSettingsData, Active) == 0x000001, "Member 'FStoreSettingsData::Active' has a wrong offset!");
static_assert(offsetof(FStoreSettingsData, Bundles) == 0x000008, "Member 'FStoreSettingsData::Bundles' has a wrong offset!");

// ScriptStruct Squad.TitleData
// 0x0098 (0x0098 - 0x0000)
struct FTitleData final
{
public:
	bool                                          bInitialized;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3B[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCrossPromotionData                    CrossPromotionData;                                // 0x0008(0x0078)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FStoreSettingsData                     StoreSettings;                                     // 0x0080(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTitleData) == 0x000008, "Wrong alignment on FTitleData");
static_assert(sizeof(FTitleData) == 0x000098, "Wrong size on FTitleData");
static_assert(offsetof(FTitleData, bInitialized) == 0x000000, "Member 'FTitleData::bInitialized' has a wrong offset!");
static_assert(offsetof(FTitleData, CrossPromotionData) == 0x000008, "Member 'FTitleData::CrossPromotionData' has a wrong offset!");
static_assert(offsetof(FTitleData, StoreSettings) == 0x000080, "Member 'FTitleData::StoreSettings' has a wrong offset!");

// ScriptStruct Squad.HeatMapRecordingSample
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FHeatMapRecordingSample final
{
public:
	uint8                                         Pad_C3C[0x20];                                     // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeatMapRecordingSample) == 0x000004, "Wrong alignment on FHeatMapRecordingSample");
static_assert(sizeof(FHeatMapRecordingSample) == 0x000020, "Wrong size on FHeatMapRecordingSample");

// ScriptStruct Squad.SQClimbOverTypeData
// 0x0018 (0x0040 - 0x0028)
struct FSQClimbOverTypeData final : public FSQClimbTypeData
{
public:
	float                                         MinVerticalSpace;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolateTimeToMidStart;                         // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolateTimeToMidEnd;                           // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpolateTimeToEnd;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidHorizonalSpace;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3D[0x4];                                      // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQClimbOverTypeData) == 0x000008, "Wrong alignment on FSQClimbOverTypeData");
static_assert(sizeof(FSQClimbOverTypeData) == 0x000040, "Wrong size on FSQClimbOverTypeData");
static_assert(offsetof(FSQClimbOverTypeData, MinVerticalSpace) == 0x000028, "Member 'FSQClimbOverTypeData::MinVerticalSpace' has a wrong offset!");
static_assert(offsetof(FSQClimbOverTypeData, InterpolateTimeToMidStart) == 0x00002C, "Member 'FSQClimbOverTypeData::InterpolateTimeToMidStart' has a wrong offset!");
static_assert(offsetof(FSQClimbOverTypeData, InterpolateTimeToMidEnd) == 0x000030, "Member 'FSQClimbOverTypeData::InterpolateTimeToMidEnd' has a wrong offset!");
static_assert(offsetof(FSQClimbOverTypeData, InterpolateTimeToEnd) == 0x000034, "Member 'FSQClimbOverTypeData::InterpolateTimeToEnd' has a wrong offset!");
static_assert(offsetof(FSQClimbOverTypeData, MidHorizonalSpace) == 0x000038, "Member 'FSQClimbOverTypeData::MidHorizonalSpace' has a wrong offset!");

// ScriptStruct Squad.SQClimbOverData
// 0x0090 (0x0090 - 0x0000)
struct FSQClimbOverData final
{
public:
	float                                         MaxMoveDistance;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMiddleMoveDistance;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidCollisionShapeScale;                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3E[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQClimbOverTypeData                   Low;                                               // 0x0010(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQClimbOverTypeData                   Mid;                                               // 0x0050(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQClimbOverData) == 0x000008, "Wrong alignment on FSQClimbOverData");
static_assert(sizeof(FSQClimbOverData) == 0x000090, "Wrong size on FSQClimbOverData");
static_assert(offsetof(FSQClimbOverData, MaxMoveDistance) == 0x000000, "Member 'FSQClimbOverData::MaxMoveDistance' has a wrong offset!");
static_assert(offsetof(FSQClimbOverData, MinMiddleMoveDistance) == 0x000004, "Member 'FSQClimbOverData::MinMiddleMoveDistance' has a wrong offset!");
static_assert(offsetof(FSQClimbOverData, MidCollisionShapeScale) == 0x000008, "Member 'FSQClimbOverData::MidCollisionShapeScale' has a wrong offset!");
static_assert(offsetof(FSQClimbOverData, Low) == 0x000010, "Member 'FSQClimbOverData::Low' has a wrong offset!");
static_assert(offsetof(FSQClimbOverData, Mid) == 0x000050, "Member 'FSQClimbOverData::Mid' has a wrong offset!");

// ScriptStruct Squad.SQTextureMemoryStats
// 0x001C (0x001C - 0x0000)
struct FSQTextureMemoryStats final
{
public:
	int32                                         DedicatedVideoMemory;                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DedicatedSystemMemory;                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SharedSystemMemory;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalGraphicsMemory;                               // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AllocatedMemorySize;                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TexturePoolSize;                                   // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PendingMemoryAdjustment;                           // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQTextureMemoryStats) == 0x000004, "Wrong alignment on FSQTextureMemoryStats");
static_assert(sizeof(FSQTextureMemoryStats) == 0x00001C, "Wrong size on FSQTextureMemoryStats");
static_assert(offsetof(FSQTextureMemoryStats, DedicatedVideoMemory) == 0x000000, "Member 'FSQTextureMemoryStats::DedicatedVideoMemory' has a wrong offset!");
static_assert(offsetof(FSQTextureMemoryStats, DedicatedSystemMemory) == 0x000004, "Member 'FSQTextureMemoryStats::DedicatedSystemMemory' has a wrong offset!");
static_assert(offsetof(FSQTextureMemoryStats, SharedSystemMemory) == 0x000008, "Member 'FSQTextureMemoryStats::SharedSystemMemory' has a wrong offset!");
static_assert(offsetof(FSQTextureMemoryStats, TotalGraphicsMemory) == 0x00000C, "Member 'FSQTextureMemoryStats::TotalGraphicsMemory' has a wrong offset!");
static_assert(offsetof(FSQTextureMemoryStats, AllocatedMemorySize) == 0x000010, "Member 'FSQTextureMemoryStats::AllocatedMemorySize' has a wrong offset!");
static_assert(offsetof(FSQTextureMemoryStats, TexturePoolSize) == 0x000014, "Member 'FSQTextureMemoryStats::TexturePoolSize' has a wrong offset!");
static_assert(offsetof(FSQTextureMemoryStats, PendingMemoryAdjustment) == 0x000018, "Member 'FSQTextureMemoryStats::PendingMemoryAdjustment' has a wrong offset!");

// ScriptStruct Squad.SQPenetrationTrace
// 0x00AC (0x00AC - 0x0000)
struct FSQPenetrationTrace
{
public:
	uint8                                         bIsActor : 1;                                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasValidReverseImpact : 1;                        // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanPassDamage : 1;                                // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C3F[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0004(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ReverseAngleImpactLocation;                        // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ReverseAngleImpactNormal;                          // 0x0098(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReverseAngleBoneName;                              // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQPenetrationTrace) == 0x000004, "Wrong alignment on FSQPenetrationTrace");
static_assert(sizeof(FSQPenetrationTrace) == 0x0000AC, "Wrong size on FSQPenetrationTrace");
static_assert(offsetof(FSQPenetrationTrace, HitResult) == 0x000004, "Member 'FSQPenetrationTrace::HitResult' has a wrong offset!");
static_assert(offsetof(FSQPenetrationTrace, ReverseAngleImpactLocation) == 0x00008C, "Member 'FSQPenetrationTrace::ReverseAngleImpactLocation' has a wrong offset!");
static_assert(offsetof(FSQPenetrationTrace, ReverseAngleImpactNormal) == 0x000098, "Member 'FSQPenetrationTrace::ReverseAngleImpactNormal' has a wrong offset!");
static_assert(offsetof(FSQPenetrationTrace, ReverseAngleBoneName) == 0x0000A4, "Member 'FSQPenetrationTrace::ReverseAngleBoneName' has a wrong offset!");

// ScriptStruct Squad.SQPenetrationProxy
// 0x0000 (0x00AC - 0x00AC)
struct FSQPenetrationProxy final : public FSQPenetrationTrace
{
};
static_assert(alignof(FSQPenetrationProxy) == 0x000004, "Wrong alignment on FSQPenetrationProxy");
static_assert(sizeof(FSQPenetrationProxy) == 0x0000AC, "Wrong size on FSQPenetrationProxy");

// ScriptStruct Squad.SQRearmWeaponRequest
// 0x0010 (0x0010 - 0x0000)
struct FSQRearmWeaponRequest final
{
public:
	class ASQEquipableItem*                       Weapon;                                            // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagsToRearm;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C40[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQRearmWeaponRequest) == 0x000008, "Wrong alignment on FSQRearmWeaponRequest");
static_assert(sizeof(FSQRearmWeaponRequest) == 0x000010, "Wrong size on FSQRearmWeaponRequest");
static_assert(offsetof(FSQRearmWeaponRequest, Weapon) == 0x000000, "Member 'FSQRearmWeaponRequest::Weapon' has a wrong offset!");
static_assert(offsetof(FSQRearmWeaponRequest, MagsToRearm) == 0x000008, "Member 'FSQRearmWeaponRequest::MagsToRearm' has a wrong offset!");

// ScriptStruct Squad.SQRemoteTalkerDisplayInfo
// 0x0010 (0x0010 - 0x0000)
struct FSQRemoteTalkerDisplayInfo final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQVoiceChannel                               Channel;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C41[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQRemoteTalkerDisplayInfo) == 0x000008, "Wrong alignment on FSQRemoteTalkerDisplayInfo");
static_assert(sizeof(FSQRemoteTalkerDisplayInfo) == 0x000010, "Wrong size on FSQRemoteTalkerDisplayInfo");
static_assert(offsetof(FSQRemoteTalkerDisplayInfo, PlayerState) == 0x000000, "Member 'FSQRemoteTalkerDisplayInfo::PlayerState' has a wrong offset!");
static_assert(offsetof(FSQRemoteTalkerDisplayInfo, Channel) == 0x000008, "Member 'FSQRemoteTalkerDisplayInfo::Channel' has a wrong offset!");

// ScriptStruct Squad.SQMarkerReference
// 0x0028 (0x0028 - 0x0000)
struct FSQMarkerReference final
{
public:
	TSubclassOf<class USQ_HexMenu_BaseAction>     MarkerType;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSquadOnly;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C42[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQ_HexMenu_BaseAction*>         Markers;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	int32                                         ConcurrentMarkersLimit;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C43[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQMarkerReference) == 0x000008, "Wrong alignment on FSQMarkerReference");
static_assert(sizeof(FSQMarkerReference) == 0x000028, "Wrong size on FSQMarkerReference");
static_assert(offsetof(FSQMarkerReference, MarkerType) == 0x000000, "Member 'FSQMarkerReference::MarkerType' has a wrong offset!");
static_assert(offsetof(FSQMarkerReference, bSquadOnly) == 0x000008, "Member 'FSQMarkerReference::bSquadOnly' has a wrong offset!");
static_assert(offsetof(FSQMarkerReference, Markers) == 0x000010, "Member 'FSQMarkerReference::Markers' has a wrong offset!");
static_assert(offsetof(FSQMarkerReference, ConcurrentMarkersLimit) == 0x000020, "Member 'FSQMarkerReference::ConcurrentMarkersLimit' has a wrong offset!");

// ScriptStruct Squad.SQCreditsList
// 0x0028 (0x0028 - 0x0000)
struct FSQCreditsList final
{
public:
	ESQCreditsLineType                            LineType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C44[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Columns;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQCreditsList) == 0x000008, "Wrong alignment on FSQCreditsList");
static_assert(sizeof(FSQCreditsList) == 0x000028, "Wrong size on FSQCreditsList");
static_assert(offsetof(FSQCreditsList, LineType) == 0x000000, "Member 'FSQCreditsList::LineType' has a wrong offset!");
static_assert(offsetof(FSQCreditsList, Name) == 0x000008, "Member 'FSQCreditsList::Name' has a wrong offset!");
static_assert(offsetof(FSQCreditsList, Columns) == 0x000018, "Member 'FSQCreditsList::Columns' has a wrong offset!");

// ScriptStruct Squad.SQSoldierEffect
// 0x0048 (0x0048 - 0x0000)
struct FSQSoldierEffect final
{
public:
	class UCurveFloat*                            SoldierInclineMovementSpeedCurve;                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayFootstepEffectWhenMovementInteractionTriggered; // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C45[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        FootstepEffect;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraFootstepEffect;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              FootstepSound;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        MovementInteractionParticleEffect;                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraMovementInteractionParticleEffect;          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              MovementInteractionSound;                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              LandedSound;                                       // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSoldierEffect) == 0x000008, "Wrong alignment on FSQSoldierEffect");
static_assert(sizeof(FSQSoldierEffect) == 0x000048, "Wrong size on FSQSoldierEffect");
static_assert(offsetof(FSQSoldierEffect, SoldierInclineMovementSpeedCurve) == 0x000000, "Member 'FSQSoldierEffect::SoldierInclineMovementSpeedCurve' has a wrong offset!");
static_assert(offsetof(FSQSoldierEffect, bPlayFootstepEffectWhenMovementInteractionTriggered) == 0x000008, "Member 'FSQSoldierEffect::bPlayFootstepEffectWhenMovementInteractionTriggered' has a wrong offset!");
static_assert(offsetof(FSQSoldierEffect, FootstepEffect) == 0x000010, "Member 'FSQSoldierEffect::FootstepEffect' has a wrong offset!");
static_assert(offsetof(FSQSoldierEffect, NiagaraFootstepEffect) == 0x000018, "Member 'FSQSoldierEffect::NiagaraFootstepEffect' has a wrong offset!");
static_assert(offsetof(FSQSoldierEffect, FootstepSound) == 0x000020, "Member 'FSQSoldierEffect::FootstepSound' has a wrong offset!");
static_assert(offsetof(FSQSoldierEffect, MovementInteractionParticleEffect) == 0x000028, "Member 'FSQSoldierEffect::MovementInteractionParticleEffect' has a wrong offset!");
static_assert(offsetof(FSQSoldierEffect, NiagaraMovementInteractionParticleEffect) == 0x000030, "Member 'FSQSoldierEffect::NiagaraMovementInteractionParticleEffect' has a wrong offset!");
static_assert(offsetof(FSQSoldierEffect, MovementInteractionSound) == 0x000038, "Member 'FSQSoldierEffect::MovementInteractionSound' has a wrong offset!");
static_assert(offsetof(FSQSoldierEffect, LandedSound) == 0x000040, "Member 'FSQSoldierEffect::LandedSound' has a wrong offset!");

// ScriptStruct Squad.SQClimbInfo
// 0x0030 (0x0030 - 0x0000)
struct FSQClimbInfo final
{
public:
	uint8                                         Pad_C46[0x1];                                      // 0x0000(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EClimbType                                    PendingType;                                       // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C47[0x16];                                     // 0x0002(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector_NetQuantize10>          PendingClimbMovePathZeroBased;                     // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C48[0x1];                                      // 0x0028(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	EClimbState                                   PendingState;                                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C49[0x6];                                      // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQClimbInfo) == 0x000008, "Wrong alignment on FSQClimbInfo");
static_assert(sizeof(FSQClimbInfo) == 0x000030, "Wrong size on FSQClimbInfo");
static_assert(offsetof(FSQClimbInfo, PendingType) == 0x000001, "Member 'FSQClimbInfo::PendingType' has a wrong offset!");
static_assert(offsetof(FSQClimbInfo, PendingClimbMovePathZeroBased) == 0x000018, "Member 'FSQClimbInfo::PendingClimbMovePathZeroBased' has a wrong offset!");
static_assert(offsetof(FSQClimbInfo, PendingState) == 0x000029, "Member 'FSQClimbInfo::PendingState' has a wrong offset!");

// ScriptStruct Squad.ODKAnalyticsDataInterface
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FODKAnalyticsDataInterface
{
public:
	uint8                                         Pad_C4A[0x8];                                      // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FODKAnalyticsDataInterface) == 0x000008, "Wrong alignment on FODKAnalyticsDataInterface");
static_assert(sizeof(FODKAnalyticsDataInterface) == 0x000008, "Wrong size on FODKAnalyticsDataInterface");

// ScriptStruct Squad.ODKSessionData
// 0x0028 (0x0030 - 0x0008)
struct FODKSessionData : public FODKAnalyticsDataInterface
{
public:
	class FString                                 GameVersion;                                       // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSamples;                                      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4B[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FODKSessionData) == 0x000008, "Wrong alignment on FODKSessionData");
static_assert(sizeof(FODKSessionData) == 0x000030, "Wrong size on FODKSessionData");
static_assert(offsetof(FODKSessionData, GameVersion) == 0x000008, "Member 'FODKSessionData::GameVersion' has a wrong offset!");
static_assert(offsetof(FODKSessionData, MapName) == 0x000018, "Member 'FODKSessionData::MapName' has a wrong offset!");
static_assert(offsetof(FODKSessionData, TotalSamples) == 0x000028, "Member 'FODKSessionData::TotalSamples' has a wrong offset!");

// ScriptStruct Squad.SQSystemHUDMessage
// 0x0028 (0x0028 - 0x0000)
struct FSQSystemHUDMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MessageLifetime;                                   // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4C[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQSystemHUDMessage) == 0x000008, "Wrong alignment on FSQSystemHUDMessage");
static_assert(sizeof(FSQSystemHUDMessage) == 0x000028, "Wrong size on FSQSystemHUDMessage");
static_assert(offsetof(FSQSystemHUDMessage, Message) == 0x000000, "Member 'FSQSystemHUDMessage::Message' has a wrong offset!");
static_assert(offsetof(FSQSystemHUDMessage, Color) == 0x000010, "Member 'FSQSystemHUDMessage::Color' has a wrong offset!");
static_assert(offsetof(FSQSystemHUDMessage, MessageLifetime) == 0x000020, "Member 'FSQSystemHUDMessage::MessageLifetime' has a wrong offset!");

// ScriptStruct Squad.SQVoipAnim
// 0x0020 (0x0020 - 0x0000)
struct FSQVoipAnim final
{
public:
	class UAnimMontage*                           FirstPersonAnim;                                   // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonAnim;                                   // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FirstPersonEndAnim;                                // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonEndAnim;                                // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVoipAnim) == 0x000008, "Wrong alignment on FSQVoipAnim");
static_assert(sizeof(FSQVoipAnim) == 0x000020, "Wrong size on FSQVoipAnim");
static_assert(offsetof(FSQVoipAnim, FirstPersonAnim) == 0x000000, "Member 'FSQVoipAnim::FirstPersonAnim' has a wrong offset!");
static_assert(offsetof(FSQVoipAnim, ThirdPersonAnim) == 0x000008, "Member 'FSQVoipAnim::ThirdPersonAnim' has a wrong offset!");
static_assert(offsetof(FSQVoipAnim, FirstPersonEndAnim) == 0x000010, "Member 'FSQVoipAnim::FirstPersonEndAnim' has a wrong offset!");
static_assert(offsetof(FSQVoipAnim, ThirdPersonEndAnim) == 0x000018, "Member 'FSQVoipAnim::ThirdPersonEndAnim' has a wrong offset!");

// ScriptStruct Squad.SQClimbData
// 0x0150 (0x0150 - 0x0000)
struct FSQClimbData final
{
public:
	float                                         MinHeight;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4D[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQClimbOverData                       OverData;                                          // 0x0008(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQClimbOntoData                       OntoData;                                          // 0x0098(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MinMoveToStartSpeed;                               // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SearchDistance;                                    // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxClimbableAngle;                                 // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchCorrectionTime;                               // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchCorrectionMidPoint;                           // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CielingNormalTollerance;                           // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlapDetectionScale;                             // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActorLocationAcceptanceDistance;                   // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerAcceptanceDistance;                          // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4E[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQClimbData) == 0x000008, "Wrong alignment on FSQClimbData");
static_assert(sizeof(FSQClimbData) == 0x000150, "Wrong size on FSQClimbData");
static_assert(offsetof(FSQClimbData, MinHeight) == 0x000000, "Member 'FSQClimbData::MinHeight' has a wrong offset!");
static_assert(offsetof(FSQClimbData, OverData) == 0x000008, "Member 'FSQClimbData::OverData' has a wrong offset!");
static_assert(offsetof(FSQClimbData, OntoData) == 0x000098, "Member 'FSQClimbData::OntoData' has a wrong offset!");
static_assert(offsetof(FSQClimbData, MinMoveToStartSpeed) == 0x000128, "Member 'FSQClimbData::MinMoveToStartSpeed' has a wrong offset!");
static_assert(offsetof(FSQClimbData, SearchDistance) == 0x00012C, "Member 'FSQClimbData::SearchDistance' has a wrong offset!");
static_assert(offsetof(FSQClimbData, MaxClimbableAngle) == 0x000130, "Member 'FSQClimbData::MaxClimbableAngle' has a wrong offset!");
static_assert(offsetof(FSQClimbData, PitchCorrectionTime) == 0x000134, "Member 'FSQClimbData::PitchCorrectionTime' has a wrong offset!");
static_assert(offsetof(FSQClimbData, PitchCorrectionMidPoint) == 0x000138, "Member 'FSQClimbData::PitchCorrectionMidPoint' has a wrong offset!");
static_assert(offsetof(FSQClimbData, CielingNormalTollerance) == 0x00013C, "Member 'FSQClimbData::CielingNormalTollerance' has a wrong offset!");
static_assert(offsetof(FSQClimbData, OverlapDetectionScale) == 0x000140, "Member 'FSQClimbData::OverlapDetectionScale' has a wrong offset!");
static_assert(offsetof(FSQClimbData, ActorLocationAcceptanceDistance) == 0x000144, "Member 'FSQClimbData::ActorLocationAcceptanceDistance' has a wrong offset!");
static_assert(offsetof(FSQClimbData, ServerAcceptanceDistance) == 0x000148, "Member 'FSQClimbData::ServerAcceptanceDistance' has a wrong offset!");

// ScriptStruct Squad.ODKStatisticalData_Int
// 0x0038 (0x0040 - 0x0008)
struct FODKStatisticalData_Int : public FODKAnalyticsDataInterface
{
public:
	int64                                         Min;                                               // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Max;                                               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Q1;                                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Mean;                                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Q3;                                                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4F[0x10];                                     // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FODKStatisticalData_Int) == 0x000008, "Wrong alignment on FODKStatisticalData_Int");
static_assert(sizeof(FODKStatisticalData_Int) == 0x000040, "Wrong size on FODKStatisticalData_Int");
static_assert(offsetof(FODKStatisticalData_Int, Min) == 0x000008, "Member 'FODKStatisticalData_Int::Min' has a wrong offset!");
static_assert(offsetof(FODKStatisticalData_Int, Max) == 0x000010, "Member 'FODKStatisticalData_Int::Max' has a wrong offset!");
static_assert(offsetof(FODKStatisticalData_Int, Q1) == 0x000018, "Member 'FODKStatisticalData_Int::Q1' has a wrong offset!");
static_assert(offsetof(FODKStatisticalData_Int, Mean) == 0x000020, "Member 'FODKStatisticalData_Int::Mean' has a wrong offset!");
static_assert(offsetof(FODKStatisticalData_Int, Q3) == 0x000028, "Member 'FODKStatisticalData_Int::Q3' has a wrong offset!");

// ScriptStruct Squad.ODKGPUTimingData
// 0x0000 (0x0040 - 0x0040)
struct FODKGPUTimingData : public FODKStatisticalData_Int
{
};
static_assert(alignof(FODKGPUTimingData) == 0x000008, "Wrong alignment on FODKGPUTimingData");
static_assert(sizeof(FODKGPUTimingData) == 0x000040, "Wrong size on FODKGPUTimingData");

// ScriptStruct Squad.SQSwayDynamicMovement
// 0x0010 (0x0010 - 0x0000)
struct FSQSwayDynamicMovement final
{
public:
	float                                         MoveSwayFactorRelease;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMoveSway;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMoveSwayFactor;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMoveSwayFactor;                                 // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSwayDynamicMovement) == 0x000004, "Wrong alignment on FSQSwayDynamicMovement");
static_assert(sizeof(FSQSwayDynamicMovement) == 0x000010, "Wrong size on FSQSwayDynamicMovement");
static_assert(offsetof(FSQSwayDynamicMovement, MoveSwayFactorRelease) == 0x000000, "Member 'FSQSwayDynamicMovement::MoveSwayFactorRelease' has a wrong offset!");
static_assert(offsetof(FSQSwayDynamicMovement, AddMoveSway) == 0x000004, "Member 'FSQSwayDynamicMovement::AddMoveSway' has a wrong offset!");
static_assert(offsetof(FSQSwayDynamicMovement, MinMoveSwayFactor) == 0x000008, "Member 'FSQSwayDynamicMovement::MinMoveSwayFactor' has a wrong offset!");
static_assert(offsetof(FSQSwayDynamicMovement, MaxMoveSwayFactor) == 0x00000C, "Member 'FSQSwayDynamicMovement::MaxMoveSwayFactor' has a wrong offset!");

// ScriptStruct Squad.SQAvailabilityStateTimerContainer
// 0x0018 (0x0018 - 0x0000)
struct FSQAvailabilityStateTimerContainer final
{
public:
	struct FDateTime                              NextAvailabilityTime;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    UnavailabilityReason;                              // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQAvailabilityStateTimerContainer) == 0x000008, "Wrong alignment on FSQAvailabilityStateTimerContainer");
static_assert(sizeof(FSQAvailabilityStateTimerContainer) == 0x000018, "Wrong size on FSQAvailabilityStateTimerContainer");
static_assert(offsetof(FSQAvailabilityStateTimerContainer, NextAvailabilityTime) == 0x000000, "Member 'FSQAvailabilityStateTimerContainer::NextAvailabilityTime' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityStateTimerContainer, UnavailabilityReason) == 0x000008, "Member 'FSQAvailabilityStateTimerContainer::UnavailabilityReason' has a wrong offset!");

// ScriptStruct Squad.SQAvailabilityState
// 0x0048 (0x0048 - 0x0000)
struct FSQAvailabilityState final
{
public:
	int32                                         Available;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Used;                                              // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Queued;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModifierPct;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceAvailable;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C50[0x7];                                      // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              NextAvailabilityTime;                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQAvailabilityStateTimerContainer> NextAvailabilityTimeQueue;                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    UnavailabilityReason;                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         StatusUpdateID;                                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C51[0x7];                                      // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQAvailabilityState) == 0x000008, "Wrong alignment on FSQAvailabilityState");
static_assert(sizeof(FSQAvailabilityState) == 0x000048, "Wrong size on FSQAvailabilityState");
static_assert(offsetof(FSQAvailabilityState, Available) == 0x000000, "Member 'FSQAvailabilityState::Available' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState, Used) == 0x000004, "Member 'FSQAvailabilityState::Used' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState, Queued) == 0x000008, "Member 'FSQAvailabilityState::Queued' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState, ModifierPct) == 0x00000C, "Member 'FSQAvailabilityState::ModifierPct' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState, ForceAvailable) == 0x000010, "Member 'FSQAvailabilityState::ForceAvailable' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState, NextAvailabilityTime) == 0x000018, "Member 'FSQAvailabilityState::NextAvailabilityTime' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState, NextAvailabilityTimeQueue) == 0x000020, "Member 'FSQAvailabilityState::NextAvailabilityTimeQueue' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState, UnavailabilityReason) == 0x000030, "Member 'FSQAvailabilityState::UnavailabilityReason' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState, StatusUpdateID) == 0x000040, "Member 'FSQAvailabilityState::StatusUpdateID' has a wrong offset!");

// ScriptStruct Squad.SQAvailabilityState_Vehicle
// 0x0050 (0x0050 - 0x0000)
struct FSQAvailabilityState_Vehicle final
{
public:
	struct FSQAvailabilityState                   Status;                                            // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class USQAvailability_Vehicle*                Availability;                                      // 0x0048(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQAvailabilityState_Vehicle) == 0x000008, "Wrong alignment on FSQAvailabilityState_Vehicle");
static_assert(sizeof(FSQAvailabilityState_Vehicle) == 0x000050, "Wrong size on FSQAvailabilityState_Vehicle");
static_assert(offsetof(FSQAvailabilityState_Vehicle, Status) == 0x000000, "Member 'FSQAvailabilityState_Vehicle::Status' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState_Vehicle, Availability) == 0x000048, "Member 'FSQAvailabilityState_Vehicle::Availability' has a wrong offset!");

// ScriptStruct Squad.CoreStateDataTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FCoreStateDataTickFunction final : public FTickFunction
{
public:
	class USQCoreStateData*                       Target;                                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCoreStateDataTickFunction) == 0x000008, "Wrong alignment on FCoreStateDataTickFunction");
static_assert(sizeof(FCoreStateDataTickFunction) == 0x000030, "Wrong size on FCoreStateDataTickFunction");
static_assert(offsetof(FCoreStateDataTickFunction, Target) == 0x000028, "Member 'FCoreStateDataTickFunction::Target' has a wrong offset!");

// ScriptStruct Squad.SQChunkReplacementRule
// 0x0028 (0x0028 - 0x0000)
struct FSQChunkReplacementRule final
{
public:
	TArray<struct FDirectoryPath>                 Directories;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           ExcludedTypes;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C52[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQChunkReplacementRule) == 0x000008, "Wrong alignment on FSQChunkReplacementRule");
static_assert(sizeof(FSQChunkReplacementRule) == 0x000028, "Wrong size on FSQChunkReplacementRule");
static_assert(offsetof(FSQChunkReplacementRule, Directories) == 0x000000, "Member 'FSQChunkReplacementRule::Directories' has a wrong offset!");
static_assert(offsetof(FSQChunkReplacementRule, ExcludedTypes) == 0x000010, "Member 'FSQChunkReplacementRule::ExcludedTypes' has a wrong offset!");
static_assert(offsetof(FSQChunkReplacementRule, Offset) == 0x000020, "Member 'FSQChunkReplacementRule::Offset' has a wrong offset!");

// ScriptStruct Squad.SQShotInfo
// 0x002C (0x002C - 0x0000)
struct FSQShotInfo
{
public:
	uint8                                         ShotCounter;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C53[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WorldTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  Origin;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTracer;                                         // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C54[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PenetrationDamageMultiplier;                       // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmorDamageMultiplier;                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQShotInfo) == 0x000004, "Wrong alignment on FSQShotInfo");
static_assert(sizeof(FSQShotInfo) == 0x00002C, "Wrong size on FSQShotInfo");
static_assert(offsetof(FSQShotInfo, ShotCounter) == 0x000000, "Member 'FSQShotInfo::ShotCounter' has a wrong offset!");
static_assert(offsetof(FSQShotInfo, WorldTime) == 0x000004, "Member 'FSQShotInfo::WorldTime' has a wrong offset!");
static_assert(offsetof(FSQShotInfo, Origin) == 0x000008, "Member 'FSQShotInfo::Origin' has a wrong offset!");
static_assert(offsetof(FSQShotInfo, ShootDir) == 0x000014, "Member 'FSQShotInfo::ShootDir' has a wrong offset!");
static_assert(offsetof(FSQShotInfo, bIsTracer) == 0x000020, "Member 'FSQShotInfo::bIsTracer' has a wrong offset!");
static_assert(offsetof(FSQShotInfo, PenetrationDamageMultiplier) == 0x000024, "Member 'FSQShotInfo::PenetrationDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FSQShotInfo, ArmorDamageMultiplier) == 0x000028, "Member 'FSQShotInfo::ArmorDamageMultiplier' has a wrong offset!");

// ScriptStruct Squad.VehicleTankGearData
// 0x000C (0x000C - 0x0000)
struct FVehicleTankGearData final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownRatio;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpRatio;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleTankGearData) == 0x000004, "Wrong alignment on FVehicleTankGearData");
static_assert(sizeof(FVehicleTankGearData) == 0x00000C, "Wrong size on FVehicleTankGearData");
static_assert(offsetof(FVehicleTankGearData, Ratio) == 0x000000, "Member 'FVehicleTankGearData::Ratio' has a wrong offset!");
static_assert(offsetof(FVehicleTankGearData, DownRatio) == 0x000004, "Member 'FVehicleTankGearData::DownRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTankGearData, UpRatio) == 0x000008, "Member 'FVehicleTankGearData::UpRatio' has a wrong offset!");

// ScriptStruct Squad.VehicleTankTransmissionData
// 0x0048 (0x0048 - 0x0000)
struct FVehicleTankTransmissionData final
{
public:
	bool                                          bUseGearAutoBox;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C55[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GearSwitchTime;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearAutoBoxLatency;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalRatio;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVehicleTankGearData>           ForwardGears;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FVehicleTankGearData>           BackwardGears;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         ReverseGearRatio;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralGearUpRatio;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralGearDownRatio;                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClutchStrength;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasNeutralSteer;                                  // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C56[0x7];                                      // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleTankTransmissionData) == 0x000008, "Wrong alignment on FVehicleTankTransmissionData");
static_assert(sizeof(FVehicleTankTransmissionData) == 0x000048, "Wrong size on FVehicleTankTransmissionData");
static_assert(offsetof(FVehicleTankTransmissionData, bUseGearAutoBox) == 0x000000, "Member 'FVehicleTankTransmissionData::bUseGearAutoBox' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, GearSwitchTime) == 0x000004, "Member 'FVehicleTankTransmissionData::GearSwitchTime' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, GearAutoBoxLatency) == 0x000008, "Member 'FVehicleTankTransmissionData::GearAutoBoxLatency' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, FinalRatio) == 0x00000C, "Member 'FVehicleTankTransmissionData::FinalRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, ForwardGears) == 0x000010, "Member 'FVehicleTankTransmissionData::ForwardGears' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, BackwardGears) == 0x000020, "Member 'FVehicleTankTransmissionData::BackwardGears' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, ReverseGearRatio) == 0x000030, "Member 'FVehicleTankTransmissionData::ReverseGearRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, NeutralGearUpRatio) == 0x000034, "Member 'FVehicleTankTransmissionData::NeutralGearUpRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, NeutralGearDownRatio) == 0x000038, "Member 'FVehicleTankTransmissionData::NeutralGearDownRatio' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, ClutchStrength) == 0x00003C, "Member 'FVehicleTankTransmissionData::ClutchStrength' has a wrong offset!");
static_assert(offsetof(FVehicleTankTransmissionData, bHasNeutralSteer) == 0x000040, "Member 'FVehicleTankTransmissionData::bHasNeutralSteer' has a wrong offset!");

// ScriptStruct Squad.SQUnderwaterBoneData
// 0x0028 (0x0028 - 0x0000)
struct FSQUnderwaterBoneData final
{
public:
	class FName                                   HeadHeightUnderwaterSocketName;                    // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChestHeightUnderwaterSocketName;                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HipHeightUnderwaterSocketName;                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   KneeHeightUnderwaterSocketName;                    // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootHeightUnderwaterSocketName;                    // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQUnderwaterBoneData) == 0x000004, "Wrong alignment on FSQUnderwaterBoneData");
static_assert(sizeof(FSQUnderwaterBoneData) == 0x000028, "Wrong size on FSQUnderwaterBoneData");
static_assert(offsetof(FSQUnderwaterBoneData, HeadHeightUnderwaterSocketName) == 0x000000, "Member 'FSQUnderwaterBoneData::HeadHeightUnderwaterSocketName' has a wrong offset!");
static_assert(offsetof(FSQUnderwaterBoneData, ChestHeightUnderwaterSocketName) == 0x000008, "Member 'FSQUnderwaterBoneData::ChestHeightUnderwaterSocketName' has a wrong offset!");
static_assert(offsetof(FSQUnderwaterBoneData, HipHeightUnderwaterSocketName) == 0x000010, "Member 'FSQUnderwaterBoneData::HipHeightUnderwaterSocketName' has a wrong offset!");
static_assert(offsetof(FSQUnderwaterBoneData, KneeHeightUnderwaterSocketName) == 0x000018, "Member 'FSQUnderwaterBoneData::KneeHeightUnderwaterSocketName' has a wrong offset!");
static_assert(offsetof(FSQUnderwaterBoneData, FootHeightUnderwaterSocketName) == 0x000020, "Member 'FSQUnderwaterBoneData::FootHeightUnderwaterSocketName' has a wrong offset!");

// ScriptStruct Squad.SQAdjustableSightMontageSet
// 0x0040 (0x0040 - 0x0000)
struct FSQAdjustableSightMontageSet final
{
public:
	class UAnimMontage*                           BaseAdjustAds3pMontage;                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AdjustAdsTransition3pMontage;                      // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AdjustFromAdsTransition3pMontage;                  // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LineOfFireAngle;                                   // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C57[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DistanceText;                                      // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQAdjustableSightMontageSet) == 0x000008, "Wrong alignment on FSQAdjustableSightMontageSet");
static_assert(sizeof(FSQAdjustableSightMontageSet) == 0x000040, "Wrong size on FSQAdjustableSightMontageSet");
static_assert(offsetof(FSQAdjustableSightMontageSet, BaseAdjustAds3pMontage) == 0x000000, "Member 'FSQAdjustableSightMontageSet::BaseAdjustAds3pMontage' has a wrong offset!");
static_assert(offsetof(FSQAdjustableSightMontageSet, AdjustAdsTransition3pMontage) == 0x000008, "Member 'FSQAdjustableSightMontageSet::AdjustAdsTransition3pMontage' has a wrong offset!");
static_assert(offsetof(FSQAdjustableSightMontageSet, AdjustFromAdsTransition3pMontage) == 0x000010, "Member 'FSQAdjustableSightMontageSet::AdjustFromAdsTransition3pMontage' has a wrong offset!");
static_assert(offsetof(FSQAdjustableSightMontageSet, LineOfFireAngle) == 0x000018, "Member 'FSQAdjustableSightMontageSet::LineOfFireAngle' has a wrong offset!");
static_assert(offsetof(FSQAdjustableSightMontageSet, DistanceText) == 0x000028, "Member 'FSQAdjustableSightMontageSet::DistanceText' has a wrong offset!");

// ScriptStruct Squad.SQMarkerTimestamps
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSQMarkerTimestamps final
{
public:
	uint8                                         Pad_C58[0x8];                                      // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQMarkerTimestamps) == 0x000004, "Wrong alignment on FSQMarkerTimestamps");
static_assert(sizeof(FSQMarkerTimestamps) == 0x000008, "Wrong size on FSQMarkerTimestamps");

// ScriptStruct Squad.SQDraggableBone
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FSQDraggableBone final
{
public:
	uint8                                         Pad_C59[0xC];                                      // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQDraggableBone) == 0x000004, "Wrong alignment on FSQDraggableBone");
static_assert(sizeof(FSQDraggableBone) == 0x00000C, "Wrong size on FSQDraggableBone");

// ScriptStruct Squad.SQFireTeam
// 0x0018 (0x0018 - 0x0000)
struct FSQFireTeam final
{
public:
	TArray<class ASQPlayerController*>            Players;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5A[0x8];                                      // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQFireTeam) == 0x000008, "Wrong alignment on FSQFireTeam");
static_assert(sizeof(FSQFireTeam) == 0x000018, "Wrong size on FSQFireTeam");
static_assert(offsetof(FSQFireTeam, Players) == 0x000000, "Member 'FSQFireTeam::Players' has a wrong offset!");

// ScriptStruct Squad.SQMapMarkerGameplayData
// 0x0038 (0x0038 - 0x0000)
struct FSQMapMarkerGameplayData final
{
public:
	int32                                         SquadId;                                           // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       TeamId;                                            // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5B[0x3];                                      // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireTeamId;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    LocationVector;                                    // 0x000C(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    DistanceRotationVector;                            // 0x0018(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5C[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMapMarkerDataAsset*                  MapMarkerDataAsset;                                // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UniqueID;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5D[0x3];                                      // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CreationTime;                                      // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMapMarkerGameplayData) == 0x000008, "Wrong alignment on FSQMapMarkerGameplayData");
static_assert(sizeof(FSQMapMarkerGameplayData) == 0x000038, "Wrong size on FSQMapMarkerGameplayData");
static_assert(offsetof(FSQMapMarkerGameplayData, SquadId) == 0x000000, "Member 'FSQMapMarkerGameplayData::SquadId' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerGameplayData, TeamId) == 0x000004, "Member 'FSQMapMarkerGameplayData::TeamId' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerGameplayData, FireTeamId) == 0x000008, "Member 'FSQMapMarkerGameplayData::FireTeamId' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerGameplayData, LocationVector) == 0x00000C, "Member 'FSQMapMarkerGameplayData::LocationVector' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerGameplayData, DistanceRotationVector) == 0x000018, "Member 'FSQMapMarkerGameplayData::DistanceRotationVector' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerGameplayData, MapMarkerDataAsset) == 0x000028, "Member 'FSQMapMarkerGameplayData::MapMarkerDataAsset' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerGameplayData, UniqueID) == 0x000030, "Member 'FSQMapMarkerGameplayData::UniqueID' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerGameplayData, CreationTime) == 0x000034, "Member 'FSQMapMarkerGameplayData::CreationTime' has a wrong offset!");

// ScriptStruct Squad.MovePacket
// 0x0038 (0x0038 - 0x0000)
struct FMovePacket final
{
public:
	uint32                                        UniqueID;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5E[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 OldMove;                                           // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 NewMove;                                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 PendingMove;                                       // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovePacket) == 0x000008, "Wrong alignment on FMovePacket");
static_assert(sizeof(FMovePacket) == 0x000038, "Wrong size on FMovePacket");
static_assert(offsetof(FMovePacket, UniqueID) == 0x000000, "Member 'FMovePacket::UniqueID' has a wrong offset!");
static_assert(offsetof(FMovePacket, OldMove) == 0x000008, "Member 'FMovePacket::OldMove' has a wrong offset!");
static_assert(offsetof(FMovePacket, NewMove) == 0x000018, "Member 'FMovePacket::NewMove' has a wrong offset!");
static_assert(offsetof(FMovePacket, PendingMove) == 0x000028, "Member 'FMovePacket::PendingMove' has a wrong offset!");

// ScriptStruct Squad.SQDraggingData
// 0x0010 (0x0010 - 0x0000)
struct FSQDraggingData final
{
public:
	ESQDraggingStatus                             DraggingStatus;                                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5F[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DraggedBoneIndex;                                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSoldier*                             OtherSoldier;                                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQDraggingData) == 0x000008, "Wrong alignment on FSQDraggingData");
static_assert(sizeof(FSQDraggingData) == 0x000010, "Wrong size on FSQDraggingData");
static_assert(offsetof(FSQDraggingData, DraggingStatus) == 0x000000, "Member 'FSQDraggingData::DraggingStatus' has a wrong offset!");
static_assert(offsetof(FSQDraggingData, DraggedBoneIndex) == 0x000004, "Member 'FSQDraggingData::DraggedBoneIndex' has a wrong offset!");
static_assert(offsetof(FSQDraggingData, OtherSoldier) == 0x000008, "Member 'FSQDraggingData::OtherSoldier' has a wrong offset!");

// ScriptStruct Squad.SQBlueprintLoginResult
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSQBlueprintLoginResult final
{
public:
	uint8                                         Pad_C60[0x10];                                     // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQBlueprintLoginResult) == 0x000008, "Wrong alignment on FSQBlueprintLoginResult");
static_assert(sizeof(FSQBlueprintLoginResult) == 0x000010, "Wrong size on FSQBlueprintLoginResult");

// ScriptStruct Squad.SQBoneHitSound
// 0x0010 (0x0010 - 0x0000)
struct FSQBoneHitSound final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              HitSound;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQBoneHitSound) == 0x000008, "Wrong alignment on FSQBoneHitSound");
static_assert(sizeof(FSQBoneHitSound) == 0x000010, "Wrong size on FSQBoneHitSound");
static_assert(offsetof(FSQBoneHitSound, BoneName) == 0x000000, "Member 'FSQBoneHitSound::BoneName' has a wrong offset!");
static_assert(offsetof(FSQBoneHitSound, HitSound) == 0x000008, "Member 'FSQBoneHitSound::HitSound' has a wrong offset!");

// ScriptStruct Squad.SQLeaningConfig
// 0x0010 (0x0010 - 0x0000)
struct FSQLeaningConfig final
{
public:
	float                                         MaxLeanAmount;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLeanAmountWhileMoving;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanTime;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeanResetTime;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQLeaningConfig) == 0x000004, "Wrong alignment on FSQLeaningConfig");
static_assert(sizeof(FSQLeaningConfig) == 0x000010, "Wrong size on FSQLeaningConfig");
static_assert(offsetof(FSQLeaningConfig, MaxLeanAmount) == 0x000000, "Member 'FSQLeaningConfig::MaxLeanAmount' has a wrong offset!");
static_assert(offsetof(FSQLeaningConfig, MaxLeanAmountWhileMoving) == 0x000004, "Member 'FSQLeaningConfig::MaxLeanAmountWhileMoving' has a wrong offset!");
static_assert(offsetof(FSQLeaningConfig, LeanTime) == 0x000008, "Member 'FSQLeaningConfig::LeanTime' has a wrong offset!");
static_assert(offsetof(FSQLeaningConfig, LeanResetTime) == 0x00000C, "Member 'FSQLeaningConfig::LeanResetTime' has a wrong offset!");

// ScriptStruct Squad.SQMapMarkerFastArraySerializerItem
// 0x0044 (0x0050 - 0x000C)
struct FSQMapMarkerFastArraySerializerItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C61[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQMapMarkerGameplayData               MarkerGameplayData;                                // 0x0010(0x0038)(NoDestructor, NativeAccessSpecifierPublic)
	struct FSQMarkerTimestamps                    AssignedTimestamp;                                 // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMapMarkerFastArraySerializerItem) == 0x000008, "Wrong alignment on FSQMapMarkerFastArraySerializerItem");
static_assert(sizeof(FSQMapMarkerFastArraySerializerItem) == 0x000050, "Wrong size on FSQMapMarkerFastArraySerializerItem");
static_assert(offsetof(FSQMapMarkerFastArraySerializerItem, MarkerGameplayData) == 0x000010, "Member 'FSQMapMarkerFastArraySerializerItem::MarkerGameplayData' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerFastArraySerializerItem, AssignedTimestamp) == 0x000048, "Member 'FSQMapMarkerFastArraySerializerItem::AssignedTimestamp' has a wrong offset!");

// ScriptStruct Squad.SQTakeHitInfo
// 0x0138 (0x0138 - 0x0000)
struct FSQTakeHitInfo final
{
public:
	float                                         ActualDamage;                                      // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTimestamp;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 DamageTypeClass;                                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ASQSoldier>              PawnInstigator;                                    // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  DamageCauser;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageEventClassID;                                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bKilled : 1;                                       // 0x0024(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWounded : 1;                                      // 0x0024(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEjectedFromVehicle : 1;                           // 0x0024(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C62[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           GeneralDamageEvent;                                // 0x0028(0x0010)(Protected, NativeAccessSpecifierProtected)
	struct FPointDamageEvent                      PointDamageEvent;                                  // 0x0038(0x00A8)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FRadialDamageEvent                     RadialDamageEvent;                                 // 0x00E0(0x0040)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPhysicalMaterial>       PackagedHitResultPhysMaterial;                     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  PackagedHitResultActor;                            // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPrimitiveComponent>     PackagedHitResultComponent;                        // 0x0130(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSQTakeHitInfo) == 0x000008, "Wrong alignment on FSQTakeHitInfo");
static_assert(sizeof(FSQTakeHitInfo) == 0x000138, "Wrong size on FSQTakeHitInfo");
static_assert(offsetof(FSQTakeHitInfo, ActualDamage) == 0x000000, "Member 'FSQTakeHitInfo::ActualDamage' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, ServerTimestamp) == 0x000004, "Member 'FSQTakeHitInfo::ServerTimestamp' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, DamageTypeClass) == 0x000008, "Member 'FSQTakeHitInfo::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, PawnInstigator) == 0x000010, "Member 'FSQTakeHitInfo::PawnInstigator' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, DamageCauser) == 0x000018, "Member 'FSQTakeHitInfo::DamageCauser' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, DamageEventClassID) == 0x000020, "Member 'FSQTakeHitInfo::DamageEventClassID' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, GeneralDamageEvent) == 0x000028, "Member 'FSQTakeHitInfo::GeneralDamageEvent' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, PointDamageEvent) == 0x000038, "Member 'FSQTakeHitInfo::PointDamageEvent' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, RadialDamageEvent) == 0x0000E0, "Member 'FSQTakeHitInfo::RadialDamageEvent' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, PackagedHitResultPhysMaterial) == 0x000120, "Member 'FSQTakeHitInfo::PackagedHitResultPhysMaterial' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, PackagedHitResultActor) == 0x000128, "Member 'FSQTakeHitInfo::PackagedHitResultActor' has a wrong offset!");
static_assert(offsetof(FSQTakeHitInfo, PackagedHitResultComponent) == 0x000130, "Member 'FSQTakeHitInfo::PackagedHitResultComponent' has a wrong offset!");

// ScriptStruct Squad.SQUsableWidgetData
// 0x0038 (0x0038 - 0x0000)
struct FSQUsableWidgetData final
{
public:
	class FText                                   UsableText;                                        // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             CustomTexture;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           CustomColor;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQInteractableWidgetItem>  InteractWidgetItemClass;                           // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQUsableWidgetData) == 0x000008, "Wrong alignment on FSQUsableWidgetData");
static_assert(sizeof(FSQUsableWidgetData) == 0x000038, "Wrong size on FSQUsableWidgetData");
static_assert(offsetof(FSQUsableWidgetData, UsableText) == 0x000000, "Member 'FSQUsableWidgetData::UsableText' has a wrong offset!");
static_assert(offsetof(FSQUsableWidgetData, CustomTexture) == 0x000018, "Member 'FSQUsableWidgetData::CustomTexture' has a wrong offset!");
static_assert(offsetof(FSQUsableWidgetData, CustomColor) == 0x000020, "Member 'FSQUsableWidgetData::CustomColor' has a wrong offset!");
static_assert(offsetof(FSQUsableWidgetData, InteractWidgetItemClass) == 0x000030, "Member 'FSQUsableWidgetData::InteractWidgetItemClass' has a wrong offset!");

// ScriptStruct Squad.SQUsableData
// 0x0040 (0x0040 - 0x0000)
struct FSQUsableData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSQUsableWidgetData>            InteractionData;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class USQInteractableWidgetList>  InteractWidgetClass;                               // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DrawLocationOffset;                                // 0x0030(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQInteractVisibility                         InteractVisiblity;                                 // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C63[0x3];                                      // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQUsableData) == 0x000008, "Wrong alignment on FSQUsableData");
static_assert(sizeof(FSQUsableData) == 0x000040, "Wrong size on FSQUsableData");
static_assert(offsetof(FSQUsableData, DisplayName) == 0x000000, "Member 'FSQUsableData::DisplayName' has a wrong offset!");
static_assert(offsetof(FSQUsableData, InteractionData) == 0x000018, "Member 'FSQUsableData::InteractionData' has a wrong offset!");
static_assert(offsetof(FSQUsableData, InteractWidgetClass) == 0x000028, "Member 'FSQUsableData::InteractWidgetClass' has a wrong offset!");
static_assert(offsetof(FSQUsableData, DrawLocationOffset) == 0x000030, "Member 'FSQUsableData::DrawLocationOffset' has a wrong offset!");
static_assert(offsetof(FSQUsableData, InteractVisiblity) == 0x00003C, "Member 'FSQUsableData::InteractVisiblity' has a wrong offset!");

// ScriptStruct Squad.SQWeaponData
// 0x00C8 (0x00C8 - 0x0000)
struct FSQWeaponData final
{
public:
	bool                                          bInfiniteAmmo;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInfiniteMags;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C64[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxMags;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundsPerMag;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRoundInChamber;                              // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowSingleLoad;                                  // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C65[0x2];                                      // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Firemodes;                                         // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TimeBetweenShots;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBetweenSingleShots;                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanReloadWhenEquipping;                           // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateProjectileOnServer;                         // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C66[0x2];                                      // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TacticalReloadDuration;                            // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinishReloadGracePeriod;                           // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryReloadDuration;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TacticalReloadBipodDuration;                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadDryBipodDuration;                            // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ADSPostTransitionRatio;                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowZoom;                                        // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAverageFireRate;                                  // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetBurstOnTriggerRelease;                       // 0x0046(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C67[0x1];                                      // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASQProjectile>              ProjectileClass;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundsBetweenTracer;                               // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C68[0x4];                                      // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASQProjectile>              TracerProjectileClass;                             // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MuzzleVelocity;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageToApply;                                  // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToStartDamageFallOff;                          // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToStartDamageFallOff;                      // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFallOffRate;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDamageToApply;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DamageFalloffCurve;                                // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBarrelSocketOnSoldier;                          // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C69[0x3];                                      // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BarrelSocketName;                                  // 0x0084(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MOA;                                               // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MOACurve;                                          // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumTraceDistance;                              // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WallHackCheckTraceDistance;                        // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectileCameraRelativeOffsetMultiplier;          // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMagMustBeEmptyForVehicleRearm;                    // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRearmOnlyIfCurrentMagazineIsEmpty;                // 0x00A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRearmCanFillCurrentMagazine;                      // 0x00A6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6A[0x1];                                      // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumTimeBetweenRearms;                          // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRearmOnlyOneMagazine;                             // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRearmOnlyXRoundsOfAmmo;                           // 0x00AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6B[0x2];                                      // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RearmRoundsOfAmmoPerRearm;                         // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorPenetrationDepthMillimeters;                  // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ArmorPenetrationDepthCurve;                        // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistanceAfterPenetrationMeters;               // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEmptyMagToReload;                                 // 0x00C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6C[0x3];                                      // 0x00C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQWeaponData) == 0x000008, "Wrong alignment on FSQWeaponData");
static_assert(sizeof(FSQWeaponData) == 0x0000C8, "Wrong size on FSQWeaponData");
static_assert(offsetof(FSQWeaponData, bInfiniteAmmo) == 0x000000, "Member 'FSQWeaponData::bInfiniteAmmo' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bInfiniteMags) == 0x000001, "Member 'FSQWeaponData::bInfiniteMags' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, MaxMags) == 0x000004, "Member 'FSQWeaponData::MaxMags' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, RoundsPerMag) == 0x000008, "Member 'FSQWeaponData::RoundsPerMag' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bAllowRoundInChamber) == 0x00000C, "Member 'FSQWeaponData::bAllowRoundInChamber' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bAllowSingleLoad) == 0x00000D, "Member 'FSQWeaponData::bAllowSingleLoad' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, Firemodes) == 0x000010, "Member 'FSQWeaponData::Firemodes' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, TimeBetweenShots) == 0x000020, "Member 'FSQWeaponData::TimeBetweenShots' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, TimeBetweenSingleShots) == 0x000024, "Member 'FSQWeaponData::TimeBetweenSingleShots' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bCanReloadWhenEquipping) == 0x000028, "Member 'FSQWeaponData::bCanReloadWhenEquipping' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bCreateProjectileOnServer) == 0x000029, "Member 'FSQWeaponData::bCreateProjectileOnServer' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, TacticalReloadDuration) == 0x00002C, "Member 'FSQWeaponData::TacticalReloadDuration' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, FinishReloadGracePeriod) == 0x000030, "Member 'FSQWeaponData::FinishReloadGracePeriod' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, DryReloadDuration) == 0x000034, "Member 'FSQWeaponData::DryReloadDuration' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, TacticalReloadBipodDuration) == 0x000038, "Member 'FSQWeaponData::TacticalReloadBipodDuration' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, ReloadDryBipodDuration) == 0x00003C, "Member 'FSQWeaponData::ReloadDryBipodDuration' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, ADSPostTransitionRatio) == 0x000040, "Member 'FSQWeaponData::ADSPostTransitionRatio' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bAllowZoom) == 0x000044, "Member 'FSQWeaponData::bAllowZoom' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bAverageFireRate) == 0x000045, "Member 'FSQWeaponData::bAverageFireRate' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bResetBurstOnTriggerRelease) == 0x000046, "Member 'FSQWeaponData::bResetBurstOnTriggerRelease' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, ProjectileClass) == 0x000048, "Member 'FSQWeaponData::ProjectileClass' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, RoundsBetweenTracer) == 0x000050, "Member 'FSQWeaponData::RoundsBetweenTracer' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, TracerProjectileClass) == 0x000058, "Member 'FSQWeaponData::TracerProjectileClass' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, MuzzleVelocity) == 0x000060, "Member 'FSQWeaponData::MuzzleVelocity' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, MaxDamageToApply) == 0x000064, "Member 'FSQWeaponData::MaxDamageToApply' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, TimeToStartDamageFallOff) == 0x000068, "Member 'FSQWeaponData::TimeToStartDamageFallOff' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, DistanceToStartDamageFallOff) == 0x00006C, "Member 'FSQWeaponData::DistanceToStartDamageFallOff' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, DamageFallOffRate) == 0x000070, "Member 'FSQWeaponData::DamageFallOffRate' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, MinDamageToApply) == 0x000074, "Member 'FSQWeaponData::MinDamageToApply' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, DamageFalloffCurve) == 0x000078, "Member 'FSQWeaponData::DamageFalloffCurve' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bIsBarrelSocketOnSoldier) == 0x000080, "Member 'FSQWeaponData::bIsBarrelSocketOnSoldier' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, BarrelSocketName) == 0x000084, "Member 'FSQWeaponData::BarrelSocketName' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, MOA) == 0x00008C, "Member 'FSQWeaponData::MOA' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, MOACurve) == 0x000090, "Member 'FSQWeaponData::MOACurve' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, MaximumTraceDistance) == 0x000098, "Member 'FSQWeaponData::MaximumTraceDistance' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, WallHackCheckTraceDistance) == 0x00009C, "Member 'FSQWeaponData::WallHackCheckTraceDistance' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, ProjectileCameraRelativeOffsetMultiplier) == 0x0000A0, "Member 'FSQWeaponData::ProjectileCameraRelativeOffsetMultiplier' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bMagMustBeEmptyForVehicleRearm) == 0x0000A4, "Member 'FSQWeaponData::bMagMustBeEmptyForVehicleRearm' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bRearmOnlyIfCurrentMagazineIsEmpty) == 0x0000A5, "Member 'FSQWeaponData::bRearmOnlyIfCurrentMagazineIsEmpty' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bRearmCanFillCurrentMagazine) == 0x0000A6, "Member 'FSQWeaponData::bRearmCanFillCurrentMagazine' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, MinimumTimeBetweenRearms) == 0x0000A8, "Member 'FSQWeaponData::MinimumTimeBetweenRearms' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bRearmOnlyOneMagazine) == 0x0000AC, "Member 'FSQWeaponData::bRearmOnlyOneMagazine' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bRearmOnlyXRoundsOfAmmo) == 0x0000AD, "Member 'FSQWeaponData::bRearmOnlyXRoundsOfAmmo' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, RearmRoundsOfAmmoPerRearm) == 0x0000B0, "Member 'FSQWeaponData::RearmRoundsOfAmmoPerRearm' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, ArmorPenetrationDepthMillimeters) == 0x0000B4, "Member 'FSQWeaponData::ArmorPenetrationDepthMillimeters' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, ArmorPenetrationDepthCurve) == 0x0000B8, "Member 'FSQWeaponData::ArmorPenetrationDepthCurve' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, TraceDistanceAfterPenetrationMeters) == 0x0000C0, "Member 'FSQWeaponData::TraceDistanceAfterPenetrationMeters' has a wrong offset!");
static_assert(offsetof(FSQWeaponData, bEmptyMagToReload) == 0x0000C4, "Member 'FSQWeaponData::bEmptyMagToReload' has a wrong offset!");

// ScriptStruct Squad.PlayerStateDataObject
// 0x0078 (0x0078 - 0x0000)
struct FPlayerStateDataObject final
{
public:
	int32                                         Lives;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumKills;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDeaths;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWoundeds;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWounds;                                         // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTeamkills;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealPoints;                                        // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevivedPoints;                                     // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamWorkScore;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObjectiveScore;                                    // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdmin;                                            // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDev;                                              // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQA;                                               // 0x002A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMember;                                           // 0x002B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommander;                                        // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6D[0x3];                                      // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireTeamIndex;                                     // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamPosition;                                  // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerNamePrefix;                                  // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               SupporterPatch;                                    // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               ClanPatch;                                         // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           EquippedItemSkins;                                 // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReplicationKey;                                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6E[0x4];                                      // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         Owner;                                             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerStateDataObject) == 0x000008, "Wrong alignment on FPlayerStateDataObject");
static_assert(sizeof(FPlayerStateDataObject) == 0x000078, "Wrong size on FPlayerStateDataObject");
static_assert(offsetof(FPlayerStateDataObject, Lives) == 0x000000, "Member 'FPlayerStateDataObject::Lives' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, NumKills) == 0x000004, "Member 'FPlayerStateDataObject::NumKills' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, NumDeaths) == 0x000008, "Member 'FPlayerStateDataObject::NumDeaths' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, NumWoundeds) == 0x00000C, "Member 'FPlayerStateDataObject::NumWoundeds' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, NumWounds) == 0x000010, "Member 'FPlayerStateDataObject::NumWounds' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, NumTeamkills) == 0x000014, "Member 'FPlayerStateDataObject::NumTeamkills' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, HealPoints) == 0x000018, "Member 'FPlayerStateDataObject::HealPoints' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, RevivedPoints) == 0x00001C, "Member 'FPlayerStateDataObject::RevivedPoints' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, TeamWorkScore) == 0x000020, "Member 'FPlayerStateDataObject::TeamWorkScore' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, ObjectiveScore) == 0x000024, "Member 'FPlayerStateDataObject::ObjectiveScore' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, bAdmin) == 0x000028, "Member 'FPlayerStateDataObject::bAdmin' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, bDev) == 0x000029, "Member 'FPlayerStateDataObject::bDev' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, bQA) == 0x00002A, "Member 'FPlayerStateDataObject::bQA' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, bMember) == 0x00002B, "Member 'FPlayerStateDataObject::bMember' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, bCommander) == 0x00002C, "Member 'FPlayerStateDataObject::bCommander' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, FireTeamIndex) == 0x000030, "Member 'FPlayerStateDataObject::FireTeamIndex' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, FireTeamPosition) == 0x000034, "Member 'FPlayerStateDataObject::FireTeamPosition' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, PlayerNamePrefix) == 0x000038, "Member 'FPlayerStateDataObject::PlayerNamePrefix' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, SupporterPatch) == 0x000048, "Member 'FPlayerStateDataObject::SupporterPatch' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, ClanPatch) == 0x000050, "Member 'FPlayerStateDataObject::ClanPatch' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, EquippedItemSkins) == 0x000058, "Member 'FPlayerStateDataObject::EquippedItemSkins' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, ReplicationKey) == 0x000068, "Member 'FPlayerStateDataObject::ReplicationKey' has a wrong offset!");
static_assert(offsetof(FPlayerStateDataObject, Owner) == 0x000070, "Member 'FPlayerStateDataObject::Owner' has a wrong offset!");

// ScriptStruct Squad.SQPhysMatVehicleFXData
// 0x0064 (0x0064 - 0x0000)
struct FSQPhysMatVehicleFXData final
{
public:
	float                                         Asphalt;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dirt;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Grass;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravel;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Metal;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mud;                                               // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sand;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Snow;                                              // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowWet;                                           // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TallGrass;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Water;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wood;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DustColor;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DustLifetime;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DustSize;                                          // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebrisColor;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebrisSpawnRate;                                   // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQPhysMatVehicleFXData) == 0x000004, "Wrong alignment on FSQPhysMatVehicleFXData");
static_assert(sizeof(FSQPhysMatVehicleFXData) == 0x000064, "Wrong size on FSQPhysMatVehicleFXData");
static_assert(offsetof(FSQPhysMatVehicleFXData, Asphalt) == 0x000000, "Member 'FSQPhysMatVehicleFXData::Asphalt' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, Dirt) == 0x000004, "Member 'FSQPhysMatVehicleFXData::Dirt' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, Grass) == 0x000008, "Member 'FSQPhysMatVehicleFXData::Grass' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, Gravel) == 0x00000C, "Member 'FSQPhysMatVehicleFXData::Gravel' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, Metal) == 0x000010, "Member 'FSQPhysMatVehicleFXData::Metal' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, Mud) == 0x000014, "Member 'FSQPhysMatVehicleFXData::Mud' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, Sand) == 0x000018, "Member 'FSQPhysMatVehicleFXData::Sand' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, Snow) == 0x00001C, "Member 'FSQPhysMatVehicleFXData::Snow' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, SnowWet) == 0x000020, "Member 'FSQPhysMatVehicleFXData::SnowWet' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, TallGrass) == 0x000024, "Member 'FSQPhysMatVehicleFXData::TallGrass' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, Water) == 0x000028, "Member 'FSQPhysMatVehicleFXData::Water' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, Wood) == 0x00002C, "Member 'FSQPhysMatVehicleFXData::Wood' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, DustColor) == 0x000030, "Member 'FSQPhysMatVehicleFXData::DustColor' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, DustLifetime) == 0x000040, "Member 'FSQPhysMatVehicleFXData::DustLifetime' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, DustSize) == 0x000044, "Member 'FSQPhysMatVehicleFXData::DustSize' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, DebrisColor) == 0x000050, "Member 'FSQPhysMatVehicleFXData::DebrisColor' has a wrong offset!");
static_assert(offsetof(FSQPhysMatVehicleFXData, DebrisSpawnRate) == 0x000060, "Member 'FSQPhysMatVehicleFXData::DebrisSpawnRate' has a wrong offset!");

// ScriptStruct Squad.SQDynamicEasingStruct
// 0x0014 (0x0014 - 0x0000)
struct FSQDynamicEasingStruct final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Position;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OppositeAcceleration;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQDynamicEasingStruct) == 0x000004, "Wrong alignment on FSQDynamicEasingStruct");
static_assert(sizeof(FSQDynamicEasingStruct) == 0x000014, "Wrong size on FSQDynamicEasingStruct");
static_assert(offsetof(FSQDynamicEasingStruct, Target) == 0x000000, "Member 'FSQDynamicEasingStruct::Target' has a wrong offset!");
static_assert(offsetof(FSQDynamicEasingStruct, Position) == 0x000004, "Member 'FSQDynamicEasingStruct::Position' has a wrong offset!");
static_assert(offsetof(FSQDynamicEasingStruct, Velocity) == 0x000008, "Member 'FSQDynamicEasingStruct::Velocity' has a wrong offset!");
static_assert(offsetof(FSQDynamicEasingStruct, Acceleration) == 0x00000C, "Member 'FSQDynamicEasingStruct::Acceleration' has a wrong offset!");
static_assert(offsetof(FSQDynamicEasingStruct, OppositeAcceleration) == 0x000010, "Member 'FSQDynamicEasingStruct::OppositeAcceleration' has a wrong offset!");

// ScriptStruct Squad.SQSpringInterpStruct3D
// 0x0030 (0x0030 - 0x0000)
struct FSQSpringInterpStruct3D final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Damping;                                           // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MinLimits;                                         // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxLimits;                                         // 0x0024(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSpringInterpStruct3D) == 0x000004, "Wrong alignment on FSQSpringInterpStruct3D");
static_assert(sizeof(FSQSpringInterpStruct3D) == 0x000030, "Wrong size on FSQSpringInterpStruct3D");
static_assert(offsetof(FSQSpringInterpStruct3D, Position) == 0x000000, "Member 'FSQSpringInterpStruct3D::Position' has a wrong offset!");
static_assert(offsetof(FSQSpringInterpStruct3D, Damping) == 0x00000C, "Member 'FSQSpringInterpStruct3D::Damping' has a wrong offset!");
static_assert(offsetof(FSQSpringInterpStruct3D, MinLimits) == 0x000018, "Member 'FSQSpringInterpStruct3D::MinLimits' has a wrong offset!");
static_assert(offsetof(FSQSpringInterpStruct3D, MaxLimits) == 0x000024, "Member 'FSQSpringInterpStruct3D::MaxLimits' has a wrong offset!");

// ScriptStruct Squad.SQAvailabilityState_Role
// 0x0058 (0x0058 - 0x0000)
struct FSQAvailabilityState_Role final
{
public:
	struct FSQAvailabilityState                   Status;                                            // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class USQAvailability_Role*                   Availability;                                      // 0x0048(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwappableWithCurrent;                              // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6F[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQAvailabilityState_Role) == 0x000008, "Wrong alignment on FSQAvailabilityState_Role");
static_assert(sizeof(FSQAvailabilityState_Role) == 0x000058, "Wrong size on FSQAvailabilityState_Role");
static_assert(offsetof(FSQAvailabilityState_Role, Status) == 0x000000, "Member 'FSQAvailabilityState_Role::Status' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState_Role, Availability) == 0x000048, "Member 'FSQAvailabilityState_Role::Availability' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState_Role, SwappableWithCurrent) == 0x000050, "Member 'FSQAvailabilityState_Role::SwappableWithCurrent' has a wrong offset!");

// ScriptStruct Squad.SQFlagScoreInfo
// 0x001C (0x001C - 0x0000)
struct FSQFlagScoreInfo final
{
public:
	int32                                         ScoreForFlagNeutralize;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreForCapture;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreForDefense;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreOnCaptureTick;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreOnDefenseTick;                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQKillReportChannel                          CaptureReportChannel;                              // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQKillReportChannel                          NeutralizeReportChannel;                           // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQKillReportChannel                          DefenseReportChannel;                              // 0x0016(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayerOnNeutral;                            // 0x0017(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayerOnCapture;                            // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayerOnDefense;                            // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayerOnTick;                               // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C70[0x1];                                      // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQFlagScoreInfo) == 0x000004, "Wrong alignment on FSQFlagScoreInfo");
static_assert(sizeof(FSQFlagScoreInfo) == 0x00001C, "Wrong size on FSQFlagScoreInfo");
static_assert(offsetof(FSQFlagScoreInfo, ScoreForFlagNeutralize) == 0x000000, "Member 'FSQFlagScoreInfo::ScoreForFlagNeutralize' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, ScoreForCapture) == 0x000004, "Member 'FSQFlagScoreInfo::ScoreForCapture' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, ScoreForDefense) == 0x000008, "Member 'FSQFlagScoreInfo::ScoreForDefense' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, ScoreOnCaptureTick) == 0x00000C, "Member 'FSQFlagScoreInfo::ScoreOnCaptureTick' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, ScoreOnDefenseTick) == 0x000010, "Member 'FSQFlagScoreInfo::ScoreOnDefenseTick' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, CaptureReportChannel) == 0x000014, "Member 'FSQFlagScoreInfo::CaptureReportChannel' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, NeutralizeReportChannel) == 0x000015, "Member 'FSQFlagScoreInfo::NeutralizeReportChannel' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, DefenseReportChannel) == 0x000016, "Member 'FSQFlagScoreInfo::DefenseReportChannel' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, bNotifyPlayerOnNeutral) == 0x000017, "Member 'FSQFlagScoreInfo::bNotifyPlayerOnNeutral' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, bNotifyPlayerOnCapture) == 0x000018, "Member 'FSQFlagScoreInfo::bNotifyPlayerOnCapture' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, bNotifyPlayerOnDefense) == 0x000019, "Member 'FSQFlagScoreInfo::bNotifyPlayerOnDefense' has a wrong offset!");
static_assert(offsetof(FSQFlagScoreInfo, bNotifyPlayerOnTick) == 0x00001A, "Member 'FSQFlagScoreInfo::bNotifyPlayerOnTick' has a wrong offset!");

// ScriptStruct Squad.BlueprintOnlineItem
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBlueprintOnlineItem final
{
public:
	uint8                                         Pad_C71[0x10];                                     // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlueprintOnlineItem) == 0x000008, "Wrong alignment on FBlueprintOnlineItem");
static_assert(sizeof(FBlueprintOnlineItem) == 0x000010, "Wrong size on FBlueprintOnlineItem");

// ScriptStruct Squad.SQButtonStyle
// 0x0080 (0x0080 - 0x0000)
struct FSQButtonStyle final
{
public:
	bool                                          bUseStyling;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseImageStyling;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C72[0x6];                                      // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             NormalImage;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             HoveredImage;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PressedImage;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DisabledImage;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTintStyling;                                   // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseColorBlending;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C73[0x2];                                      // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           NormalTint;                                        // 0x002C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HoveredTint;                                       // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PressedTint;                                       // 0x004C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DisabledTint;                                      // 0x005C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C74[0x4];                                      // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              PressedSoundCue;                                   // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              HoveredSoundCue;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQButtonStyle) == 0x000008, "Wrong alignment on FSQButtonStyle");
static_assert(sizeof(FSQButtonStyle) == 0x000080, "Wrong size on FSQButtonStyle");
static_assert(offsetof(FSQButtonStyle, bUseStyling) == 0x000000, "Member 'FSQButtonStyle::bUseStyling' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, bUseImageStyling) == 0x000001, "Member 'FSQButtonStyle::bUseImageStyling' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, NormalImage) == 0x000008, "Member 'FSQButtonStyle::NormalImage' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, HoveredImage) == 0x000010, "Member 'FSQButtonStyle::HoveredImage' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, PressedImage) == 0x000018, "Member 'FSQButtonStyle::PressedImage' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, DisabledImage) == 0x000020, "Member 'FSQButtonStyle::DisabledImage' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, bUseTintStyling) == 0x000028, "Member 'FSQButtonStyle::bUseTintStyling' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, bUseColorBlending) == 0x000029, "Member 'FSQButtonStyle::bUseColorBlending' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, NormalTint) == 0x00002C, "Member 'FSQButtonStyle::NormalTint' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, HoveredTint) == 0x00003C, "Member 'FSQButtonStyle::HoveredTint' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, PressedTint) == 0x00004C, "Member 'FSQButtonStyle::PressedTint' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, DisabledTint) == 0x00005C, "Member 'FSQButtonStyle::DisabledTint' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, PressedSoundCue) == 0x000070, "Member 'FSQButtonStyle::PressedSoundCue' has a wrong offset!");
static_assert(offsetof(FSQButtonStyle, HoveredSoundCue) == 0x000078, "Member 'FSQButtonStyle::HoveredSoundCue' has a wrong offset!");

// ScriptStruct Squad.SQAvailabilityState_Deployable
// 0x0050 (0x0050 - 0x0000)
struct FSQAvailabilityState_Deployable final
{
public:
	struct FSQAvailabilityState                   Status;                                            // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class USQAvailability_Deployable*             Availability;                                      // 0x0048(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQAvailabilityState_Deployable) == 0x000008, "Wrong alignment on FSQAvailabilityState_Deployable");
static_assert(sizeof(FSQAvailabilityState_Deployable) == 0x000050, "Wrong size on FSQAvailabilityState_Deployable");
static_assert(offsetof(FSQAvailabilityState_Deployable, Status) == 0x000000, "Member 'FSQAvailabilityState_Deployable::Status' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState_Deployable, Availability) == 0x000048, "Member 'FSQAvailabilityState_Deployable::Availability' has a wrong offset!");

// ScriptStruct Squad.ODKHardwareData
// 0x0028 (0x0030 - 0x0008)
struct FODKHardwareData final : public FODKAnalyticsDataInterface
{
public:
	class FString                                 Cpu;                                               // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Gpu;                                               // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        RamBytes;                                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FODKHardwareData) == 0x000008, "Wrong alignment on FODKHardwareData");
static_assert(sizeof(FODKHardwareData) == 0x000030, "Wrong size on FODKHardwareData");
static_assert(offsetof(FODKHardwareData, Cpu) == 0x000008, "Member 'FODKHardwareData::Cpu' has a wrong offset!");
static_assert(offsetof(FODKHardwareData, Gpu) == 0x000018, "Member 'FODKHardwareData::Gpu' has a wrong offset!");
static_assert(offsetof(FODKHardwareData, RamBytes) == 0x000028, "Member 'FODKHardwareData::RamBytes' has a wrong offset!");

// ScriptStruct Squad.SQVehicleSeatTransitionState
// 0x0020 (0x0020 - 0x0000)
struct FSQVehicleSeatTransitionState final
{
public:
	ESQSoldierSeatState                           SoldierSeatState;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C75[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionDamageMultipler;                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoldierCanTakeDirectRadialDamage;                 // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDetachSoldier;                               // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEjectDeadSoldier;                                 // 0x000A(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEjectIncappedSoldier;                             // 0x000B(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyPlayExteriorVehicleSounds;                    // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C76[0x3];                                      // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundMix*                              SoundMix;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQListenerType                               ListenerTypeOverride;                              // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C77[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQVehicleSeatTransitionState) == 0x000008, "Wrong alignment on FSQVehicleSeatTransitionState");
static_assert(sizeof(FSQVehicleSeatTransitionState) == 0x000020, "Wrong size on FSQVehicleSeatTransitionState");
static_assert(offsetof(FSQVehicleSeatTransitionState, SoldierSeatState) == 0x000000, "Member 'FSQVehicleSeatTransitionState::SoldierSeatState' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatTransitionState, CollisionDamageMultipler) == 0x000004, "Member 'FSQVehicleSeatTransitionState::CollisionDamageMultipler' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatTransitionState, bSoldierCanTakeDirectRadialDamage) == 0x000008, "Member 'FSQVehicleSeatTransitionState::bSoldierCanTakeDirectRadialDamage' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatTransitionState, bAllowDetachSoldier) == 0x000009, "Member 'FSQVehicleSeatTransitionState::bAllowDetachSoldier' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatTransitionState, bEjectDeadSoldier) == 0x00000A, "Member 'FSQVehicleSeatTransitionState::bEjectDeadSoldier' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatTransitionState, bEjectIncappedSoldier) == 0x00000B, "Member 'FSQVehicleSeatTransitionState::bEjectIncappedSoldier' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatTransitionState, bOnlyPlayExteriorVehicleSounds) == 0x00000C, "Member 'FSQVehicleSeatTransitionState::bOnlyPlayExteriorVehicleSounds' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatTransitionState, SoundMix) == 0x000010, "Member 'FSQVehicleSeatTransitionState::SoundMix' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatTransitionState, ListenerTypeOverride) == 0x000018, "Member 'FSQVehicleSeatTransitionState::ListenerTypeOverride' has a wrong offset!");

// ScriptStruct Squad.SQAvailabilityState_Action
// 0x0050 (0x0050 - 0x0000)
struct FSQAvailabilityState_Action final
{
public:
	struct FSQAvailabilityState                   Status;                                            // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class USQAvailability_Action*                 Availability;                                      // 0x0048(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQAvailabilityState_Action) == 0x000008, "Wrong alignment on FSQAvailabilityState_Action");
static_assert(sizeof(FSQAvailabilityState_Action) == 0x000050, "Wrong size on FSQAvailabilityState_Action");
static_assert(offsetof(FSQAvailabilityState_Action, Status) == 0x000000, "Member 'FSQAvailabilityState_Action::Status' has a wrong offset!");
static_assert(offsetof(FSQAvailabilityState_Action, Availability) == 0x000048, "Member 'FSQAvailabilityState_Action::Availability' has a wrong offset!");

// ScriptStruct Squad.ODKGameTimingData
// 0x0000 (0x0040 - 0x0040)
struct FODKGameTimingData : public FODKStatisticalData_Int
{
};
static_assert(alignof(FODKGameTimingData) == 0x000008, "Wrong alignment on FODKGameTimingData");
static_assert(sizeof(FODKGameTimingData) == 0x000040, "Wrong size on FODKGameTimingData");

// ScriptStruct Squad.SQCommandActionData
// 0x0018 (0x0018 - 0x0000)
struct FSQCommandActionData final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandActionData;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameTimeAtCreation;                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownTimeRemaining;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDestroyedDuringActive;                           // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C78[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQCommandActionData) == 0x000008, "Wrong alignment on FSQCommandActionData");
static_assert(sizeof(FSQCommandActionData) == 0x000018, "Wrong size on FSQCommandActionData");
static_assert(offsetof(FSQCommandActionData, CommandActionData) == 0x000000, "Member 'FSQCommandActionData::CommandActionData' has a wrong offset!");
static_assert(offsetof(FSQCommandActionData, GameTimeAtCreation) == 0x000008, "Member 'FSQCommandActionData::GameTimeAtCreation' has a wrong offset!");
static_assert(offsetof(FSQCommandActionData, CooldownTimeRemaining) == 0x00000C, "Member 'FSQCommandActionData::CooldownTimeRemaining' has a wrong offset!");
static_assert(offsetof(FSQCommandActionData, IsDestroyedDuringActive) == 0x000010, "Member 'FSQCommandActionData::IsDestroyedDuringActive' has a wrong offset!");

// ScriptStruct Squad.CommanderCategory
// 0x0020 (0x0020 - 0x0000)
struct FCommanderCategory final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CooldownDuration;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C79[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommanderCategory) == 0x000008, "Wrong alignment on FCommanderCategory");
static_assert(sizeof(FCommanderCategory) == 0x000020, "Wrong size on FCommanderCategory");
static_assert(offsetof(FCommanderCategory, Name) == 0x000000, "Member 'FCommanderCategory::Name' has a wrong offset!");
static_assert(offsetof(FCommanderCategory, CooldownDuration) == 0x000018, "Member 'FCommanderCategory::CooldownDuration' has a wrong offset!");

// ScriptStruct Squad.SQWeaponAmmoReductionConfig
// 0x0010 (0x0010 - 0x0000)
struct FSQWeaponAmmoReductionConfig final
{
public:
	TSubclassOf<class ASQWeapon>                  WeaponClass;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmmoPercentageToLeave;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectCurrentMagazine;                            // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectCurrentMagIfEquipped;                       // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7A[0x2];                                      // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQWeaponAmmoReductionConfig) == 0x000008, "Wrong alignment on FSQWeaponAmmoReductionConfig");
static_assert(sizeof(FSQWeaponAmmoReductionConfig) == 0x000010, "Wrong size on FSQWeaponAmmoReductionConfig");
static_assert(offsetof(FSQWeaponAmmoReductionConfig, WeaponClass) == 0x000000, "Member 'FSQWeaponAmmoReductionConfig::WeaponClass' has a wrong offset!");
static_assert(offsetof(FSQWeaponAmmoReductionConfig, AmmoPercentageToLeave) == 0x000008, "Member 'FSQWeaponAmmoReductionConfig::AmmoPercentageToLeave' has a wrong offset!");
static_assert(offsetof(FSQWeaponAmmoReductionConfig, bAffectCurrentMagazine) == 0x00000C, "Member 'FSQWeaponAmmoReductionConfig::bAffectCurrentMagazine' has a wrong offset!");
static_assert(offsetof(FSQWeaponAmmoReductionConfig, bAffectCurrentMagIfEquipped) == 0x00000D, "Member 'FSQWeaponAmmoReductionConfig::bAffectCurrentMagIfEquipped' has a wrong offset!");

// ScriptStruct Squad.SQInputState
// 0x0020 (0x0020 - 0x0000)
struct FSQInputState final
{
public:
	class FString                                 RequestReason;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            Focus;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGameInput;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayMouse;                                     // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUIInput;                                          // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7B[0x5];                                      // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQInputState) == 0x000008, "Wrong alignment on FSQInputState");
static_assert(sizeof(FSQInputState) == 0x000020, "Wrong size on FSQInputState");
static_assert(offsetof(FSQInputState, RequestReason) == 0x000000, "Member 'FSQInputState::RequestReason' has a wrong offset!");
static_assert(offsetof(FSQInputState, Focus) == 0x000010, "Member 'FSQInputState::Focus' has a wrong offset!");
static_assert(offsetof(FSQInputState, bGameInput) == 0x000018, "Member 'FSQInputState::bGameInput' has a wrong offset!");
static_assert(offsetof(FSQInputState, bDisplayMouse) == 0x000019, "Member 'FSQInputState::bDisplayMouse' has a wrong offset!");
static_assert(offsetof(FSQInputState, bUIInput) == 0x00001A, "Member 'FSQInputState::bUIInput' has a wrong offset!");

// ScriptStruct Squad.VehicleNWEngineData
// 0x00A0 (0x00A0 - 0x0000)
struct FVehicleNWEngineData final
{
public:
	struct FRuntimeFloatCurve                     TorqueCurve;                                       // 0x0000(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         MaxRPM;                                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MOI;                                               // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateFullThrottle;                           // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateZeroThrottleClutchEngaged;              // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateZeroThrottleClutchDisengaged;           // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7C[0x4];                                      // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleNWEngineData) == 0x000008, "Wrong alignment on FVehicleNWEngineData");
static_assert(sizeof(FVehicleNWEngineData) == 0x0000A0, "Wrong size on FVehicleNWEngineData");
static_assert(offsetof(FVehicleNWEngineData, TorqueCurve) == 0x000000, "Member 'FVehicleNWEngineData::TorqueCurve' has a wrong offset!");
static_assert(offsetof(FVehicleNWEngineData, MaxRPM) == 0x000088, "Member 'FVehicleNWEngineData::MaxRPM' has a wrong offset!");
static_assert(offsetof(FVehicleNWEngineData, MOI) == 0x00008C, "Member 'FVehicleNWEngineData::MOI' has a wrong offset!");
static_assert(offsetof(FVehicleNWEngineData, DampingRateFullThrottle) == 0x000090, "Member 'FVehicleNWEngineData::DampingRateFullThrottle' has a wrong offset!");
static_assert(offsetof(FVehicleNWEngineData, DampingRateZeroThrottleClutchEngaged) == 0x000094, "Member 'FVehicleNWEngineData::DampingRateZeroThrottleClutchEngaged' has a wrong offset!");
static_assert(offsetof(FVehicleNWEngineData, DampingRateZeroThrottleClutchDisengaged) == 0x000098, "Member 'FVehicleNWEngineData::DampingRateZeroThrottleClutchDisengaged' has a wrong offset!");

// ScriptStruct Squad.SQMessageBoxInfo
// 0x0080 (0x0080 - 0x0000)
struct FSQMessageBoxInfo final
{
public:
	struct FSlateFontInfo                         FontInfo;                                          // 0x0000(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQHUDMessage>                  Messages;                                          // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              MessageBoxLocation;                                // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumberOfMessagesToShow;                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MessagesLifetime;                                  // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MessagesFadeTime;                                  // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextHorizontalAlignment                    MessageHorizontalAlignment;                        // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextVerticalAlignment                      MessageVerticalAlignment;                          // 0x007D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScrollUp;                                         // 0x007E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7D[0x1];                                      // 0x007F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQMessageBoxInfo) == 0x000008, "Wrong alignment on FSQMessageBoxInfo");
static_assert(sizeof(FSQMessageBoxInfo) == 0x000080, "Wrong size on FSQMessageBoxInfo");
static_assert(offsetof(FSQMessageBoxInfo, FontInfo) == 0x000000, "Member 'FSQMessageBoxInfo::FontInfo' has a wrong offset!");
static_assert(offsetof(FSQMessageBoxInfo, Messages) == 0x000058, "Member 'FSQMessageBoxInfo::Messages' has a wrong offset!");
static_assert(offsetof(FSQMessageBoxInfo, MessageBoxLocation) == 0x000068, "Member 'FSQMessageBoxInfo::MessageBoxLocation' has a wrong offset!");
static_assert(offsetof(FSQMessageBoxInfo, MaxNumberOfMessagesToShow) == 0x000070, "Member 'FSQMessageBoxInfo::MaxNumberOfMessagesToShow' has a wrong offset!");
static_assert(offsetof(FSQMessageBoxInfo, MessagesLifetime) == 0x000074, "Member 'FSQMessageBoxInfo::MessagesLifetime' has a wrong offset!");
static_assert(offsetof(FSQMessageBoxInfo, MessagesFadeTime) == 0x000078, "Member 'FSQMessageBoxInfo::MessagesFadeTime' has a wrong offset!");
static_assert(offsetof(FSQMessageBoxInfo, MessageHorizontalAlignment) == 0x00007C, "Member 'FSQMessageBoxInfo::MessageHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FSQMessageBoxInfo, MessageVerticalAlignment) == 0x00007D, "Member 'FSQMessageBoxInfo::MessageVerticalAlignment' has a wrong offset!");
static_assert(offsetof(FSQMessageBoxInfo, bScrollUp) == 0x00007E, "Member 'FSQMessageBoxInfo::bScrollUp' has a wrong offset!");

// ScriptStruct Squad.ODKStatisticalData_Float
// 0x0028 (0x0030 - 0x0008)
struct FODKStatisticalData_Float final : public FODKAnalyticsDataInterface
{
public:
	float                                         Min;                                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Q1;                                                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mean;                                              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Q3;                                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7E[0x14];                                     // 0x001C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FODKStatisticalData_Float) == 0x000008, "Wrong alignment on FODKStatisticalData_Float");
static_assert(sizeof(FODKStatisticalData_Float) == 0x000030, "Wrong size on FODKStatisticalData_Float");
static_assert(offsetof(FODKStatisticalData_Float, Min) == 0x000008, "Member 'FODKStatisticalData_Float::Min' has a wrong offset!");
static_assert(offsetof(FODKStatisticalData_Float, Max) == 0x00000C, "Member 'FODKStatisticalData_Float::Max' has a wrong offset!");
static_assert(offsetof(FODKStatisticalData_Float, Q1) == 0x000010, "Member 'FODKStatisticalData_Float::Q1' has a wrong offset!");
static_assert(offsetof(FODKStatisticalData_Float, Mean) == 0x000014, "Member 'FODKStatisticalData_Float::Mean' has a wrong offset!");
static_assert(offsetof(FODKStatisticalData_Float, Q3) == 0x000018, "Member 'FODKStatisticalData_Float::Q3' has a wrong offset!");

// ScriptStruct Squad.SQWeaponSpring
// 0x0024 (0x0024 - 0x0000)
struct FSQWeaponSpring final
{
public:
	struct FVector                                WeaponSpringFactor;                                // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WeaponSpringRotationPivot;                         // 0x000C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponSpringRotationFactor;                        // 0x0018(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQWeaponSpring) == 0x000004, "Wrong alignment on FSQWeaponSpring");
static_assert(sizeof(FSQWeaponSpring) == 0x000024, "Wrong size on FSQWeaponSpring");
static_assert(offsetof(FSQWeaponSpring, WeaponSpringFactor) == 0x000000, "Member 'FSQWeaponSpring::WeaponSpringFactor' has a wrong offset!");
static_assert(offsetof(FSQWeaponSpring, WeaponSpringRotationPivot) == 0x00000C, "Member 'FSQWeaponSpring::WeaponSpringRotationPivot' has a wrong offset!");
static_assert(offsetof(FSQWeaponSpring, WeaponSpringRotationFactor) == 0x000018, "Member 'FSQWeaponSpring::WeaponSpringRotationFactor' has a wrong offset!");

// ScriptStruct Squad.SQLayerEntryStruct
// 0x0040 (0x0048 - 0x0008)
struct FSQLayerEntryStruct final : public FTableRowBase
{
public:
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USQLayer>                Layer;                                             // 0x0020(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQLayerEntryStruct) == 0x000008, "Wrong alignment on FSQLayerEntryStruct");
static_assert(sizeof(FSQLayerEntryStruct) == 0x000048, "Wrong size on FSQLayerEntryStruct");
static_assert(offsetof(FSQLayerEntryStruct, DisplayName) == 0x000008, "Member 'FSQLayerEntryStruct::DisplayName' has a wrong offset!");
static_assert(offsetof(FSQLayerEntryStruct, Layer) == 0x000020, "Member 'FSQLayerEntryStruct::Layer' has a wrong offset!");

// ScriptStruct Squad.SQMapMarkerVisualData
// 0x00C8 (0x00C8 - 0x0000)
struct FSQMapMarkerVisualData final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapIconSelectionGroup                      SelectionGroup;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C7F[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SelectedTexture;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SelectedTint;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapMarkerType                              MapMarkerType;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapWidgetTint                              MapMarkerTintType;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapMarkerVisibleTo                         MapMarkerVisibleTo;                                // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapItemType                                Type;                                              // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleWhenNeutral;                               // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEmotes                                     PlacementEmote;                                    // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C80[0x2];                                      // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lifetime;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldOverrideTint;                               // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C81[0x3];                                      // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OverrideTint;                                      // 0x003C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Tint;                                              // 0x004C(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RotPivot;                                          // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZOrder;                                            // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapItemDrawMode                            DrawModeX;                                         // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapItemDrawMode                            DrawModeY;                                         // 0x007D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C82[0xA];                                      // 0x007E(0x000A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQMapMarkerGameplayData               MarkerGameplayData;                                // 0x0088(0x0038)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class USQMapMarkerBase>           WidgetClass;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMapMarkerVisualData) == 0x000008, "Wrong alignment on FSQMapMarkerVisualData");
static_assert(sizeof(FSQMapMarkerVisualData) == 0x0000C8, "Wrong size on FSQMapMarkerVisualData");
static_assert(offsetof(FSQMapMarkerVisualData, Texture) == 0x000000, "Member 'FSQMapMarkerVisualData::Texture' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, SelectionGroup) == 0x000008, "Member 'FSQMapMarkerVisualData::SelectionGroup' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, SelectedTexture) == 0x000010, "Member 'FSQMapMarkerVisualData::SelectedTexture' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, SelectedTint) == 0x000018, "Member 'FSQMapMarkerVisualData::SelectedTint' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, MapMarkerType) == 0x000028, "Member 'FSQMapMarkerVisualData::MapMarkerType' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, MapMarkerTintType) == 0x000029, "Member 'FSQMapMarkerVisualData::MapMarkerTintType' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, MapMarkerVisibleTo) == 0x00002A, "Member 'FSQMapMarkerVisualData::MapMarkerVisibleTo' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, Type) == 0x00002B, "Member 'FSQMapMarkerVisualData::Type' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, bVisibleWhenNeutral) == 0x00002C, "Member 'FSQMapMarkerVisualData::bVisibleWhenNeutral' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, PlacementEmote) == 0x00002D, "Member 'FSQMapMarkerVisualData::PlacementEmote' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, Lifetime) == 0x000030, "Member 'FSQMapMarkerVisualData::Lifetime' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, FadeOutTime) == 0x000034, "Member 'FSQMapMarkerVisualData::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, bShouldOverrideTint) == 0x000038, "Member 'FSQMapMarkerVisualData::bShouldOverrideTint' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, OverrideTint) == 0x00003C, "Member 'FSQMapMarkerVisualData::OverrideTint' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, Tint) == 0x00004C, "Member 'FSQMapMarkerVisualData::Tint' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, Rotation) == 0x00005C, "Member 'FSQMapMarkerVisualData::Rotation' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, RotPivot) == 0x000060, "Member 'FSQMapMarkerVisualData::RotPivot' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, Size) == 0x000068, "Member 'FSQMapMarkerVisualData::Size' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, Offset) == 0x000070, "Member 'FSQMapMarkerVisualData::Offset' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, ZOrder) == 0x000078, "Member 'FSQMapMarkerVisualData::ZOrder' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, DrawModeX) == 0x00007C, "Member 'FSQMapMarkerVisualData::DrawModeX' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, DrawModeY) == 0x00007D, "Member 'FSQMapMarkerVisualData::DrawModeY' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, MarkerGameplayData) == 0x000088, "Member 'FSQMapMarkerVisualData::MarkerGameplayData' has a wrong offset!");
static_assert(offsetof(FSQMapMarkerVisualData, WidgetClass) == 0x0000C0, "Member 'FSQMapMarkerVisualData::WidgetClass' has a wrong offset!");

// ScriptStruct Squad.HeatMapRecording
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x08) FHeatMapRecording final
{
public:
	uint8                                         Pad_C83[0x90];                                     // 0x0000(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeatMapRecording) == 0x000008, "Wrong alignment on FHeatMapRecording");
static_assert(sizeof(FHeatMapRecording) == 0x000090, "Wrong size on FHeatMapRecording");

// ScriptStruct Squad.ODKOSData
// 0x0020 (0x0028 - 0x0008)
struct FODKOSData final : public FODKAnalyticsDataInterface
{
public:
	class FString                                 Os_MajorVersion;                                   // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Os_MinorVersion;                                   // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FODKOSData) == 0x000008, "Wrong alignment on FODKOSData");
static_assert(sizeof(FODKOSData) == 0x000028, "Wrong size on FODKOSData");
static_assert(offsetof(FODKOSData, Os_MajorVersion) == 0x000008, "Member 'FODKOSData::Os_MajorVersion' has a wrong offset!");
static_assert(offsetof(FODKOSData, Os_MinorVersion) == 0x000018, "Member 'FODKOSData::Os_MinorVersion' has a wrong offset!");

// ScriptStruct Squad.ODKPopulationData
// 0x0010 (0x0018 - 0x0008)
struct FODKPopulationData final : public FODKAnalyticsDataInterface
{
public:
	int32                                         Pop_Mean;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pop_Max;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C84[0x8];                                      // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FODKPopulationData) == 0x000008, "Wrong alignment on FODKPopulationData");
static_assert(sizeof(FODKPopulationData) == 0x000018, "Wrong size on FODKPopulationData");
static_assert(offsetof(FODKPopulationData, Pop_Mean) == 0x000008, "Member 'FODKPopulationData::Pop_Mean' has a wrong offset!");
static_assert(offsetof(FODKPopulationData, Pop_Max) == 0x00000C, "Member 'FODKPopulationData::Pop_Max' has a wrong offset!");

// ScriptStruct Squad.ODKDrawTimingData
// 0x0000 (0x0040 - 0x0040)
struct FODKDrawTimingData : public FODKStatisticalData_Int
{
};
static_assert(alignof(FODKDrawTimingData) == 0x000008, "Wrong alignment on FODKDrawTimingData");
static_assert(sizeof(FODKDrawTimingData) == 0x000040, "Wrong size on FODKDrawTimingData");

// ScriptStruct Squad.ODKPerformanceData
// 0x0000 (0x0040 - 0x0040)
struct FODKPerformanceData : public FODKStatisticalData_Int
{
};
static_assert(alignof(FODKPerformanceData) == 0x000008, "Wrong alignment on FODKPerformanceData");
static_assert(sizeof(FODKPerformanceData) == 0x000040, "Wrong size on FODKPerformanceData");

// ScriptStruct Squad.SQMeshTransitionSettings
// 0x0040 (0x0040 - 0x0000)
struct FSQMeshTransitionSettings final
{
public:
	float                                         TransitionValue;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C85[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Mesh;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             MeshTransform;                                     // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMeshTransitionSettings) == 0x000010, "Wrong alignment on FSQMeshTransitionSettings");
static_assert(sizeof(FSQMeshTransitionSettings) == 0x000040, "Wrong size on FSQMeshTransitionSettings");
static_assert(offsetof(FSQMeshTransitionSettings, TransitionValue) == 0x000000, "Member 'FSQMeshTransitionSettings::TransitionValue' has a wrong offset!");
static_assert(offsetof(FSQMeshTransitionSettings, Mesh) == 0x000008, "Member 'FSQMeshTransitionSettings::Mesh' has a wrong offset!");
static_assert(offsetof(FSQMeshTransitionSettings, MeshTransform) == 0x000010, "Member 'FSQMeshTransitionSettings::MeshTransform' has a wrong offset!");

// ScriptStruct Squad.SQActionParameters
// 0x0040 (0x0040 - 0x0000)
struct FSQActionParameters final
{
public:
	struct FTransform                             Position;                                          // 0x0000(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C86[0xC];                                      // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQActionParameters) == 0x000010, "Wrong alignment on FSQActionParameters");
static_assert(sizeof(FSQActionParameters) == 0x000040, "Wrong size on FSQActionParameters");
static_assert(offsetof(FSQActionParameters, Position) == 0x000000, "Member 'FSQActionParameters::Position' has a wrong offset!");
static_assert(offsetof(FSQActionParameters, Distance) == 0x000030, "Member 'FSQActionParameters::Distance' has a wrong offset!");

// ScriptStruct Squad.SQReverbVolumeEffect
// 0x0020 (0x0020 - 0x0000)
struct FSQReverbVolumeEffect final
{
public:
	class UReverbEffect*                          ReverbEffect;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectName;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectVolume;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectFadeTime;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectPriority;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C87[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQReverbVolumeEffect) == 0x000008, "Wrong alignment on FSQReverbVolumeEffect");
static_assert(sizeof(FSQReverbVolumeEffect) == 0x000020, "Wrong size on FSQReverbVolumeEffect");
static_assert(offsetof(FSQReverbVolumeEffect, ReverbEffect) == 0x000000, "Member 'FSQReverbVolumeEffect::ReverbEffect' has a wrong offset!");
static_assert(offsetof(FSQReverbVolumeEffect, EffectName) == 0x000008, "Member 'FSQReverbVolumeEffect::EffectName' has a wrong offset!");
static_assert(offsetof(FSQReverbVolumeEffect, EffectVolume) == 0x000010, "Member 'FSQReverbVolumeEffect::EffectVolume' has a wrong offset!");
static_assert(offsetof(FSQReverbVolumeEffect, EffectFadeTime) == 0x000014, "Member 'FSQReverbVolumeEffect::EffectFadeTime' has a wrong offset!");
static_assert(offsetof(FSQReverbVolumeEffect, EffectPriority) == 0x000018, "Member 'FSQReverbVolumeEffect::EffectPriority' has a wrong offset!");

// ScriptStruct Squad.AnalyticKeyValue
// 0x0020 (0x0020 - 0x0000)
struct FAnalyticKeyValue final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnalyticKeyValue) == 0x000008, "Wrong alignment on FAnalyticKeyValue");
static_assert(sizeof(FAnalyticKeyValue) == 0x000020, "Wrong size on FAnalyticKeyValue");
static_assert(offsetof(FAnalyticKeyValue, Key) == 0x000000, "Member 'FAnalyticKeyValue::Key' has a wrong offset!");
static_assert(offsetof(FAnalyticKeyValue, Value) == 0x000010, "Member 'FAnalyticKeyValue::Value' has a wrong offset!");

// ScriptStruct Squad.SQLocalizedDrawTimingData
// 0x0020 (0x0060 - 0x0040)
struct FSQLocalizedDrawTimingData final : public FODKDrawTimingData
{
public:
	struct FVector                                Max_Location;                                      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Max_Direction;                                     // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C88[0x8];                                      // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQLocalizedDrawTimingData) == 0x000008, "Wrong alignment on FSQLocalizedDrawTimingData");
static_assert(sizeof(FSQLocalizedDrawTimingData) == 0x000060, "Wrong size on FSQLocalizedDrawTimingData");
static_assert(offsetof(FSQLocalizedDrawTimingData, Max_Location) == 0x000040, "Member 'FSQLocalizedDrawTimingData::Max_Location' has a wrong offset!");
static_assert(offsetof(FSQLocalizedDrawTimingData, Max_Direction) == 0x00004C, "Member 'FSQLocalizedDrawTimingData::Max_Direction' has a wrong offset!");

// ScriptStruct Squad.SQLocalizedGPUTimingData
// 0x0020 (0x0060 - 0x0040)
struct FSQLocalizedGPUTimingData final : public FODKGPUTimingData
{
public:
	struct FVector                                Max_Location;                                      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Max_Direction;                                     // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C89[0x8];                                      // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQLocalizedGPUTimingData) == 0x000008, "Wrong alignment on FSQLocalizedGPUTimingData");
static_assert(sizeof(FSQLocalizedGPUTimingData) == 0x000060, "Wrong size on FSQLocalizedGPUTimingData");
static_assert(offsetof(FSQLocalizedGPUTimingData, Max_Location) == 0x000040, "Member 'FSQLocalizedGPUTimingData::Max_Location' has a wrong offset!");
static_assert(offsetof(FSQLocalizedGPUTimingData, Max_Direction) == 0x00004C, "Member 'FSQLocalizedGPUTimingData::Max_Direction' has a wrong offset!");

// ScriptStruct Squad.SQLocalizedGameTimingData
// 0x0020 (0x0060 - 0x0040)
struct FSQLocalizedGameTimingData final : public FODKGameTimingData
{
public:
	struct FVector                                Max_Location;                                      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Max_Direction;                                     // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8A[0x8];                                      // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQLocalizedGameTimingData) == 0x000008, "Wrong alignment on FSQLocalizedGameTimingData");
static_assert(sizeof(FSQLocalizedGameTimingData) == 0x000060, "Wrong size on FSQLocalizedGameTimingData");
static_assert(offsetof(FSQLocalizedGameTimingData, Max_Location) == 0x000040, "Member 'FSQLocalizedGameTimingData::Max_Location' has a wrong offset!");
static_assert(offsetof(FSQLocalizedGameTimingData, Max_Direction) == 0x00004C, "Member 'FSQLocalizedGameTimingData::Max_Direction' has a wrong offset!");

// ScriptStruct Squad.SQLocalizedPerformanceData
// 0x0020 (0x0060 - 0x0040)
struct FSQLocalizedPerformanceData final : public FODKPerformanceData
{
public:
	struct FVector                                Min_Location;                                      // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Min_Direction;                                     // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8B[0x8];                                      // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQLocalizedPerformanceData) == 0x000008, "Wrong alignment on FSQLocalizedPerformanceData");
static_assert(sizeof(FSQLocalizedPerformanceData) == 0x000060, "Wrong size on FSQLocalizedPerformanceData");
static_assert(offsetof(FSQLocalizedPerformanceData, Min_Location) == 0x000040, "Member 'FSQLocalizedPerformanceData::Min_Location' has a wrong offset!");
static_assert(offsetof(FSQLocalizedPerformanceData, Min_Direction) == 0x00004C, "Member 'FSQLocalizedPerformanceData::Min_Direction' has a wrong offset!");

// ScriptStruct Squad.SQSessionData
// 0x0010 (0x0040 - 0x0030)
struct FSQSessionData final : public FODKSessionData
{
public:
	struct FGuid                                  SessionId;                                         // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSessionData) == 0x000008, "Wrong alignment on FSQSessionData");
static_assert(sizeof(FSQSessionData) == 0x000040, "Wrong size on FSQSessionData");
static_assert(offsetof(FSQSessionData, SessionId) == 0x000030, "Member 'FSQSessionData::SessionId' has a wrong offset!");

// ScriptStruct Squad.SQClientSettingsData
// 0x0090 (0x0098 - 0x0008)
struct FSQClientSettingsData final : public FODKAnalyticsDataInterface
{
public:
	class FString                                 WindowMode;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              Resolution;                                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResolutionScale;                                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VSync;                                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8C[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FieldOfView;                                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFPS;                                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GfxQuality;                                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AAQuality;                                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AASamples;                                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQuality;                                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContactShadows;                                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FarShadows;                                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TexQuality;                                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TexAnisoFilter;                                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TexVRamUsage;                                      // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TexVRamUncap;                                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8D[0x3];                                      // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ParticleQuality;                                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AOQuality;                                         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SSAOEnabled;                                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8E[0x3];                                      // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PPQuality;                                         // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LensFlare;                                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MotionBlur;                                        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sharpening;                                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradingBrightness;                                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradingContrast;                                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradingSaturation;                                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fsr2Enabled;                                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Fsr2QualityMode;                                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Fsr2SharpnessValue;                                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PipScopeUpdateRate;                                // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PipScopeClarityMode;                               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PipScopeResolutionScale;                           // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQClientSettingsData) == 0x000008, "Wrong alignment on FSQClientSettingsData");
static_assert(sizeof(FSQClientSettingsData) == 0x000098, "Wrong size on FSQClientSettingsData");
static_assert(offsetof(FSQClientSettingsData, WindowMode) == 0x000008, "Member 'FSQClientSettingsData::WindowMode' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, Resolution) == 0x000018, "Member 'FSQClientSettingsData::Resolution' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, ResolutionScale) == 0x000020, "Member 'FSQClientSettingsData::ResolutionScale' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, VSync) == 0x000024, "Member 'FSQClientSettingsData::VSync' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, FieldOfView) == 0x000028, "Member 'FSQClientSettingsData::FieldOfView' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, MaxFPS) == 0x00002C, "Member 'FSQClientSettingsData::MaxFPS' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, GfxQuality) == 0x000030, "Member 'FSQClientSettingsData::GfxQuality' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, AAQuality) == 0x000034, "Member 'FSQClientSettingsData::AAQuality' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, AASamples) == 0x000038, "Member 'FSQClientSettingsData::AASamples' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, ShadowQuality) == 0x00003C, "Member 'FSQClientSettingsData::ShadowQuality' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, ContactShadows) == 0x000040, "Member 'FSQClientSettingsData::ContactShadows' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, FarShadows) == 0x000044, "Member 'FSQClientSettingsData::FarShadows' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, TexQuality) == 0x000048, "Member 'FSQClientSettingsData::TexQuality' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, TexAnisoFilter) == 0x00004C, "Member 'FSQClientSettingsData::TexAnisoFilter' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, TexVRamUsage) == 0x000050, "Member 'FSQClientSettingsData::TexVRamUsage' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, TexVRamUncap) == 0x000054, "Member 'FSQClientSettingsData::TexVRamUncap' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, ParticleQuality) == 0x000058, "Member 'FSQClientSettingsData::ParticleQuality' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, AOQuality) == 0x00005C, "Member 'FSQClientSettingsData::AOQuality' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, SSAOEnabled) == 0x000060, "Member 'FSQClientSettingsData::SSAOEnabled' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, PPQuality) == 0x000064, "Member 'FSQClientSettingsData::PPQuality' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, LensFlare) == 0x000068, "Member 'FSQClientSettingsData::LensFlare' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, MotionBlur) == 0x00006C, "Member 'FSQClientSettingsData::MotionBlur' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, Sharpening) == 0x000070, "Member 'FSQClientSettingsData::Sharpening' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, GradingBrightness) == 0x000074, "Member 'FSQClientSettingsData::GradingBrightness' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, GradingContrast) == 0x000078, "Member 'FSQClientSettingsData::GradingContrast' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, GradingSaturation) == 0x00007C, "Member 'FSQClientSettingsData::GradingSaturation' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, Fsr2Enabled) == 0x000080, "Member 'FSQClientSettingsData::Fsr2Enabled' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, Fsr2QualityMode) == 0x000084, "Member 'FSQClientSettingsData::Fsr2QualityMode' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, Fsr2SharpnessValue) == 0x000088, "Member 'FSQClientSettingsData::Fsr2SharpnessValue' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, PipScopeUpdateRate) == 0x00008C, "Member 'FSQClientSettingsData::PipScopeUpdateRate' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, PipScopeClarityMode) == 0x000090, "Member 'FSQClientSettingsData::PipScopeClarityMode' has a wrong offset!");
static_assert(offsetof(FSQClientSettingsData, PipScopeResolutionScale) == 0x000094, "Member 'FSQClientSettingsData::PipScopeResolutionScale' has a wrong offset!");

// ScriptStruct Squad.SQCachedRelevantAnimData
// 0x001C (0x001C - 0x0000)
struct FSQCachedRelevantAnimData final
{
public:
	class FName                                   StateMachineName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8F[0xC];                                      // 0x0010(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQCachedRelevantAnimData) == 0x000004, "Wrong alignment on FSQCachedRelevantAnimData");
static_assert(sizeof(FSQCachedRelevantAnimData) == 0x00001C, "Wrong size on FSQCachedRelevantAnimData");
static_assert(offsetof(FSQCachedRelevantAnimData, StateMachineName) == 0x000000, "Member 'FSQCachedRelevantAnimData::StateMachineName' has a wrong offset!");
static_assert(offsetof(FSQCachedRelevantAnimData, StateName) == 0x000008, "Member 'FSQCachedRelevantAnimData::StateName' has a wrong offset!");

// ScriptStruct Squad.SQCachedAssetPlayerData
// 0x0020 (0x0020 - 0x0000)
struct FSQCachedAssetPlayerData final
{
public:
	class FName                                   StateMachineName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InstanceName;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C90[0x8];                                      // 0x0018(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQCachedAssetPlayerData) == 0x000004, "Wrong alignment on FSQCachedAssetPlayerData");
static_assert(sizeof(FSQCachedAssetPlayerData) == 0x000020, "Wrong size on FSQCachedAssetPlayerData");
static_assert(offsetof(FSQCachedAssetPlayerData, StateMachineName) == 0x000000, "Member 'FSQCachedAssetPlayerData::StateMachineName' has a wrong offset!");
static_assert(offsetof(FSQCachedAssetPlayerData, StateName) == 0x000008, "Member 'FSQCachedAssetPlayerData::StateName' has a wrong offset!");
static_assert(offsetof(FSQCachedAssetPlayerData, InstanceName) == 0x000010, "Member 'FSQCachedAssetPlayerData::InstanceName' has a wrong offset!");

// ScriptStruct Squad.SQCachedStateData
// 0x001C (0x001C - 0x0000)
struct FSQCachedStateData final
{
public:
	class FName                                   StateMachineName;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C91[0xC];                                      // 0x0010(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQCachedStateData) == 0x000004, "Wrong alignment on FSQCachedStateData");
static_assert(sizeof(FSQCachedStateData) == 0x00001C, "Wrong size on FSQCachedStateData");
static_assert(offsetof(FSQCachedStateData, StateMachineName) == 0x000000, "Member 'FSQCachedStateData::StateMachineName' has a wrong offset!");
static_assert(offsetof(FSQCachedStateData, StateName) == 0x000008, "Member 'FSQCachedStateData::StateName' has a wrong offset!");

// ScriptStruct Squad.SQCachedStateArray
// 0x0018 (0x0018 - 0x0000)
struct FSQCachedStateArray final
{
public:
	TArray<struct FSQCachedStateData>             States;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C92[0x8];                                      // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQCachedStateArray) == 0x000008, "Wrong alignment on FSQCachedStateArray");
static_assert(sizeof(FSQCachedStateArray) == 0x000018, "Wrong size on FSQCachedStateArray");
static_assert(offsetof(FSQCachedStateArray, States) == 0x000000, "Member 'FSQCachedStateArray::States' has a wrong offset!");

// ScriptStruct Squad.SQEmoteAnims
// 0x0028 (0x0028 - 0x0000)
struct FSQEmoteAnims final
{
public:
	bool                                          bForceIfCantPlay;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C93[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FirstPersonAnim;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonAnim;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FirstPersonEndAnim;                                // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonEndAnim;                                // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEmoteAnims) == 0x000008, "Wrong alignment on FSQEmoteAnims");
static_assert(sizeof(FSQEmoteAnims) == 0x000028, "Wrong size on FSQEmoteAnims");
static_assert(offsetof(FSQEmoteAnims, bForceIfCantPlay) == 0x000000, "Member 'FSQEmoteAnims::bForceIfCantPlay' has a wrong offset!");
static_assert(offsetof(FSQEmoteAnims, FirstPersonAnim) == 0x000008, "Member 'FSQEmoteAnims::FirstPersonAnim' has a wrong offset!");
static_assert(offsetof(FSQEmoteAnims, ThirdPersonAnim) == 0x000010, "Member 'FSQEmoteAnims::ThirdPersonAnim' has a wrong offset!");
static_assert(offsetof(FSQEmoteAnims, FirstPersonEndAnim) == 0x000018, "Member 'FSQEmoteAnims::FirstPersonEndAnim' has a wrong offset!");
static_assert(offsetof(FSQEmoteAnims, ThirdPersonEndAnim) == 0x000020, "Member 'FSQEmoteAnims::ThirdPersonEndAnim' has a wrong offset!");

// ScriptStruct Squad.SQAnimNode_BoneDrivenController
// 0x0060 (0x0128 - 0x00C8)
struct FSQAnimNode_BoneDrivenController final : public FAnimNode_SkeletalControlBase
{
public:
	struct FBoneReference                         SourceBone;                                        // 0x00C8(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	ESQComponentType                              SourceComponent;                                   // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C94[0x7];                                      // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DrivingCurve;                                      // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRange;                                         // 0x00EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C95[0x3];                                      // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RangeMin;                                          // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeMax;                                          // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMin;                                       // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemappedMax;                                       // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQDrivenDestinationMode                      DestinationMode;                                   // 0x0100(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C96[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParameterName;                                     // 0x0104(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoneReference                         TargetBone;                                        // 0x010C(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EBoneControlSpace                             TargetComponentSpace;                              // 0x011C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQComponentType                              TargetComponent;                                   // 0x011D(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C97[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAffectTargetTranslationX : 1;                     // 0x0120(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetTranslationY : 1;                     // 0x0120(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetTranslationZ : 1;                     // 0x0120(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationX : 1;                        // 0x0120(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationY : 1;                        // 0x0120(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetRotationZ : 1;                        // 0x0120(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleX : 1;                           // 0x0120(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleY : 1;                           // 0x0120(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAffectTargetScaleZ : 1;                           // 0x0121(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C98[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ESQDrivenBoneModificationMode                 ModificationMode;                                  // 0x0124(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C99[0x3];                                      // 0x0125(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQAnimNode_BoneDrivenController) == 0x000008, "Wrong alignment on FSQAnimNode_BoneDrivenController");
static_assert(sizeof(FSQAnimNode_BoneDrivenController) == 0x000128, "Wrong size on FSQAnimNode_BoneDrivenController");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, SourceBone) == 0x0000C8, "Member 'FSQAnimNode_BoneDrivenController::SourceBone' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, SourceComponent) == 0x0000D8, "Member 'FSQAnimNode_BoneDrivenController::SourceComponent' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, DrivingCurve) == 0x0000E0, "Member 'FSQAnimNode_BoneDrivenController::DrivingCurve' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, Multiplier) == 0x0000E8, "Member 'FSQAnimNode_BoneDrivenController::Multiplier' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, bUseRange) == 0x0000EC, "Member 'FSQAnimNode_BoneDrivenController::bUseRange' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, RangeMin) == 0x0000F0, "Member 'FSQAnimNode_BoneDrivenController::RangeMin' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, RangeMax) == 0x0000F4, "Member 'FSQAnimNode_BoneDrivenController::RangeMax' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, RemappedMin) == 0x0000F8, "Member 'FSQAnimNode_BoneDrivenController::RemappedMin' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, RemappedMax) == 0x0000FC, "Member 'FSQAnimNode_BoneDrivenController::RemappedMax' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, DestinationMode) == 0x000100, "Member 'FSQAnimNode_BoneDrivenController::DestinationMode' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, ParameterName) == 0x000104, "Member 'FSQAnimNode_BoneDrivenController::ParameterName' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, TargetBone) == 0x00010C, "Member 'FSQAnimNode_BoneDrivenController::TargetBone' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, TargetComponentSpace) == 0x00011C, "Member 'FSQAnimNode_BoneDrivenController::TargetComponentSpace' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, TargetComponent) == 0x00011D, "Member 'FSQAnimNode_BoneDrivenController::TargetComponent' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_BoneDrivenController, ModificationMode) == 0x000124, "Member 'FSQAnimNode_BoneDrivenController::ModificationMode' has a wrong offset!");

// ScriptStruct Squad.SQAnimNode_WheelHandler
// 0x0030 (0x00F8 - 0x00C8)
struct FSQAnimNode_WheelHandler final : public FAnimNode_SkeletalControlBase
{
public:
	float                                         Smoothing;                                         // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9A[0x1C];                                     // 0x00CC(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PreviousWheelLocations;                            // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSQAnimNode_WheelHandler) == 0x000008, "Wrong alignment on FSQAnimNode_WheelHandler");
static_assert(sizeof(FSQAnimNode_WheelHandler) == 0x0000F8, "Wrong size on FSQAnimNode_WheelHandler");
static_assert(offsetof(FSQAnimNode_WheelHandler, Smoothing) == 0x0000C8, "Member 'FSQAnimNode_WheelHandler::Smoothing' has a wrong offset!");
static_assert(offsetof(FSQAnimNode_WheelHandler, PreviousWheelLocations) == 0x0000E8, "Member 'FSQAnimNode_WheelHandler::PreviousWheelLocations' has a wrong offset!");

// ScriptStruct Squad.SQItemSkinSlot
// 0x00F0 (0x00F8 - 0x0008)
struct FSQItemSkinSlot final : public FTableRowBase
{
public:
	bool                                          bHiddenSlot;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9B[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfMaterials_1p;                              // 0x000C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfMaterials_3p;                              // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHadNumMaterialError;                              // 0x0014(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9C[0x3];                                      // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TSoftClassPtr<class UClass>>             SkinnableItems;                                    // 0x0018(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<TSoftObjectPtr<class USQRoleSettings>>   SlotRoles;                                         // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FVector                                ViewOffset;                                        // 0x00B8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewZoomMax;                                       // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewZoomMin;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9D[0x4];                                      // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   WeaponPreviewType;                                 // 0x00D0(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQItemSkinSlot) == 0x000008, "Wrong alignment on FSQItemSkinSlot");
static_assert(sizeof(FSQItemSkinSlot) == 0x0000F8, "Wrong size on FSQItemSkinSlot");
static_assert(offsetof(FSQItemSkinSlot, bHiddenSlot) == 0x000008, "Member 'FSQItemSkinSlot::bHiddenSlot' has a wrong offset!");
static_assert(offsetof(FSQItemSkinSlot, NumberOfMaterials_1p) == 0x00000C, "Member 'FSQItemSkinSlot::NumberOfMaterials_1p' has a wrong offset!");
static_assert(offsetof(FSQItemSkinSlot, NumberOfMaterials_3p) == 0x000010, "Member 'FSQItemSkinSlot::NumberOfMaterials_3p' has a wrong offset!");
static_assert(offsetof(FSQItemSkinSlot, bHadNumMaterialError) == 0x000014, "Member 'FSQItemSkinSlot::bHadNumMaterialError' has a wrong offset!");
static_assert(offsetof(FSQItemSkinSlot, SkinnableItems) == 0x000018, "Member 'FSQItemSkinSlot::SkinnableItems' has a wrong offset!");
static_assert(offsetof(FSQItemSkinSlot, SlotRoles) == 0x000068, "Member 'FSQItemSkinSlot::SlotRoles' has a wrong offset!");
static_assert(offsetof(FSQItemSkinSlot, ViewOffset) == 0x0000B8, "Member 'FSQItemSkinSlot::ViewOffset' has a wrong offset!");
static_assert(offsetof(FSQItemSkinSlot, ViewZoomMax) == 0x0000C4, "Member 'FSQItemSkinSlot::ViewZoomMax' has a wrong offset!");
static_assert(offsetof(FSQItemSkinSlot, ViewZoomMin) == 0x0000C8, "Member 'FSQItemSkinSlot::ViewZoomMin' has a wrong offset!");
static_assert(offsetof(FSQItemSkinSlot, WeaponPreviewType) == 0x0000D0, "Member 'FSQItemSkinSlot::WeaponPreviewType' has a wrong offset!");

// ScriptStruct Squad.SQApprovalEntryClientDesc
// 0x0008 (0x0008 - 0x0000)
struct FSQApprovalEntryClientDesc final
{
public:
	float                                         ExpireIn;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQApprovalEntryClientDesc) == 0x000004, "Wrong alignment on FSQApprovalEntryClientDesc");
static_assert(sizeof(FSQApprovalEntryClientDesc) == 0x000008, "Wrong size on FSQApprovalEntryClientDesc");
static_assert(offsetof(FSQApprovalEntryClientDesc, ExpireIn) == 0x000000, "Member 'FSQApprovalEntryClientDesc::ExpireIn' has a wrong offset!");
static_assert(offsetof(FSQApprovalEntryClientDesc, Timestamp) == 0x000004, "Member 'FSQApprovalEntryClientDesc::Timestamp' has a wrong offset!");

// ScriptStruct Squad.SQApprovalEntryRequest
// 0x0038 (0x0038 - 0x0000)
struct FSQApprovalEntryRequest final
{
public:
	EApprovalRequestTypes                         RequestType;                                       // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9E[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                PtrParams[0x4];                                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MessageTableRowName;                               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpireIn;                                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQApprovalEntryRequest) == 0x000008, "Wrong alignment on FSQApprovalEntryRequest");
static_assert(sizeof(FSQApprovalEntryRequest) == 0x000038, "Wrong size on FSQApprovalEntryRequest");
static_assert(offsetof(FSQApprovalEntryRequest, RequestType) == 0x000000, "Member 'FSQApprovalEntryRequest::RequestType' has a wrong offset!");
static_assert(offsetof(FSQApprovalEntryRequest, PtrParams) == 0x000008, "Member 'FSQApprovalEntryRequest::PtrParams' has a wrong offset!");
static_assert(offsetof(FSQApprovalEntryRequest, MessageTableRowName) == 0x000028, "Member 'FSQApprovalEntryRequest::MessageTableRowName' has a wrong offset!");
static_assert(offsetof(FSQApprovalEntryRequest, ExpireIn) == 0x000030, "Member 'FSQApprovalEntryRequest::ExpireIn' has a wrong offset!");
static_assert(offsetof(FSQApprovalEntryRequest, Timestamp) == 0x000034, "Member 'FSQApprovalEntryRequest::Timestamp' has a wrong offset!");

// ScriptStruct Squad.SQApprovalEntryRequestMessage
// 0x0038 (0x0040 - 0x0008)
struct FSQApprovalEntryRequestMessage final : public FTableRowBase
{
public:
	class FText                                   MainText;                                          // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQApprovalEntryRequestMessage) == 0x000008, "Wrong alignment on FSQApprovalEntryRequestMessage");
static_assert(sizeof(FSQApprovalEntryRequestMessage) == 0x000040, "Wrong size on FSQApprovalEntryRequestMessage");
static_assert(offsetof(FSQApprovalEntryRequestMessage, MainText) == 0x000008, "Member 'FSQApprovalEntryRequestMessage::MainText' has a wrong offset!");
static_assert(offsetof(FSQApprovalEntryRequestMessage, Icon) == 0x000020, "Member 'FSQApprovalEntryRequestMessage::Icon' has a wrong offset!");
static_assert(offsetof(FSQApprovalEntryRequestMessage, Description) == 0x000028, "Member 'FSQApprovalEntryRequestMessage::Description' has a wrong offset!");

// ScriptStruct Squad.SQArmorInfo
// 0x0004 (0x0004 - 0x0000)
struct FSQArmorInfo final
{
public:
	float                                         Thickness;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQArmorInfo) == 0x000004, "Wrong alignment on FSQArmorInfo");
static_assert(sizeof(FSQArmorInfo) == 0x000004, "Wrong size on FSQArmorInfo");
static_assert(offsetof(FSQArmorInfo, Thickness) == 0x000000, "Member 'FSQArmorInfo::Thickness' has a wrong offset!");

// ScriptStruct Squad.MultithreadObjectPair
// 0x0018 (0x0018 - 0x0000)
struct FMultithreadObjectPair final
{
public:
	class USQMultithreadObject*                   Object;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class USQMultithreadObject* CompletedObject)> CompletionDelegate;                                // 0x0008(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMultithreadObjectPair) == 0x000008, "Wrong alignment on FMultithreadObjectPair");
static_assert(sizeof(FMultithreadObjectPair) == 0x000018, "Wrong size on FMultithreadObjectPair");
static_assert(offsetof(FMultithreadObjectPair, Object) == 0x000000, "Member 'FMultithreadObjectPair::Object' has a wrong offset!");
static_assert(offsetof(FMultithreadObjectPair, CompletionDelegate) == 0x000008, "Member 'FMultithreadObjectPair::CompletionDelegate' has a wrong offset!");

// ScriptStruct Squad.SQBoundaryListenerData
// 0x0014 (0x0014 - 0x0000)
struct FSQBoundaryListenerData final
{
public:
	bool                                          bInsideBoundary;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9F[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EntryTime;                                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitTime;                                          // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA0[0x4];                                      // 0x0010(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQBoundaryListenerData) == 0x000004, "Wrong alignment on FSQBoundaryListenerData");
static_assert(sizeof(FSQBoundaryListenerData) == 0x000014, "Wrong size on FSQBoundaryListenerData");
static_assert(offsetof(FSQBoundaryListenerData, bInsideBoundary) == 0x000000, "Member 'FSQBoundaryListenerData::bInsideBoundary' has a wrong offset!");
static_assert(offsetof(FSQBoundaryListenerData, CheckTime) == 0x000004, "Member 'FSQBoundaryListenerData::CheckTime' has a wrong offset!");
static_assert(offsetof(FSQBoundaryListenerData, EntryTime) == 0x000008, "Member 'FSQBoundaryListenerData::EntryTime' has a wrong offset!");
static_assert(offsetof(FSQBoundaryListenerData, ExitTime) == 0x00000C, "Member 'FSQBoundaryListenerData::ExitTime' has a wrong offset!");

// ScriptStruct Squad.SQBuffDesc
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FSQBuffDesc final
{
public:
	uint8                                         Pad_CA1[0x8];                                      // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQBuffDesc) == 0x000004, "Wrong alignment on FSQBuffDesc");
static_assert(sizeof(FSQBuffDesc) == 0x000008, "Wrong size on FSQBuffDesc");

// ScriptStruct Squad.CaptureZoneStats
// 0x0018 (0x0018 - 0x0000)
struct FCaptureZoneStats final
{
public:
	class UCurveFloat*                            PlayerAdvantageToTimeToCapHeldPoint;               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralFlagCaptureRateMultiplier;                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinSoldiersToCaptureHeldPoint;                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinSoldiersToCaptureNeutralPoint;                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA2[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCaptureZoneStats) == 0x000008, "Wrong alignment on FCaptureZoneStats");
static_assert(sizeof(FCaptureZoneStats) == 0x000018, "Wrong size on FCaptureZoneStats");
static_assert(offsetof(FCaptureZoneStats, PlayerAdvantageToTimeToCapHeldPoint) == 0x000000, "Member 'FCaptureZoneStats::PlayerAdvantageToTimeToCapHeldPoint' has a wrong offset!");
static_assert(offsetof(FCaptureZoneStats, NeutralFlagCaptureRateMultiplier) == 0x000008, "Member 'FCaptureZoneStats::NeutralFlagCaptureRateMultiplier' has a wrong offset!");
static_assert(offsetof(FCaptureZoneStats, MinSoldiersToCaptureHeldPoint) == 0x00000C, "Member 'FCaptureZoneStats::MinSoldiersToCaptureHeldPoint' has a wrong offset!");
static_assert(offsetof(FCaptureZoneStats, MinSoldiersToCaptureNeutralPoint) == 0x000010, "Member 'FCaptureZoneStats::MinSoldiersToCaptureNeutralPoint' has a wrong offset!");

// ScriptStruct Squad.SQVoteSessionChoiceInfo
// 0x0018 (0x0018 - 0x0000)
struct FSQVoteSessionChoiceInfo final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Voters;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVoteSessionChoiceInfo) == 0x000008, "Wrong alignment on FSQVoteSessionChoiceInfo");
static_assert(sizeof(FSQVoteSessionChoiceInfo) == 0x000018, "Wrong size on FSQVoteSessionChoiceInfo");
static_assert(offsetof(FSQVoteSessionChoiceInfo, ID) == 0x000000, "Member 'FSQVoteSessionChoiceInfo::ID' has a wrong offset!");
static_assert(offsetof(FSQVoteSessionChoiceInfo, Voters) == 0x000008, "Member 'FSQVoteSessionChoiceInfo::Voters' has a wrong offset!");

// ScriptStruct Squad.SQChatStyle
// 0x0900 (0x0908 - 0x0008)
struct FSQChatStyle final : public FSlateWidgetStyle
{
public:
	struct FEditableTextBoxStyle                  TextEntryStyle;                                    // 0x0008(0x07F8)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            BackingBrush;                                      // 0x0800(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateColor                            BoxBorderColor;                                    // 0x0888(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FSlateColor                            TextColor;                                         // 0x08B0(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FSlateSound                            RxMessgeSound;                                     // 0x08D8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            TxMessgeSound;                                     // 0x08F0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQChatStyle) == 0x000008, "Wrong alignment on FSQChatStyle");
static_assert(sizeof(FSQChatStyle) == 0x000908, "Wrong size on FSQChatStyle");
static_assert(offsetof(FSQChatStyle, TextEntryStyle) == 0x000008, "Member 'FSQChatStyle::TextEntryStyle' has a wrong offset!");
static_assert(offsetof(FSQChatStyle, BackingBrush) == 0x000800, "Member 'FSQChatStyle::BackingBrush' has a wrong offset!");
static_assert(offsetof(FSQChatStyle, BoxBorderColor) == 0x000888, "Member 'FSQChatStyle::BoxBorderColor' has a wrong offset!");
static_assert(offsetof(FSQChatStyle, TextColor) == 0x0008B0, "Member 'FSQChatStyle::TextColor' has a wrong offset!");
static_assert(offsetof(FSQChatStyle, RxMessgeSound) == 0x0008D8, "Member 'FSQChatStyle::RxMessgeSound' has a wrong offset!");
static_assert(offsetof(FSQChatStyle, TxMessgeSound) == 0x0008F0, "Member 'FSQChatStyle::TxMessgeSound' has a wrong offset!");

// ScriptStruct Squad.SQChunkRule
// 0x0038 (0x0038 - 0x0000)
struct FSQChunkRule final
{
public:
	class FString                                 RuleLabel;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInt32Range>                    ParentChunkIDs;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInt32Range>                    ChildsChunkIDs;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESQChunkBehavior                              Behavior;                                          // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA3[0x7];                                      // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQChunkRule) == 0x000008, "Wrong alignment on FSQChunkRule");
static_assert(sizeof(FSQChunkRule) == 0x000038, "Wrong size on FSQChunkRule");
static_assert(offsetof(FSQChunkRule, RuleLabel) == 0x000000, "Member 'FSQChunkRule::RuleLabel' has a wrong offset!");
static_assert(offsetof(FSQChunkRule, ParentChunkIDs) == 0x000010, "Member 'FSQChunkRule::ParentChunkIDs' has a wrong offset!");
static_assert(offsetof(FSQChunkRule, ChildsChunkIDs) == 0x000020, "Member 'FSQChunkRule::ChildsChunkIDs' has a wrong offset!");
static_assert(offsetof(FSQChunkRule, Behavior) == 0x000030, "Member 'FSQChunkRule::Behavior' has a wrong offset!");

// ScriptStruct Squad.SQTeamCommands
// 0x0038 (0x0040 - 0x0008)
struct FSQTeamCommands final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   CommandData;                                       // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Team;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQTeamCommands) == 0x000008, "Wrong alignment on FSQTeamCommands");
static_assert(sizeof(FSQTeamCommands) == 0x000040, "Wrong size on FSQTeamCommands");
static_assert(offsetof(FSQTeamCommands, CommandData) == 0x000008, "Member 'FSQTeamCommands::CommandData' has a wrong offset!");
static_assert(offsetof(FSQTeamCommands, Team) == 0x000030, "Member 'FSQTeamCommands::Team' has a wrong offset!");

// ScriptStruct Squad.SQCommandActionDataFASItem
// 0x001C (0x0028 - 0x000C)
struct FSQCommandActionDataFASItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_CA4[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQCommandActionData                   Content;                                           // 0x0010(0x0018)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQCommandActionDataFASItem) == 0x000008, "Wrong alignment on FSQCommandActionDataFASItem");
static_assert(sizeof(FSQCommandActionDataFASItem) == 0x000028, "Wrong size on FSQCommandActionDataFASItem");
static_assert(offsetof(FSQCommandActionDataFASItem, Content) == 0x000010, "Member 'FSQCommandActionDataFASItem::Content' has a wrong offset!");

// ScriptStruct Squad.SQCommanderActionDataArray
// 0x0010 (0x0118 - 0x0108)
struct FSQCommanderActionDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FSQCommandActionDataFASItem>    Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQCommanderActionDataArray) == 0x000008, "Wrong alignment on FSQCommanderActionDataArray");
static_assert(sizeof(FSQCommanderActionDataArray) == 0x000118, "Wrong size on FSQCommanderActionDataArray");
static_assert(offsetof(FSQCommanderActionDataArray, Items) == 0x000108, "Member 'FSQCommanderActionDataArray::Items' has a wrong offset!");

// ScriptStruct Squad.SQCommanderActionSounds
// 0x00A0 (0x00A0 - 0x0000)
struct FSQCommanderActionSounds final
{
public:
	TSoftObjectPtr<class USoundCue>               CommandActionPlaced;                               // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               CommandActionActive;                               // 0x0028(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               CommandActionDestroyed;                            // 0x0050(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               CommandActionEnded;                                // 0x0078(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQCommanderActionSounds) == 0x000008, "Wrong alignment on FSQCommanderActionSounds");
static_assert(sizeof(FSQCommanderActionSounds) == 0x0000A0, "Wrong size on FSQCommanderActionSounds");
static_assert(offsetof(FSQCommanderActionSounds, CommandActionPlaced) == 0x000000, "Member 'FSQCommanderActionSounds::CommandActionPlaced' has a wrong offset!");
static_assert(offsetof(FSQCommanderActionSounds, CommandActionActive) == 0x000028, "Member 'FSQCommanderActionSounds::CommandActionActive' has a wrong offset!");
static_assert(offsetof(FSQCommanderActionSounds, CommandActionDestroyed) == 0x000050, "Member 'FSQCommanderActionSounds::CommandActionDestroyed' has a wrong offset!");
static_assert(offsetof(FSQCommanderActionSounds, CommandActionEnded) == 0x000078, "Member 'FSQCommanderActionSounds::CommandActionEnded' has a wrong offset!");

// ScriptStruct Squad.CommanderVoteNominee
// 0x0014 (0x0020 - 0x000C)
struct FCommanderVoteNominee final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_CA5[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         NomineeState;                                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteCount;                                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA6[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommanderVoteNominee) == 0x000008, "Wrong alignment on FCommanderVoteNominee");
static_assert(sizeof(FCommanderVoteNominee) == 0x000020, "Wrong size on FCommanderVoteNominee");
static_assert(offsetof(FCommanderVoteNominee, NomineeState) == 0x000010, "Member 'FCommanderVoteNominee::NomineeState' has a wrong offset!");
static_assert(offsetof(FCommanderVoteNominee, VoteCount) == 0x000018, "Member 'FCommanderVoteNominee::VoteCount' has a wrong offset!");

// ScriptStruct Squad.CommanderNomineeArray
// 0x0010 (0x0118 - 0x0108)
struct FCommanderNomineeArray final : public FFastArraySerializer
{
public:
	TArray<struct FCommanderVoteNominee>          Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommanderNomineeArray) == 0x000008, "Wrong alignment on FCommanderNomineeArray");
static_assert(sizeof(FCommanderNomineeArray) == 0x000118, "Wrong size on FCommanderNomineeArray");
static_assert(offsetof(FCommanderNomineeArray, Items) == 0x000108, "Member 'FCommanderNomineeArray::Items' has a wrong offset!");

// ScriptStruct Squad.SQRemoteServerConfig
// 0x0001 (0x0001 - 0x0000)
struct FSQRemoteServerConfig final
{
public:
	uint8                                         Pad_CA7[0x1];                                      // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQRemoteServerConfig) == 0x000001, "Wrong alignment on FSQRemoteServerConfig");
static_assert(sizeof(FSQRemoteServerConfig) == 0x000001, "Wrong size on FSQRemoteServerConfig");

// ScriptStruct Squad.SQRemoteGameConfig
// 0x0010 (0x0010 - 0x0000)
struct FSQRemoteGameConfig final
{
public:
	bool                                          bLicensingEnabled;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bServerHealthEnabled;                              // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA8[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerHealthHigh;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerHealthLow;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModdedServersOnTop;                               // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModVersioningEnabled;                             // 0x000D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA9[0x2];                                      // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQRemoteGameConfig) == 0x000004, "Wrong alignment on FSQRemoteGameConfig");
static_assert(sizeof(FSQRemoteGameConfig) == 0x000010, "Wrong size on FSQRemoteGameConfig");
static_assert(offsetof(FSQRemoteGameConfig, bLicensingEnabled) == 0x000000, "Member 'FSQRemoteGameConfig::bLicensingEnabled' has a wrong offset!");
static_assert(offsetof(FSQRemoteGameConfig, bServerHealthEnabled) == 0x000001, "Member 'FSQRemoteGameConfig::bServerHealthEnabled' has a wrong offset!");
static_assert(offsetof(FSQRemoteGameConfig, ServerHealthHigh) == 0x000004, "Member 'FSQRemoteGameConfig::ServerHealthHigh' has a wrong offset!");
static_assert(offsetof(FSQRemoteGameConfig, ServerHealthLow) == 0x000008, "Member 'FSQRemoteGameConfig::ServerHealthLow' has a wrong offset!");
static_assert(offsetof(FSQRemoteGameConfig, bModdedServersOnTop) == 0x00000C, "Member 'FSQRemoteGameConfig::bModdedServersOnTop' has a wrong offset!");
static_assert(offsetof(FSQRemoteGameConfig, bModVersioningEnabled) == 0x00000D, "Member 'FSQRemoteGameConfig::bModVersioningEnabled' has a wrong offset!");

// ScriptStruct Squad.SQCustomSettings
// 0x0020 (0x0020 - 0x0000)
struct FSQCustomSettings final
{
public:
	TArray<class FString>                         Keys;                                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Values;                                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQCustomSettings) == 0x000008, "Wrong alignment on FSQCustomSettings");
static_assert(sizeof(FSQCustomSettings) == 0x000020, "Wrong size on FSQCustomSettings");
static_assert(offsetof(FSQCustomSettings, Keys) == 0x000000, "Member 'FSQCustomSettings::Keys' has a wrong offset!");
static_assert(offsetof(FSQCustomSettings, Values) == 0x000010, "Member 'FSQCustomSettings::Values' has a wrong offset!");

// ScriptStruct Squad.SQVoteConfig
// 0x0040 (0x0040 - 0x0000)
struct FSQVoteConfig final
{
public:
	struct FDataTableRowHandle                    Data;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimespan                              Duration;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQAdminAccessLevels                          AccessFilter;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CAA[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESQTeam>                               TeamFilter;                                        // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class USQVoteSessionAuthority>    AuthoritySessionType;                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRegeneratePossible;                               // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CAB[0x7];                                      // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQVoteConfig) == 0x000008, "Wrong alignment on FSQVoteConfig");
static_assert(sizeof(FSQVoteConfig) == 0x000040, "Wrong size on FSQVoteConfig");
static_assert(offsetof(FSQVoteConfig, Data) == 0x000000, "Member 'FSQVoteConfig::Data' has a wrong offset!");
static_assert(offsetof(FSQVoteConfig, Duration) == 0x000010, "Member 'FSQVoteConfig::Duration' has a wrong offset!");
static_assert(offsetof(FSQVoteConfig, AccessFilter) == 0x000018, "Member 'FSQVoteConfig::AccessFilter' has a wrong offset!");
static_assert(offsetof(FSQVoteConfig, TeamFilter) == 0x000020, "Member 'FSQVoteConfig::TeamFilter' has a wrong offset!");
static_assert(offsetof(FSQVoteConfig, AuthoritySessionType) == 0x000030, "Member 'FSQVoteConfig::AuthoritySessionType' has a wrong offset!");
static_assert(offsetof(FSQVoteConfig, bRegeneratePossible) == 0x000038, "Member 'FSQVoteConfig::bRegeneratePossible' has a wrong offset!");

// ScriptStruct Squad.SQServerSettings
// 0x02E8 (0x02E8 - 0x0000)
struct FSQServerSettings final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CAC[0x10];                                     // 0x0010(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPlayersDiffForTeamChanges;                      // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTeamChanges;                                 // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventTeamChangeIfUnbalanced;                    // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnforceTeamBalance;                               // 0x0026(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommunityAdminAccess;                             // 0x0027(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordDemos;                                      // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPublicClientsToRecord;                       // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CAD[0x6];                                      // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         NumReservedSlots;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PublicQueueLimit;                                  // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RejoinSquadDelayAfterKick;                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CAE[0x8];                                      // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ServerMessageInterval;                             // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CAF[0x14];                                     // 0x0054(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AutoTKBanTime;                                     // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AutoTKBanNumberTKs;                                // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB0[0x3];                                      // 0x0070(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTKAutoKickEnabled;                                // 0x0073(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB1[0x4];                                      // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MessageOfTheDay;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapRotationMode                            MapRotationMode;                                   // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RandomizeAtStart;                                  // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseVoteFactions;                                   // 0x008A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseVoteLevel;                                      // 0x008B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseVoteLayer;                                      // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB2[0xB];                                      // 0x008D(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LayerVotingTime;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FactionVotingTime;                                 // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerOptionsNumber;                                // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FactionOptionsNumber;                              // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapSkipRounds;                                     // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapBiomeSkipRounds;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerSizeSkipRounds;                               // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB3[0xA4];                                     // 0x00B4(0x00A4)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LayerSkipRounds;                                   // 0x0158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FactionSkipRounds;                                 // 0x015C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FactionSetupSkipRounds;                            // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowPlayerCountThreshold;                           // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayVotes;                                     // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayVoteEnemyInfo;                             // 0x0169(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSymmetricalMatchUp;                               // 0x016A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUniqueMapVote;                                    // 0x016B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSelectFactions;                               // 0x016C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB4[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartupLayer;                                      // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ServerTags;                                        // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LevelRotation;                                     // 0x0190(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LayerVoteList;                                     // 0x01A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LayerRotation;                                     // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         LayerRotationLowPlayers;                           // 0x01C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExcludedFactions;                                  // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExcludedFactionTypes;                              // 0x01E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExcludedFactionSetups;                             // 0x01F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExcludedLevels;                                    // 0x0200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ExcludedLayers;                                    // 0x0210(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSQCustomSettings                      CustomOptions;                                     // 0x0220(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         LevelCountPerVote;                                 // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB5[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQVoteConfig                          LevelVoteConfig;                                   // 0x0248(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         LayerCountPerVote;                                 // 0x0288(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB6[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQVoteConfig                          LayerVoteConfig;                                   // 0x0290(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FSQVoteConfig>                  FactionVoteConfigs;                                // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         JoiningPlayerTimeout;                              // 0x02E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB7[0x4];                                      // 0x02E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQServerSettings) == 0x000008, "Wrong alignment on FSQServerSettings");
static_assert(sizeof(FSQServerSettings) == 0x0002E8, "Wrong size on FSQServerSettings");
static_assert(offsetof(FSQServerSettings, ServerName) == 0x000000, "Member 'FSQServerSettings::ServerName' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, NumPlayersDiffForTeamChanges) == 0x000020, "Member 'FSQServerSettings::NumPlayersDiffForTeamChanges' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bAllowTeamChanges) == 0x000024, "Member 'FSQServerSettings::bAllowTeamChanges' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bPreventTeamChangeIfUnbalanced) == 0x000025, "Member 'FSQServerSettings::bPreventTeamChangeIfUnbalanced' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bEnforceTeamBalance) == 0x000026, "Member 'FSQServerSettings::bEnforceTeamBalance' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bCommunityAdminAccess) == 0x000027, "Member 'FSQServerSettings::bCommunityAdminAccess' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bRecordDemos) == 0x000028, "Member 'FSQServerSettings::bRecordDemos' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bAllowPublicClientsToRecord) == 0x000029, "Member 'FSQServerSettings::bAllowPublicClientsToRecord' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, NumReservedSlots) == 0x000030, "Member 'FSQServerSettings::NumReservedSlots' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, PublicQueueLimit) == 0x000038, "Member 'FSQServerSettings::PublicQueueLimit' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, RejoinSquadDelayAfterKick) == 0x000040, "Member 'FSQServerSettings::RejoinSquadDelayAfterKick' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, MaxPlayers) == 0x000044, "Member 'FSQServerSettings::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, ServerMessageInterval) == 0x000050, "Member 'FSQServerSettings::ServerMessageInterval' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, AutoTKBanTime) == 0x000068, "Member 'FSQServerSettings::AutoTKBanTime' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, AutoTKBanNumberTKs) == 0x00006C, "Member 'FSQServerSettings::AutoTKBanNumberTKs' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bTKAutoKickEnabled) == 0x000073, "Member 'FSQServerSettings::bTKAutoKickEnabled' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, MessageOfTheDay) == 0x000078, "Member 'FSQServerSettings::MessageOfTheDay' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, MapRotationMode) == 0x000088, "Member 'FSQServerSettings::MapRotationMode' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, RandomizeAtStart) == 0x000089, "Member 'FSQServerSettings::RandomizeAtStart' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, UseVoteFactions) == 0x00008A, "Member 'FSQServerSettings::UseVoteFactions' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, UseVoteLevel) == 0x00008B, "Member 'FSQServerSettings::UseVoteLevel' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, UseVoteLayer) == 0x00008C, "Member 'FSQServerSettings::UseVoteLayer' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LayerVotingTime) == 0x000098, "Member 'FSQServerSettings::LayerVotingTime' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, FactionVotingTime) == 0x00009C, "Member 'FSQServerSettings::FactionVotingTime' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LayerOptionsNumber) == 0x0000A0, "Member 'FSQServerSettings::LayerOptionsNumber' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, FactionOptionsNumber) == 0x0000A4, "Member 'FSQServerSettings::FactionOptionsNumber' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, MapSkipRounds) == 0x0000A8, "Member 'FSQServerSettings::MapSkipRounds' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, MapBiomeSkipRounds) == 0x0000AC, "Member 'FSQServerSettings::MapBiomeSkipRounds' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LayerSizeSkipRounds) == 0x0000B0, "Member 'FSQServerSettings::LayerSizeSkipRounds' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LayerSkipRounds) == 0x000158, "Member 'FSQServerSettings::LayerSkipRounds' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, FactionSkipRounds) == 0x00015C, "Member 'FSQServerSettings::FactionSkipRounds' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, FactionSetupSkipRounds) == 0x000160, "Member 'FSQServerSettings::FactionSetupSkipRounds' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LowPlayerCountThreshold) == 0x000164, "Member 'FSQServerSettings::LowPlayerCountThreshold' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bDisplayVotes) == 0x000168, "Member 'FSQServerSettings::bDisplayVotes' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bDisplayVoteEnemyInfo) == 0x000169, "Member 'FSQServerSettings::bDisplayVoteEnemyInfo' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bSymmetricalMatchUp) == 0x00016A, "Member 'FSQServerSettings::bSymmetricalMatchUp' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bUniqueMapVote) == 0x00016B, "Member 'FSQServerSettings::bUniqueMapVote' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, bAutoSelectFactions) == 0x00016C, "Member 'FSQServerSettings::bAutoSelectFactions' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, StartupLayer) == 0x000170, "Member 'FSQServerSettings::StartupLayer' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, ServerTags) == 0x000180, "Member 'FSQServerSettings::ServerTags' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LevelRotation) == 0x000190, "Member 'FSQServerSettings::LevelRotation' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LayerVoteList) == 0x0001A0, "Member 'FSQServerSettings::LayerVoteList' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LayerRotation) == 0x0001B0, "Member 'FSQServerSettings::LayerRotation' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LayerRotationLowPlayers) == 0x0001C0, "Member 'FSQServerSettings::LayerRotationLowPlayers' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, ExcludedFactions) == 0x0001D0, "Member 'FSQServerSettings::ExcludedFactions' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, ExcludedFactionTypes) == 0x0001E0, "Member 'FSQServerSettings::ExcludedFactionTypes' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, ExcludedFactionSetups) == 0x0001F0, "Member 'FSQServerSettings::ExcludedFactionSetups' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, ExcludedLevels) == 0x000200, "Member 'FSQServerSettings::ExcludedLevels' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, ExcludedLayers) == 0x000210, "Member 'FSQServerSettings::ExcludedLayers' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, CustomOptions) == 0x000220, "Member 'FSQServerSettings::CustomOptions' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LevelCountPerVote) == 0x000240, "Member 'FSQServerSettings::LevelCountPerVote' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LevelVoteConfig) == 0x000248, "Member 'FSQServerSettings::LevelVoteConfig' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LayerCountPerVote) == 0x000288, "Member 'FSQServerSettings::LayerCountPerVote' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, LayerVoteConfig) == 0x000290, "Member 'FSQServerSettings::LayerVoteConfig' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, FactionVoteConfigs) == 0x0002D0, "Member 'FSQServerSettings::FactionVoteConfigs' has a wrong offset!");
static_assert(offsetof(FSQServerSettings, JoiningPlayerTimeout) == 0x0002E0, "Member 'FSQServerSettings::JoiningPlayerTimeout' has a wrong offset!");

// ScriptStruct Squad.SQConfigValueLoader
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSQConfigValueLoader
{
public:
	uint8                                         Pad_CB8[0x8];                                      // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQConfigValueLoader) == 0x000008, "Wrong alignment on FSQConfigValueLoader");
static_assert(sizeof(FSQConfigValueLoader) == 0x000008, "Wrong size on FSQConfigValueLoader");

// ScriptStruct Squad.SQItemSkinRestrictionParameters
// 0x0038 (0x0038 - 0x0000)
struct FSQItemSkinRestrictionParameters final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UODKBazaarSubsystem*                    BazaarSubsystem;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayer*                               Layer;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFactionSetup*                        FactionSetup;                                      // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FactionName;                                       // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQItemSkinCollection*                  SkinCollection;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkinName;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQItemSkinRestrictionParameters) == 0x000008, "Wrong alignment on FSQItemSkinRestrictionParameters");
static_assert(sizeof(FSQItemSkinRestrictionParameters) == 0x000038, "Wrong size on FSQItemSkinRestrictionParameters");
static_assert(offsetof(FSQItemSkinRestrictionParameters, PlayerState) == 0x000000, "Member 'FSQItemSkinRestrictionParameters::PlayerState' has a wrong offset!");
static_assert(offsetof(FSQItemSkinRestrictionParameters, BazaarSubsystem) == 0x000008, "Member 'FSQItemSkinRestrictionParameters::BazaarSubsystem' has a wrong offset!");
static_assert(offsetof(FSQItemSkinRestrictionParameters, Layer) == 0x000010, "Member 'FSQItemSkinRestrictionParameters::Layer' has a wrong offset!");
static_assert(offsetof(FSQItemSkinRestrictionParameters, FactionSetup) == 0x000018, "Member 'FSQItemSkinRestrictionParameters::FactionSetup' has a wrong offset!");
static_assert(offsetof(FSQItemSkinRestrictionParameters, FactionName) == 0x000020, "Member 'FSQItemSkinRestrictionParameters::FactionName' has a wrong offset!");
static_assert(offsetof(FSQItemSkinRestrictionParameters, SkinCollection) == 0x000028, "Member 'FSQItemSkinRestrictionParameters::SkinCollection' has a wrong offset!");
static_assert(offsetof(FSQItemSkinRestrictionParameters, SkinName) == 0x000030, "Member 'FSQItemSkinRestrictionParameters::SkinName' has a wrong offset!");

// ScriptStruct Squad.SQConfigMappedValueLoader
// 0x0050 (0x0058 - 0x0008)
struct FSQConfigMappedValueLoader final : public FSQConfigValueLoader
{
public:
	uint8                                         Pad_CB9[0x50];                                     // 0x0008(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQConfigMappedValueLoader) == 0x000008, "Wrong alignment on FSQConfigMappedValueLoader");
static_assert(sizeof(FSQConfigMappedValueLoader) == 0x000058, "Wrong size on FSQConfigMappedValueLoader");

// ScriptStruct Squad.SQConsoleCommand
// 0x0038 (0x0060 - 0x0028)
struct FSQConsoleCommand final : public FAutoCompleteCommand
{
public:
	uint8                                         Pad_CBA[0x38];                                     // 0x0028(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQConsoleCommand) == 0x000008, "Wrong alignment on FSQConsoleCommand");
static_assert(sizeof(FSQConsoleCommand) == 0x000060, "Wrong size on FSQConsoleCommand");

// ScriptStruct Squad.SQCoreStateId
// 0x0002 (0x0002 - 0x0000)
struct FSQCoreStateId final
{
public:
	uint16                                        Raw;                                               // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQCoreStateId) == 0x000002, "Wrong alignment on FSQCoreStateId");
static_assert(sizeof(FSQCoreStateId) == 0x000002, "Wrong size on FSQCoreStateId");
static_assert(offsetof(FSQCoreStateId, Raw) == 0x000000, "Member 'FSQCoreStateId::Raw' has a wrong offset!");

// ScriptStruct Squad.SQCoreStateDataToIdMap
// 0x0050 (0x0050 - 0x0000)
struct FSQCoreStateDataToIdMap final
{
public:
	TMap<class USQCoreStateData*, struct FSQCoreStateId> Raw;                                               // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQCoreStateDataToIdMap) == 0x000008, "Wrong alignment on FSQCoreStateDataToIdMap");
static_assert(sizeof(FSQCoreStateDataToIdMap) == 0x000050, "Wrong size on FSQCoreStateDataToIdMap");
static_assert(offsetof(FSQCoreStateDataToIdMap, Raw) == 0x000000, "Member 'FSQCoreStateDataToIdMap::Raw' has a wrong offset!");

// ScriptStruct Squad.SQCoreStateDataList
// 0x0010 (0x0010 - 0x0000)
struct FSQCoreStateDataList final
{
public:
	TArray<class USQCoreStateData*>               Raw;                                               // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQCoreStateDataList) == 0x000008, "Wrong alignment on FSQCoreStateDataList");
static_assert(sizeof(FSQCoreStateDataList) == 0x000010, "Wrong size on FSQCoreStateDataList");
static_assert(offsetof(FSQCoreStateDataList, Raw) == 0x000000, "Member 'FSQCoreStateDataList::Raw' has a wrong offset!");

// ScriptStruct Squad.SQSoldierInfo
// 0x0028 (0x0028 - 0x0000)
struct FSQSoldierInfo
{
public:
	int32                                         SquadId;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamId;                                        // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQAuthorityTypes                             LeaderState;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CBB[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQRoleSettings*                        CurrentRole;                                       // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSoldierInfo) == 0x000008, "Wrong alignment on FSQSoldierInfo");
static_assert(sizeof(FSQSoldierInfo) == 0x000028, "Wrong size on FSQSoldierInfo");
static_assert(offsetof(FSQSoldierInfo, SquadId) == 0x000000, "Member 'FSQSoldierInfo::SquadId' has a wrong offset!");
static_assert(offsetof(FSQSoldierInfo, FireTeamId) == 0x000004, "Member 'FSQSoldierInfo::FireTeamId' has a wrong offset!");
static_assert(offsetof(FSQSoldierInfo, LeaderState) == 0x000008, "Member 'FSQSoldierInfo::LeaderState' has a wrong offset!");
static_assert(offsetof(FSQSoldierInfo, CurrentRole) == 0x000010, "Member 'FSQSoldierInfo::CurrentRole' has a wrong offset!");
static_assert(offsetof(FSQSoldierInfo, PlayerName) == 0x000018, "Member 'FSQSoldierInfo::PlayerName' has a wrong offset!");

// ScriptStruct Squad.SQVehicleOccupantInfo
// 0x0010 (0x0038 - 0x0028)
struct FSQVehicleOccupantInfo final : public FSQSoldierInfo
{
public:
	uint8                                         bIsOccupied : 1;                                   // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CBC[0x7];                                      // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         PlayerState;                                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVehicleOccupantInfo) == 0x000008, "Wrong alignment on FSQVehicleOccupantInfo");
static_assert(sizeof(FSQVehicleOccupantInfo) == 0x000038, "Wrong size on FSQVehicleOccupantInfo");
static_assert(offsetof(FSQVehicleOccupantInfo, PlayerState) == 0x000030, "Member 'FSQVehicleOccupantInfo::PlayerState' has a wrong offset!");

// ScriptStruct Squad.WidgetGroup
// 0x0010 (0x0010 - 0x0000)
struct FWidgetGroup final
{
public:
	TArray<class USQCoreStateWidget*>             List;                                              // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWidgetGroup) == 0x000008, "Wrong alignment on FWidgetGroup");
static_assert(sizeof(FWidgetGroup) == 0x000010, "Wrong size on FWidgetGroup");
static_assert(offsetof(FWidgetGroup, List) == 0x000000, "Member 'FWidgetGroup::List' has a wrong offset!");

// ScriptStruct Squad.SQEffectParticleSound
// 0x0020 (0x0020 - 0x0000)
struct FSQEffectParticleSound final
{
public:
	TSubclassOf<class ASQLastingEffect>           LastingEffectClass;                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ParticleEffect;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraEffect;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundEffect;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEffectParticleSound) == 0x000008, "Wrong alignment on FSQEffectParticleSound");
static_assert(sizeof(FSQEffectParticleSound) == 0x000020, "Wrong size on FSQEffectParticleSound");
static_assert(offsetof(FSQEffectParticleSound, LastingEffectClass) == 0x000000, "Member 'FSQEffectParticleSound::LastingEffectClass' has a wrong offset!");
static_assert(offsetof(FSQEffectParticleSound, ParticleEffect) == 0x000008, "Member 'FSQEffectParticleSound::ParticleEffect' has a wrong offset!");
static_assert(offsetof(FSQEffectParticleSound, NiagaraEffect) == 0x000010, "Member 'FSQEffectParticleSound::NiagaraEffect' has a wrong offset!");
static_assert(offsetof(FSQEffectParticleSound, SoundEffect) == 0x000018, "Member 'FSQEffectParticleSound::SoundEffect' has a wrong offset!");

// ScriptStruct Squad.SQDamageEffect
// 0x0018 (0x0018 - 0x0000)
struct FSQDamageEffect final
{
public:
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQEffectParticleSound>         Effects;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQDamageEffect) == 0x000008, "Wrong alignment on FSQDamageEffect");
static_assert(sizeof(FSQDamageEffect) == 0x000018, "Wrong size on FSQDamageEffect");
static_assert(offsetof(FSQDamageEffect, DamageTypeClass) == 0x000000, "Member 'FSQDamageEffect::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FSQDamageEffect, Effects) == 0x000008, "Member 'FSQDamageEffect::Effects' has a wrong offset!");

// ScriptStruct Squad.SQDamageTypeEffects
// 0x0028 (0x0028 - 0x0000)
struct FSQDamageTypeEffects final
{
public:
	struct FSQDamageEffect                        DefaultDamageEffect;                               // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSQDamageEffect>                DamageEffects;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQDamageTypeEffects) == 0x000008, "Wrong alignment on FSQDamageTypeEffects");
static_assert(sizeof(FSQDamageTypeEffects) == 0x000028, "Wrong size on FSQDamageTypeEffects");
static_assert(offsetof(FSQDamageTypeEffects, DefaultDamageEffect) == 0x000000, "Member 'FSQDamageTypeEffects::DefaultDamageEffect' has a wrong offset!");
static_assert(offsetof(FSQDamageTypeEffects, DamageEffects) == 0x000018, "Member 'FSQDamageTypeEffects::DamageEffects' has a wrong offset!");

// ScriptStruct Squad.SQDamageModifier
// 0x0028 (0x0028 - 0x0000)
struct FSQDamageModifier final
{
public:
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Modifier;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForwardDamageToSoldier;                           // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CBD[0x3];                                      // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardDamageToSoldierModifier;                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForwardDeathToSoldier;                            // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncapSoldierOnDeath;                              // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyPassDamageIfDirectHit;                        // 0x0016(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CBE[0x1];                                      // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectHitDamageMultiplier;                         // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectHitDamageMultiplier;                       // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectHitRadialDamageMultiplier;                   // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CBF[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQDamageModifier) == 0x000008, "Wrong alignment on FSQDamageModifier");
static_assert(sizeof(FSQDamageModifier) == 0x000028, "Wrong size on FSQDamageModifier");
static_assert(offsetof(FSQDamageModifier, DamageTypeClass) == 0x000000, "Member 'FSQDamageModifier::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(FSQDamageModifier, Modifier) == 0x000008, "Member 'FSQDamageModifier::Modifier' has a wrong offset!");
static_assert(offsetof(FSQDamageModifier, bForwardDamageToSoldier) == 0x00000C, "Member 'FSQDamageModifier::bForwardDamageToSoldier' has a wrong offset!");
static_assert(offsetof(FSQDamageModifier, ForwardDamageToSoldierModifier) == 0x000010, "Member 'FSQDamageModifier::ForwardDamageToSoldierModifier' has a wrong offset!");
static_assert(offsetof(FSQDamageModifier, bForwardDeathToSoldier) == 0x000014, "Member 'FSQDamageModifier::bForwardDeathToSoldier' has a wrong offset!");
static_assert(offsetof(FSQDamageModifier, bIncapSoldierOnDeath) == 0x000015, "Member 'FSQDamageModifier::bIncapSoldierOnDeath' has a wrong offset!");
static_assert(offsetof(FSQDamageModifier, bOnlyPassDamageIfDirectHit) == 0x000016, "Member 'FSQDamageModifier::bOnlyPassDamageIfDirectHit' has a wrong offset!");
static_assert(offsetof(FSQDamageModifier, DirectHitDamageMultiplier) == 0x000018, "Member 'FSQDamageModifier::DirectHitDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FSQDamageModifier, IndirectHitDamageMultiplier) == 0x00001C, "Member 'FSQDamageModifier::IndirectHitDamageMultiplier' has a wrong offset!");
static_assert(offsetof(FSQDamageModifier, DirectHitRadialDamageMultiplier) == 0x000020, "Member 'FSQDamageModifier::DirectHitRadialDamageMultiplier' has a wrong offset!");

// ScriptStruct Squad.SQDeployableChangeStateEffect
// 0x0028 (0x0028 - 0x0000)
struct FSQDeployableChangeStateEffect final
{
public:
	ESQBuildState                                 OldBuildState;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQBuildState                                 NewBuildState;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC0[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CullingDistanceInMeters;                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEffectParticleSound                 Effect;                                            // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQDeployableChangeStateEffect) == 0x000008, "Wrong alignment on FSQDeployableChangeStateEffect");
static_assert(sizeof(FSQDeployableChangeStateEffect) == 0x000028, "Wrong size on FSQDeployableChangeStateEffect");
static_assert(offsetof(FSQDeployableChangeStateEffect, OldBuildState) == 0x000000, "Member 'FSQDeployableChangeStateEffect::OldBuildState' has a wrong offset!");
static_assert(offsetof(FSQDeployableChangeStateEffect, NewBuildState) == 0x000001, "Member 'FSQDeployableChangeStateEffect::NewBuildState' has a wrong offset!");
static_assert(offsetof(FSQDeployableChangeStateEffect, CullingDistanceInMeters) == 0x000004, "Member 'FSQDeployableChangeStateEffect::CullingDistanceInMeters' has a wrong offset!");
static_assert(offsetof(FSQDeployableChangeStateEffect, Effect) == 0x000008, "Member 'FSQDeployableChangeStateEffect::Effect' has a wrong offset!");

// ScriptStruct Squad.SQDeployableStateDamageEffect
// 0x0018 (0x0018 - 0x0000)
struct FSQDeployableStateDamageEffect final
{
public:
	ESQBuildState                                 OldBuildState;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQBuildState                                 NewBuildState;                                     // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC1[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CullingDistanceInMeters;                           // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQDamageEffect>                DamageEffects;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQDeployableStateDamageEffect) == 0x000008, "Wrong alignment on FSQDeployableStateDamageEffect");
static_assert(sizeof(FSQDeployableStateDamageEffect) == 0x000018, "Wrong size on FSQDeployableStateDamageEffect");
static_assert(offsetof(FSQDeployableStateDamageEffect, OldBuildState) == 0x000000, "Member 'FSQDeployableStateDamageEffect::OldBuildState' has a wrong offset!");
static_assert(offsetof(FSQDeployableStateDamageEffect, NewBuildState) == 0x000001, "Member 'FSQDeployableStateDamageEffect::NewBuildState' has a wrong offset!");
static_assert(offsetof(FSQDeployableStateDamageEffect, CullingDistanceInMeters) == 0x000004, "Member 'FSQDeployableStateDamageEffect::CullingDistanceInMeters' has a wrong offset!");
static_assert(offsetof(FSQDeployableStateDamageEffect, DamageEffects) == 0x000008, "Member 'FSQDeployableStateDamageEffect::DamageEffects' has a wrong offset!");

// ScriptStruct Squad.SQDrawChatStruct
// 0x00B8 (0x00B8 - 0x0000)
struct FSQDrawChatStruct final
{
public:
	struct FVector2D                              RenderPosition;                                    // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0008(0x0018)(NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQMessageBoxInfo                      Info;                                              // 0x0030(0x0080)(NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC2[0x4];                                      // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQDrawChatStruct) == 0x000008, "Wrong alignment on FSQDrawChatStruct");
static_assert(sizeof(FSQDrawChatStruct) == 0x0000B8, "Wrong size on FSQDrawChatStruct");
static_assert(offsetof(FSQDrawChatStruct, RenderPosition) == 0x000000, "Member 'FSQDrawChatStruct::RenderPosition' has a wrong offset!");
static_assert(offsetof(FSQDrawChatStruct, Text) == 0x000008, "Member 'FSQDrawChatStruct::Text' has a wrong offset!");
static_assert(offsetof(FSQDrawChatStruct, Color) == 0x000020, "Member 'FSQDrawChatStruct::Color' has a wrong offset!");
static_assert(offsetof(FSQDrawChatStruct, Info) == 0x000030, "Member 'FSQDrawChatStruct::Info' has a wrong offset!");
static_assert(offsetof(FSQDrawChatStruct, Index) == 0x0000B0, "Member 'FSQDrawChatStruct::Index' has a wrong offset!");

// ScriptStruct Squad.SQEmotePropData
// 0x0060 (0x0060 - 0x0000)
struct FSQEmotePropData final
{
public:
	bool                                          bSpawnInFirstPerson;                               // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnInThirdPerson;                               // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC3[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocket;                                      // 0x0004(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC4[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             ReplacementMaterials;                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         LifetimeOverride;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEmotePropMode                              Type;                                              // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC5[0x3];                                      // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            StaticMesh;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopAnimation;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC6[0x7];                                      // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FirstPersonAnimation;                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonAnimation;                              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQEmoteProp>               EmotePropClass;                                    // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UObject*                                UserData;                                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEmotePropData) == 0x000008, "Wrong alignment on FSQEmotePropData");
static_assert(sizeof(FSQEmotePropData) == 0x000060, "Wrong size on FSQEmotePropData");
static_assert(offsetof(FSQEmotePropData, bSpawnInFirstPerson) == 0x000000, "Member 'FSQEmotePropData::bSpawnInFirstPerson' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, bSpawnInThirdPerson) == 0x000001, "Member 'FSQEmotePropData::bSpawnInThirdPerson' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, AttachSocket) == 0x000004, "Member 'FSQEmotePropData::AttachSocket' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, ReplacementMaterials) == 0x000010, "Member 'FSQEmotePropData::ReplacementMaterials' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, LifetimeOverride) == 0x000020, "Member 'FSQEmotePropData::LifetimeOverride' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, Type) == 0x000024, "Member 'FSQEmotePropData::Type' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, StaticMesh) == 0x000028, "Member 'FSQEmotePropData::StaticMesh' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, SkeletalMesh) == 0x000030, "Member 'FSQEmotePropData::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, bLoopAnimation) == 0x000038, "Member 'FSQEmotePropData::bLoopAnimation' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, FirstPersonAnimation) == 0x000040, "Member 'FSQEmotePropData::FirstPersonAnimation' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, ThirdPersonAnimation) == 0x000048, "Member 'FSQEmotePropData::ThirdPersonAnimation' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, EmotePropClass) == 0x000050, "Member 'FSQEmotePropData::EmotePropClass' has a wrong offset!");
static_assert(offsetof(FSQEmotePropData, UserData) == 0x000058, "Member 'FSQEmotePropData::UserData' has a wrong offset!");

// ScriptStruct Squad.EmoteRandomizeData
// 0x0078 (0x0078 - 0x0000)
struct FEmoteRandomizeData final
{
public:
	int32                                         Weight;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC7[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FirstPersonView;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonView;                                   // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEmotePropData                       EmotePropInformation;                              // 0x0018(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteRandomizeData) == 0x000008, "Wrong alignment on FEmoteRandomizeData");
static_assert(sizeof(FEmoteRandomizeData) == 0x000078, "Wrong size on FEmoteRandomizeData");
static_assert(offsetof(FEmoteRandomizeData, Weight) == 0x000000, "Member 'FEmoteRandomizeData::Weight' has a wrong offset!");
static_assert(offsetof(FEmoteRandomizeData, FirstPersonView) == 0x000008, "Member 'FEmoteRandomizeData::FirstPersonView' has a wrong offset!");
static_assert(offsetof(FEmoteRandomizeData, ThirdPersonView) == 0x000010, "Member 'FEmoteRandomizeData::ThirdPersonView' has a wrong offset!");
static_assert(offsetof(FEmoteRandomizeData, EmotePropInformation) == 0x000018, "Member 'FEmoteRandomizeData::EmotePropInformation' has a wrong offset!");

// ScriptStruct Squad.EmoteAnimationData
// 0x0098 (0x0098 - 0x0000)
struct FEmoteAnimationData final
{
public:
	bool                                          bUseRandomEmotes;                                  // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC8[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEmoteRandomizeData>            RandomizedEmotes;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC9[0x8];                                      // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FirstPersonView;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonView;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PreviewEmote;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEmotePropData                       EmotePropInformation;                              // 0x0038(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmoteAnimationData) == 0x000008, "Wrong alignment on FEmoteAnimationData");
static_assert(sizeof(FEmoteAnimationData) == 0x000098, "Wrong size on FEmoteAnimationData");
static_assert(offsetof(FEmoteAnimationData, bUseRandomEmotes) == 0x000000, "Member 'FEmoteAnimationData::bUseRandomEmotes' has a wrong offset!");
static_assert(offsetof(FEmoteAnimationData, RandomizedEmotes) == 0x000008, "Member 'FEmoteAnimationData::RandomizedEmotes' has a wrong offset!");
static_assert(offsetof(FEmoteAnimationData, FirstPersonView) == 0x000020, "Member 'FEmoteAnimationData::FirstPersonView' has a wrong offset!");
static_assert(offsetof(FEmoteAnimationData, ThirdPersonView) == 0x000028, "Member 'FEmoteAnimationData::ThirdPersonView' has a wrong offset!");
static_assert(offsetof(FEmoteAnimationData, PreviewEmote) == 0x000030, "Member 'FEmoteAnimationData::PreviewEmote' has a wrong offset!");
static_assert(offsetof(FEmoteAnimationData, EmotePropInformation) == 0x000038, "Member 'FEmoteAnimationData::EmotePropInformation' has a wrong offset!");

// ScriptStruct Squad.BiomeTextures
// 0x0018 (0x0018 - 0x0000)
struct FBiomeTextures final
{
public:
	class UTexture*                               BaseColour_Alpha;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               Normal;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               AO_Roughness_Height;                               // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBiomeTextures) == 0x000008, "Wrong alignment on FBiomeTextures");
static_assert(sizeof(FBiomeTextures) == 0x000018, "Wrong size on FBiomeTextures");
static_assert(offsetof(FBiomeTextures, BaseColour_Alpha) == 0x000000, "Member 'FBiomeTextures::BaseColour_Alpha' has a wrong offset!");
static_assert(offsetof(FBiomeTextures, Normal) == 0x000008, "Member 'FBiomeTextures::Normal' has a wrong offset!");
static_assert(offsetof(FBiomeTextures, AO_Roughness_Height) == 0x000010, "Member 'FBiomeTextures::AO_Roughness_Height' has a wrong offset!");

// ScriptStruct Squad.SQAudioComponentPool
// 0x0020 (0x0020 - 0x0000)
struct FSQAudioComponentPool final
{
public:
	TArray<class UAudioComponent*>                AudioComponentPool;                                // 0x0000(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQAudioComponentPool) == 0x000008, "Wrong alignment on FSQAudioComponentPool");
static_assert(sizeof(FSQAudioComponentPool) == 0x000020, "Wrong size on FSQAudioComponentPool");
static_assert(offsetof(FSQAudioComponentPool, AudioComponentPool) == 0x000000, "Member 'FSQAudioComponentPool::AudioComponentPool' has a wrong offset!");
static_assert(offsetof(FSQAudioComponentPool, AttachToComponent) == 0x000010, "Member 'FSQAudioComponentPool::AttachToComponent' has a wrong offset!");
static_assert(offsetof(FSQAudioComponentPool, AttachPointName) == 0x000018, "Member 'FSQAudioComponentPool::AttachPointName' has a wrong offset!");

// ScriptStruct Squad.SQLayerSettings
// 0x0020 (0x0020 - 0x0000)
struct FSQLayerSettings final
{
public:
	class FName                                   Faction1;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Faction2;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Faction1Type;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Faction2Type;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQLayerSettings) == 0x000004, "Wrong alignment on FSQLayerSettings");
static_assert(sizeof(FSQLayerSettings) == 0x000020, "Wrong size on FSQLayerSettings");
static_assert(offsetof(FSQLayerSettings, Faction1) == 0x000000, "Member 'FSQLayerSettings::Faction1' has a wrong offset!");
static_assert(offsetof(FSQLayerSettings, Faction2) == 0x000008, "Member 'FSQLayerSettings::Faction2' has a wrong offset!");
static_assert(offsetof(FSQLayerSettings, Faction1Type) == 0x000010, "Member 'FSQLayerSettings::Faction1Type' has a wrong offset!");
static_assert(offsetof(FSQLayerSettings, Faction2Type) == 0x000018, "Member 'FSQLayerSettings::Faction2Type' has a wrong offset!");

// ScriptStruct Squad.SQVoteStatus
// 0x0030 (0x0030 - 0x0000)
struct FSQVoteStatus final
{
public:
	struct FSQLayerSettings                       FactionResult;                                     // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   LayerName;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VotePhase;                                         // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVoteStatus) == 0x000004, "Wrong alignment on FSQVoteStatus");
static_assert(sizeof(FSQVoteStatus) == 0x000030, "Wrong size on FSQVoteStatus");
static_assert(offsetof(FSQVoteStatus, FactionResult) == 0x000000, "Member 'FSQVoteStatus::FactionResult' has a wrong offset!");
static_assert(offsetof(FSQVoteStatus, LayerName) == 0x000020, "Member 'FSQVoteStatus::LayerName' has a wrong offset!");
static_assert(offsetof(FSQVoteStatus, VotePhase) == 0x000028, "Member 'FSQVoteStatus::VotePhase' has a wrong offset!");

// ScriptStruct Squad.SQAnimPlayTime
// 0x000C (0x000C - 0x0000)
struct FSQAnimPlayTime final
{
public:
	float                                         WeaponPlayTime;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Soldier1pPlayTime;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Soldier3pPlayTime;                                 // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQAnimPlayTime) == 0x000004, "Wrong alignment on FSQAnimPlayTime");
static_assert(sizeof(FSQAnimPlayTime) == 0x00000C, "Wrong size on FSQAnimPlayTime");
static_assert(offsetof(FSQAnimPlayTime, WeaponPlayTime) == 0x000000, "Member 'FSQAnimPlayTime::WeaponPlayTime' has a wrong offset!");
static_assert(offsetof(FSQAnimPlayTime, Soldier1pPlayTime) == 0x000004, "Member 'FSQAnimPlayTime::Soldier1pPlayTime' has a wrong offset!");
static_assert(offsetof(FSQAnimPlayTime, Soldier3pPlayTime) == 0x000008, "Member 'FSQAnimPlayTime::Soldier3pPlayTime' has a wrong offset!");

// ScriptStruct Squad.SQBlueprintFriend
// 0x0060 (0x0060 - 0x0000)
struct FSQBlueprintFriend final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RealName;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StatusString;                                      // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnline;                                         // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlaying;                                        // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayingThisGame;                                // 0x0032(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsJoinable;                                       // 0x0033(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CCA[0x2C];                                     // 0x0034(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQBlueprintFriend) == 0x000008, "Wrong alignment on FSQBlueprintFriend");
static_assert(sizeof(FSQBlueprintFriend) == 0x000060, "Wrong size on FSQBlueprintFriend");
static_assert(offsetof(FSQBlueprintFriend, DisplayName) == 0x000000, "Member 'FSQBlueprintFriend::DisplayName' has a wrong offset!");
static_assert(offsetof(FSQBlueprintFriend, RealName) == 0x000010, "Member 'FSQBlueprintFriend::RealName' has a wrong offset!");
static_assert(offsetof(FSQBlueprintFriend, StatusString) == 0x000020, "Member 'FSQBlueprintFriend::StatusString' has a wrong offset!");
static_assert(offsetof(FSQBlueprintFriend, bIsOnline) == 0x000030, "Member 'FSQBlueprintFriend::bIsOnline' has a wrong offset!");
static_assert(offsetof(FSQBlueprintFriend, bIsPlaying) == 0x000031, "Member 'FSQBlueprintFriend::bIsPlaying' has a wrong offset!");
static_assert(offsetof(FSQBlueprintFriend, bIsPlayingThisGame) == 0x000032, "Member 'FSQBlueprintFriend::bIsPlayingThisGame' has a wrong offset!");
static_assert(offsetof(FSQBlueprintFriend, bIsJoinable) == 0x000033, "Member 'FSQBlueprintFriend::bIsJoinable' has a wrong offset!");

// ScriptStruct Squad.BlueprintSessionResultChunk
// 0x0010 (0x0010 - 0x0000)
struct FBlueprintSessionResultChunk final
{
public:
	TArray<struct FBlueprintSessionResult>        Results;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlueprintSessionResultChunk) == 0x000008, "Wrong alignment on FBlueprintSessionResultChunk");
static_assert(sizeof(FBlueprintSessionResultChunk) == 0x000010, "Wrong size on FBlueprintSessionResultChunk");
static_assert(offsetof(FBlueprintSessionResultChunk, Results) == 0x000000, "Member 'FBlueprintSessionResultChunk::Results' has a wrong offset!");

// ScriptStruct Squad.SQGameFlags
// 0x0011 (0x0011 - 0x0000)
struct FSQGameFlags final
{
public:
	bool                                          UseFogOfWar;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceAllVehicleAvailability;                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceAllDeployableAvailability;                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceAllRoleAvailability;                          // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceAllActionAvailability;                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHelicoptersAvailable;                             // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBoatsAvailable;                                   // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTanksAvailable;                                   // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoTeamChangeTimer;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoRespawnTimer;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VehicleClaimingDisabled;                           // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VehicleTeamRequirementDisabled;                    // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VehicleKitRequirementDisabled;                     // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VehicleGodModeEnabled;                             // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceNoCommanderCooldowns;                         // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CommanderDisabled;                                 // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceAllowCommanderActions;                        // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQGameFlags) == 0x000001, "Wrong alignment on FSQGameFlags");
static_assert(sizeof(FSQGameFlags) == 0x000011, "Wrong size on FSQGameFlags");
static_assert(offsetof(FSQGameFlags, UseFogOfWar) == 0x000000, "Member 'FSQGameFlags::UseFogOfWar' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, ForceAllVehicleAvailability) == 0x000001, "Member 'FSQGameFlags::ForceAllVehicleAvailability' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, ForceAllDeployableAvailability) == 0x000002, "Member 'FSQGameFlags::ForceAllDeployableAvailability' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, ForceAllRoleAvailability) == 0x000003, "Member 'FSQGameFlags::ForceAllRoleAvailability' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, ForceAllActionAvailability) == 0x000004, "Member 'FSQGameFlags::ForceAllActionAvailability' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, bHelicoptersAvailable) == 0x000005, "Member 'FSQGameFlags::bHelicoptersAvailable' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, bBoatsAvailable) == 0x000006, "Member 'FSQGameFlags::bBoatsAvailable' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, bTanksAvailable) == 0x000007, "Member 'FSQGameFlags::bTanksAvailable' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, NoTeamChangeTimer) == 0x000008, "Member 'FSQGameFlags::NoTeamChangeTimer' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, NoRespawnTimer) == 0x000009, "Member 'FSQGameFlags::NoRespawnTimer' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, VehicleClaimingDisabled) == 0x00000A, "Member 'FSQGameFlags::VehicleClaimingDisabled' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, VehicleTeamRequirementDisabled) == 0x00000B, "Member 'FSQGameFlags::VehicleTeamRequirementDisabled' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, VehicleKitRequirementDisabled) == 0x00000C, "Member 'FSQGameFlags::VehicleKitRequirementDisabled' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, VehicleGodModeEnabled) == 0x00000D, "Member 'FSQGameFlags::VehicleGodModeEnabled' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, ForceNoCommanderCooldowns) == 0x00000E, "Member 'FSQGameFlags::ForceNoCommanderCooldowns' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, CommanderDisabled) == 0x00000F, "Member 'FSQGameFlags::CommanderDisabled' has a wrong offset!");
static_assert(offsetof(FSQGameFlags, ForceAllowCommanderActions) == 0x000010, "Member 'FSQGameFlags::ForceAllowCommanderActions' has a wrong offset!");

// ScriptStruct Squad.SQGameSubsystemObject
// 0x0018 (0x0018 - 0x0000)
struct FSQGameSubsystemObject final
{
public:
	class FString                                 SubsystemClass;                                    // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunOnServer;                                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunOnClient;                                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CCB[0x6];                                      // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQGameSubsystemObject) == 0x000008, "Wrong alignment on FSQGameSubsystemObject");
static_assert(sizeof(FSQGameSubsystemObject) == 0x000018, "Wrong size on FSQGameSubsystemObject");
static_assert(offsetof(FSQGameSubsystemObject, SubsystemClass) == 0x000000, "Member 'FSQGameSubsystemObject::SubsystemClass' has a wrong offset!");
static_assert(offsetof(FSQGameSubsystemObject, bRunOnServer) == 0x000010, "Member 'FSQGameSubsystemObject::bRunOnServer' has a wrong offset!");
static_assert(offsetof(FSQGameSubsystemObject, bRunOnClient) == 0x000011, "Member 'FSQGameSubsystemObject::bRunOnClient' has a wrong offset!");

// ScriptStruct Squad.SQSkinArray
// 0x0010 (0x0010 - 0x0000)
struct FSQSkinArray final
{
public:
	TArray<class FName>                           Skins;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSkinArray) == 0x000008, "Wrong alignment on FSQSkinArray");
static_assert(sizeof(FSQSkinArray) == 0x000010, "Wrong size on FSQSkinArray");
static_assert(offsetof(FSQSkinArray, Skins) == 0x000000, "Member 'FSQSkinArray::Skins' has a wrong offset!");

// ScriptStruct Squad.SQJoyStickConfig
// 0x0010 (0x0010 - 0x0000)
struct FSQJoyStickConfig final
{
public:
	ESQJoystickCurveTypes                         CurveType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CCC[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeadZone;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlipFactor;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CCD[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurveFactor;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQJoyStickConfig) == 0x000004, "Wrong alignment on FSQJoyStickConfig");
static_assert(sizeof(FSQJoyStickConfig) == 0x000010, "Wrong size on FSQJoyStickConfig");
static_assert(offsetof(FSQJoyStickConfig, CurveType) == 0x000000, "Member 'FSQJoyStickConfig::CurveType' has a wrong offset!");
static_assert(offsetof(FSQJoyStickConfig, DeadZone) == 0x000004, "Member 'FSQJoyStickConfig::DeadZone' has a wrong offset!");
static_assert(offsetof(FSQJoyStickConfig, FlipFactor) == 0x000008, "Member 'FSQJoyStickConfig::FlipFactor' has a wrong offset!");
static_assert(offsetof(FSQJoyStickConfig, CurveFactor) == 0x00000C, "Member 'FSQJoyStickConfig::CurveFactor' has a wrong offset!");

// ScriptStruct Squad.SQGenericPunchInput
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FSQGenericPunchInput final
{
public:
	class UCurveVector*                           Curve;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Multiplier;                                        // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsetAxis;                                        // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PauseTime;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostPauseSafetyTimeout;                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x002C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUniquePunch;                                      // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldReplaceActiveUniquePunch;                   // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CCE[0x2];                                      // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayRate;                                          // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CCF[0x44];                                     // 0x003C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQGenericPunchInput) == 0x000010, "Wrong alignment on FSQGenericPunchInput");
static_assert(sizeof(FSQGenericPunchInput) == 0x000080, "Wrong size on FSQGenericPunchInput");
static_assert(offsetof(FSQGenericPunchInput, Curve) == 0x000000, "Member 'FSQGenericPunchInput::Curve' has a wrong offset!");
static_assert(offsetof(FSQGenericPunchInput, Multiplier) == 0x000008, "Member 'FSQGenericPunchInput::Multiplier' has a wrong offset!");
static_assert(offsetof(FSQGenericPunchInput, Offset) == 0x000014, "Member 'FSQGenericPunchInput::Offset' has a wrong offset!");
static_assert(offsetof(FSQGenericPunchInput, OffsetAxis) == 0x000018, "Member 'FSQGenericPunchInput::OffsetAxis' has a wrong offset!");
static_assert(offsetof(FSQGenericPunchInput, PauseTime) == 0x000024, "Member 'FSQGenericPunchInput::PauseTime' has a wrong offset!");
static_assert(offsetof(FSQGenericPunchInput, PostPauseSafetyTimeout) == 0x000028, "Member 'FSQGenericPunchInput::PostPauseSafetyTimeout' has a wrong offset!");
static_assert(offsetof(FSQGenericPunchInput, ID) == 0x00002C, "Member 'FSQGenericPunchInput::ID' has a wrong offset!");
static_assert(offsetof(FSQGenericPunchInput, bUniquePunch) == 0x000034, "Member 'FSQGenericPunchInput::bUniquePunch' has a wrong offset!");
static_assert(offsetof(FSQGenericPunchInput, bShouldReplaceActiveUniquePunch) == 0x000035, "Member 'FSQGenericPunchInput::bShouldReplaceActiveUniquePunch' has a wrong offset!");
static_assert(offsetof(FSQGenericPunchInput, PlayRate) == 0x000038, "Member 'FSQGenericPunchInput::PlayRate' has a wrong offset!");

// ScriptStruct Squad.SQDesignLink
// 0x0010 (0x0010 - 0x0000)
struct FSQDesignLink final
{
public:
	class AActor*                                 NodeA;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NodeB;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQDesignLink) == 0x000008, "Wrong alignment on FSQDesignLink");
static_assert(sizeof(FSQDesignLink) == 0x000010, "Wrong size on FSQDesignLink");
static_assert(offsetof(FSQDesignLink, NodeA) == 0x000000, "Member 'FSQDesignLink::NodeA' has a wrong offset!");
static_assert(offsetof(FSQDesignLink, NodeB) == 0x000008, "Member 'FSQDesignLink::NodeB' has a wrong offset!");

// ScriptStruct Squad.SQGraphLink
// 0x0010 (0x0010 - 0x0000)
struct FSQGraphLink final
{
public:
	class USQGraphNodeComponent*                  NodeA;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQGraphNodeComponent*                  NodeB;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQGraphLink) == 0x000008, "Wrong alignment on FSQGraphLink");
static_assert(sizeof(FSQGraphLink) == 0x000010, "Wrong size on FSQGraphLink");
static_assert(offsetof(FSQGraphLink, NodeA) == 0x000000, "Member 'FSQGraphLink::NodeA' has a wrong offset!");
static_assert(offsetof(FSQGraphLink, NodeB) == 0x000008, "Member 'FSQGraphLink::NodeB' has a wrong offset!");

// ScriptStruct Squad.SQRoute
// 0x0020 (0x0020 - 0x0000)
struct FSQRoute final
{
public:
	TArray<struct FSQGraphLink>                   Links;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USQCaptureZoneComponent*                Source;                                            // 0x0010(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQCaptureZoneComponent*                Destination;                                       // 0x0018(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQRoute) == 0x000008, "Wrong alignment on FSQRoute");
static_assert(sizeof(FSQRoute) == 0x000020, "Wrong size on FSQRoute");
static_assert(offsetof(FSQRoute, Links) == 0x000000, "Member 'FSQRoute::Links' has a wrong offset!");
static_assert(offsetof(FSQRoute, Source) == 0x000010, "Member 'FSQRoute::Source' has a wrong offset!");
static_assert(offsetof(FSQRoute, Destination) == 0x000018, "Member 'FSQRoute::Destination' has a wrong offset!");

// ScriptStruct Squad.SQRoute2
// 0x0050 (0x0050 - 0x0000)
struct FSQRoute2 final
{
public:
	TSet<struct FSQGraphLink>                     Links;                                             // 0x0000(0x0050)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQRoute2) == 0x000008, "Wrong alignment on FSQRoute2");
static_assert(sizeof(FSQRoute2) == 0x000050, "Wrong size on FSQRoute2");
static_assert(offsetof(FSQRoute2, Links) == 0x000000, "Member 'FSQRoute2::Links' has a wrong offset!");

// ScriptStruct Squad.SQGrenadeData
// 0x0048 (0x0048 - 0x0000)
struct FSQGrenadeData final
{
public:
	bool                                          bInfiniteAmmo;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD0[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitialAmmo;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAmmo;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverhandThrowVelocity;                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnderhandThrowVelocity;                            // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrowReadyTime;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverhandThrowTime;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnderhandThrowTime;                                // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverhandThrowDuration;                             // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnderhandThrowDuration;                            // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrowModeTransitionTime;                           // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FuseTimeMin;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FuseTimeMax;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReloadTime;                                        // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ProjectileClass;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProjectileOriginSocketName;                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQGrenadeData) == 0x000008, "Wrong alignment on FSQGrenadeData");
static_assert(sizeof(FSQGrenadeData) == 0x000048, "Wrong size on FSQGrenadeData");
static_assert(offsetof(FSQGrenadeData, bInfiniteAmmo) == 0x000000, "Member 'FSQGrenadeData::bInfiniteAmmo' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, InitialAmmo) == 0x000004, "Member 'FSQGrenadeData::InitialAmmo' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, MaxAmmo) == 0x000008, "Member 'FSQGrenadeData::MaxAmmo' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, OverhandThrowVelocity) == 0x00000C, "Member 'FSQGrenadeData::OverhandThrowVelocity' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, UnderhandThrowVelocity) == 0x000010, "Member 'FSQGrenadeData::UnderhandThrowVelocity' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, ThrowReadyTime) == 0x000014, "Member 'FSQGrenadeData::ThrowReadyTime' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, OverhandThrowTime) == 0x000018, "Member 'FSQGrenadeData::OverhandThrowTime' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, UnderhandThrowTime) == 0x00001C, "Member 'FSQGrenadeData::UnderhandThrowTime' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, OverhandThrowDuration) == 0x000020, "Member 'FSQGrenadeData::OverhandThrowDuration' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, UnderhandThrowDuration) == 0x000024, "Member 'FSQGrenadeData::UnderhandThrowDuration' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, ThrowModeTransitionTime) == 0x000028, "Member 'FSQGrenadeData::ThrowModeTransitionTime' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, FuseTimeMin) == 0x00002C, "Member 'FSQGrenadeData::FuseTimeMin' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, FuseTimeMax) == 0x000030, "Member 'FSQGrenadeData::FuseTimeMax' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, ReloadTime) == 0x000034, "Member 'FSQGrenadeData::ReloadTime' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, ProjectileClass) == 0x000038, "Member 'FSQGrenadeData::ProjectileClass' has a wrong offset!");
static_assert(offsetof(FSQGrenadeData, ProjectileOriginSocketName) == 0x000040, "Member 'FSQGrenadeData::ProjectileOriginSocketName' has a wrong offset!");

// ScriptStruct Squad.SQGroundVehicleWheelParameters
// 0x0048 (0x0048 - 0x0000)
struct FSQGroundVehicleWheelParameters final
{
public:
	float                                         WheelsInAir;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelsInWater;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelDepthUnderwater;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RPM;                                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongSlip;                                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LatSlip;                                           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Asphalt;                                           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dirt;                                              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Grass;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravel;                                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Metal;                                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mud;                                               // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Sand;                                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Snow;                                              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnowWet;                                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TallGrass;                                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Water;                                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Wood;                                              // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQGroundVehicleWheelParameters) == 0x000004, "Wrong alignment on FSQGroundVehicleWheelParameters");
static_assert(sizeof(FSQGroundVehicleWheelParameters) == 0x000048, "Wrong size on FSQGroundVehicleWheelParameters");
static_assert(offsetof(FSQGroundVehicleWheelParameters, WheelsInAir) == 0x000000, "Member 'FSQGroundVehicleWheelParameters::WheelsInAir' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, WheelsInWater) == 0x000004, "Member 'FSQGroundVehicleWheelParameters::WheelsInWater' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, WheelDepthUnderwater) == 0x000008, "Member 'FSQGroundVehicleWheelParameters::WheelDepthUnderwater' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, RPM) == 0x00000C, "Member 'FSQGroundVehicleWheelParameters::RPM' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, LongSlip) == 0x000010, "Member 'FSQGroundVehicleWheelParameters::LongSlip' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, LatSlip) == 0x000014, "Member 'FSQGroundVehicleWheelParameters::LatSlip' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, Asphalt) == 0x000018, "Member 'FSQGroundVehicleWheelParameters::Asphalt' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, Dirt) == 0x00001C, "Member 'FSQGroundVehicleWheelParameters::Dirt' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, Grass) == 0x000020, "Member 'FSQGroundVehicleWheelParameters::Grass' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, Gravel) == 0x000024, "Member 'FSQGroundVehicleWheelParameters::Gravel' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, Metal) == 0x000028, "Member 'FSQGroundVehicleWheelParameters::Metal' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, Mud) == 0x00002C, "Member 'FSQGroundVehicleWheelParameters::Mud' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, Sand) == 0x000030, "Member 'FSQGroundVehicleWheelParameters::Sand' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, Snow) == 0x000034, "Member 'FSQGroundVehicleWheelParameters::Snow' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, SnowWet) == 0x000038, "Member 'FSQGroundVehicleWheelParameters::SnowWet' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, TallGrass) == 0x00003C, "Member 'FSQGroundVehicleWheelParameters::TallGrass' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, Water) == 0x000040, "Member 'FSQGroundVehicleWheelParameters::Water' has a wrong offset!");
static_assert(offsetof(FSQGroundVehicleWheelParameters, Wood) == 0x000044, "Member 'FSQGroundVehicleWheelParameters::Wood' has a wrong offset!");

// ScriptStruct Squad.SQVehicleEffectsQualitySetting
// 0x0008 (0x0008 - 0x0000)
struct FSQVehicleEffectsQualitySetting final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD1[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CullingDistance;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVehicleEffectsQualitySetting) == 0x000004, "Wrong alignment on FSQVehicleEffectsQualitySetting");
static_assert(sizeof(FSQVehicleEffectsQualitySetting) == 0x000008, "Wrong size on FSQVehicleEffectsQualitySetting");
static_assert(offsetof(FSQVehicleEffectsQualitySetting, bEnabled) == 0x000000, "Member 'FSQVehicleEffectsQualitySetting::bEnabled' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffectsQualitySetting, CullingDistance) == 0x000004, "Member 'FSQVehicleEffectsQualitySetting::CullingDistance' has a wrong offset!");

// ScriptStruct Squad.SQVehicleEffectConfig
// 0x0048 (0x0048 - 0x0000)
struct FSQVehicleEffectConfig final
{
public:
	class UParticleSystem*                        ParticleSystemTemplate;                            // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraParticleSystemTemplate;                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraParticleSystem;                             // 0x0018(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSounds;                                     // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD2[0x3];                                      // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WheelBoneName;                                     // 0x0024(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UVehicleWheel>           VehicleWheel;                                      // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USQDriveTrainComponent>  VehicleDriveTrainComponent;                        // 0x0034(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USQPhysicalMaterial>     PhysMaterial;                                      // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD3[0x4];                                      // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQVehicleEffectConfig) == 0x000008, "Wrong alignment on FSQVehicleEffectConfig");
static_assert(sizeof(FSQVehicleEffectConfig) == 0x000048, "Wrong size on FSQVehicleEffectConfig");
static_assert(offsetof(FSQVehicleEffectConfig, ParticleSystemTemplate) == 0x000000, "Member 'FSQVehicleEffectConfig::ParticleSystemTemplate' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffectConfig, NiagaraParticleSystemTemplate) == 0x000008, "Member 'FSQVehicleEffectConfig::NiagaraParticleSystemTemplate' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffectConfig, ParticleSystem) == 0x000010, "Member 'FSQVehicleEffectConfig::ParticleSystem' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffectConfig, NiagaraParticleSystem) == 0x000018, "Member 'FSQVehicleEffectConfig::NiagaraParticleSystem' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffectConfig, bEnableSounds) == 0x000020, "Member 'FSQVehicleEffectConfig::bEnableSounds' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffectConfig, WheelBoneName) == 0x000024, "Member 'FSQVehicleEffectConfig::WheelBoneName' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffectConfig, VehicleWheel) == 0x00002C, "Member 'FSQVehicleEffectConfig::VehicleWheel' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffectConfig, VehicleDriveTrainComponent) == 0x000034, "Member 'FSQVehicleEffectConfig::VehicleDriveTrainComponent' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffectConfig, PhysMaterial) == 0x00003C, "Member 'FSQVehicleEffectConfig::PhysMaterial' has a wrong offset!");

// ScriptStruct Squad.SQWeaponSpringOverrideParams
// 0x0028 (0x0028 - 0x0000)
struct FSQWeaponSpringOverrideParams final
{
public:
	uint8                                         WeaponSpringOverrideBitFlags;                      // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD4[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WeaponSpringADSMultiplierTranslation;              // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WeaponSpringADSMultiplierRotation;                 // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponSpringSide;                                  // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringFactor2;                               // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringClamp;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQWeaponSpringOverrideParams) == 0x000004, "Wrong alignment on FSQWeaponSpringOverrideParams");
static_assert(sizeof(FSQWeaponSpringOverrideParams) == 0x000028, "Wrong size on FSQWeaponSpringOverrideParams");
static_assert(offsetof(FSQWeaponSpringOverrideParams, WeaponSpringOverrideBitFlags) == 0x000000, "Member 'FSQWeaponSpringOverrideParams::WeaponSpringOverrideBitFlags' has a wrong offset!");
static_assert(offsetof(FSQWeaponSpringOverrideParams, WeaponSpringADSMultiplierTranslation) == 0x000004, "Member 'FSQWeaponSpringOverrideParams::WeaponSpringADSMultiplierTranslation' has a wrong offset!");
static_assert(offsetof(FSQWeaponSpringOverrideParams, WeaponSpringADSMultiplierRotation) == 0x000010, "Member 'FSQWeaponSpringOverrideParams::WeaponSpringADSMultiplierRotation' has a wrong offset!");
static_assert(offsetof(FSQWeaponSpringOverrideParams, WeaponSpringSide) == 0x00001C, "Member 'FSQWeaponSpringOverrideParams::WeaponSpringSide' has a wrong offset!");
static_assert(offsetof(FSQWeaponSpringOverrideParams, WeaponSpringFactor2) == 0x000020, "Member 'FSQWeaponSpringOverrideParams::WeaponSpringFactor2' has a wrong offset!");
static_assert(offsetof(FSQWeaponSpringOverrideParams, WeaponSpringClamp) == 0x000024, "Member 'FSQWeaponSpringOverrideParams::WeaponSpringClamp' has a wrong offset!");

// ScriptStruct Squad.SQMinimapMakerSettings
// 0x0580 (0x0580 - 0x0000)
struct FSQMinimapMakerSettings final
{
public:
	ESQTileResolution                             TileResolution;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTileCount                                  TileCount;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD5[0xE];                                      // 0x0002(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   MinimapPostProcessor;                              // 0x0010(0x0560)(Edit, NativeAccessSpecifierPublic)
	int32                                         MinimapFOV;                                        // 0x0570(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD6[0xC];                                      // 0x0574(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQMinimapMakerSettings) == 0x000010, "Wrong alignment on FSQMinimapMakerSettings");
static_assert(sizeof(FSQMinimapMakerSettings) == 0x000580, "Wrong size on FSQMinimapMakerSettings");
static_assert(offsetof(FSQMinimapMakerSettings, TileResolution) == 0x000000, "Member 'FSQMinimapMakerSettings::TileResolution' has a wrong offset!");
static_assert(offsetof(FSQMinimapMakerSettings, TileCount) == 0x000001, "Member 'FSQMinimapMakerSettings::TileCount' has a wrong offset!");
static_assert(offsetof(FSQMinimapMakerSettings, MinimapPostProcessor) == 0x000010, "Member 'FSQMinimapMakerSettings::MinimapPostProcessor' has a wrong offset!");
static_assert(offsetof(FSQMinimapMakerSettings, MinimapFOV) == 0x000570, "Member 'FSQMinimapMakerSettings::MinimapFOV' has a wrong offset!");

// ScriptStruct Squad.SQBoredMontageSet
// 0x0018 (0x0018 - 0x0000)
struct FSQBoredMontageSet final
{
public:
	class UAnimMontage*                           BoredWeaponMontage;                                // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Bored1pMontage;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Bored3pMontage;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQBoredMontageSet) == 0x000008, "Wrong alignment on FSQBoredMontageSet");
static_assert(sizeof(FSQBoredMontageSet) == 0x000018, "Wrong size on FSQBoredMontageSet");
static_assert(offsetof(FSQBoredMontageSet, BoredWeaponMontage) == 0x000000, "Member 'FSQBoredMontageSet::BoredWeaponMontage' has a wrong offset!");
static_assert(offsetof(FSQBoredMontageSet, Bored1pMontage) == 0x000008, "Member 'FSQBoredMontageSet::Bored1pMontage' has a wrong offset!");
static_assert(offsetof(FSQBoredMontageSet, Bored3pMontage) == 0x000010, "Member 'FSQBoredMontageSet::Bored3pMontage' has a wrong offset!");

// ScriptStruct Squad.SQMutualWeapon
// 0x00F0 (0x00F0 - 0x0000)
struct FSQMutualWeapon final
{
public:
	TSoftClassPtr<class UClass>                   Weapon;                                            // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckCurrentMagazineForEquip;                     // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckCurrentMagazineForUnequip;                    // 0x0029(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckPreviousMagazineForEquip;                    // 0x002A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD7[0x5];                                      // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           BothEmptyWeaponEquipMontage;                       // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BothEmpty1pEquipMontage;                           // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BothEmpty3pEquipMontage;                           // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BothEmptyEquipDuration;                            // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD8[0x4];                                      // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           PreviousEmptyOrIgnoreCurrentWeaponEquipMontage;    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PreviousEmptyOrIgnoreCurrent1pEquipMontage;        // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PreviousEmptyOrIgnoreCurrent3pEquipMontage;        // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousEmptyOrIgnoreCurrentEquipDuration;         // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD9[0x4];                                      // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CurrentEmptyOrIgnorePreviousWeaponEquipMontage;    // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CurrentEmptyOrIgnorePrevious1pEquipMontage;        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CurrentEmptyOrIgnorePrevious3pEquipMontage;        // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentEmptyOrIgnorePreviousEquipDuration;         // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDA[0x4];                                      // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           NoneEmptyOrIgnoreBothWeaponEquipMontage;           // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           NoneEmptyOrIgnoreBoth1pEquipMontage;               // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           NoneEmptyOrIgnoreBoth3pEquipMontage;               // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoneEmptyOrIgnoreBothEquipDuration;                // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDB[0x4];                                      // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CurrentEmptyWeaponUnequipMontage;                  // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CurrentEmpty1pUnequipMontage;                      // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           CurrentEmpty3pUnequipMontage;                      // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentEmptyUnequipDuration;                       // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDC[0x4];                                      // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           NoneOrIgnoreCurrentWeaponUnequipMontage;           // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           NoneOrIgnoreCurrent1pUnequipMontage;               // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           NoneOrIgnoreCurrent3pUnequipMontage;               // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoneOrIgnoreCurrentUnequipDuration;                // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDD[0x4];                                      // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQMutualWeapon) == 0x000008, "Wrong alignment on FSQMutualWeapon");
static_assert(sizeof(FSQMutualWeapon) == 0x0000F0, "Wrong size on FSQMutualWeapon");
static_assert(offsetof(FSQMutualWeapon, Weapon) == 0x000000, "Member 'FSQMutualWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, bCheckCurrentMagazineForEquip) == 0x000028, "Member 'FSQMutualWeapon::bCheckCurrentMagazineForEquip' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, CheckCurrentMagazineForUnequip) == 0x000029, "Member 'FSQMutualWeapon::CheckCurrentMagazineForUnequip' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, bCheckPreviousMagazineForEquip) == 0x00002A, "Member 'FSQMutualWeapon::bCheckPreviousMagazineForEquip' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, BothEmptyWeaponEquipMontage) == 0x000030, "Member 'FSQMutualWeapon::BothEmptyWeaponEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, BothEmpty1pEquipMontage) == 0x000038, "Member 'FSQMutualWeapon::BothEmpty1pEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, BothEmpty3pEquipMontage) == 0x000040, "Member 'FSQMutualWeapon::BothEmpty3pEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, BothEmptyEquipDuration) == 0x000048, "Member 'FSQMutualWeapon::BothEmptyEquipDuration' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, PreviousEmptyOrIgnoreCurrentWeaponEquipMontage) == 0x000050, "Member 'FSQMutualWeapon::PreviousEmptyOrIgnoreCurrentWeaponEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, PreviousEmptyOrIgnoreCurrent1pEquipMontage) == 0x000058, "Member 'FSQMutualWeapon::PreviousEmptyOrIgnoreCurrent1pEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, PreviousEmptyOrIgnoreCurrent3pEquipMontage) == 0x000060, "Member 'FSQMutualWeapon::PreviousEmptyOrIgnoreCurrent3pEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, PreviousEmptyOrIgnoreCurrentEquipDuration) == 0x000068, "Member 'FSQMutualWeapon::PreviousEmptyOrIgnoreCurrentEquipDuration' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, CurrentEmptyOrIgnorePreviousWeaponEquipMontage) == 0x000070, "Member 'FSQMutualWeapon::CurrentEmptyOrIgnorePreviousWeaponEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, CurrentEmptyOrIgnorePrevious1pEquipMontage) == 0x000078, "Member 'FSQMutualWeapon::CurrentEmptyOrIgnorePrevious1pEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, CurrentEmptyOrIgnorePrevious3pEquipMontage) == 0x000080, "Member 'FSQMutualWeapon::CurrentEmptyOrIgnorePrevious3pEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, CurrentEmptyOrIgnorePreviousEquipDuration) == 0x000088, "Member 'FSQMutualWeapon::CurrentEmptyOrIgnorePreviousEquipDuration' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, NoneEmptyOrIgnoreBothWeaponEquipMontage) == 0x000090, "Member 'FSQMutualWeapon::NoneEmptyOrIgnoreBothWeaponEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, NoneEmptyOrIgnoreBoth1pEquipMontage) == 0x000098, "Member 'FSQMutualWeapon::NoneEmptyOrIgnoreBoth1pEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, NoneEmptyOrIgnoreBoth3pEquipMontage) == 0x0000A0, "Member 'FSQMutualWeapon::NoneEmptyOrIgnoreBoth3pEquipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, NoneEmptyOrIgnoreBothEquipDuration) == 0x0000A8, "Member 'FSQMutualWeapon::NoneEmptyOrIgnoreBothEquipDuration' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, CurrentEmptyWeaponUnequipMontage) == 0x0000B0, "Member 'FSQMutualWeapon::CurrentEmptyWeaponUnequipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, CurrentEmpty1pUnequipMontage) == 0x0000B8, "Member 'FSQMutualWeapon::CurrentEmpty1pUnequipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, CurrentEmpty3pUnequipMontage) == 0x0000C0, "Member 'FSQMutualWeapon::CurrentEmpty3pUnequipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, CurrentEmptyUnequipDuration) == 0x0000C8, "Member 'FSQMutualWeapon::CurrentEmptyUnequipDuration' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, NoneOrIgnoreCurrentWeaponUnequipMontage) == 0x0000D0, "Member 'FSQMutualWeapon::NoneOrIgnoreCurrentWeaponUnequipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, NoneOrIgnoreCurrent1pUnequipMontage) == 0x0000D8, "Member 'FSQMutualWeapon::NoneOrIgnoreCurrent1pUnequipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, NoneOrIgnoreCurrent3pUnequipMontage) == 0x0000E0, "Member 'FSQMutualWeapon::NoneOrIgnoreCurrent3pUnequipMontage' has a wrong offset!");
static_assert(offsetof(FSQMutualWeapon, NoneOrIgnoreCurrentUnequipDuration) == 0x0000E8, "Member 'FSQMutualWeapon::NoneOrIgnoreCurrentUnequipDuration' has a wrong offset!");

// ScriptStruct Squad.SQHealSettings
// 0x0024 (0x0024 - 0x0000)
struct FSQHealSettings final
{
public:
	int32                                         TicketsLostOnRevive;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnHeal;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnSelfHeal;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForHeal;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForSelfHeal;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamPointsForRevive;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamPointsForHeal;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamPointsForSelfHeal;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayHealScore;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelaySelfHealScore;                                // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDE[0x2];                                      // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQHealSettings) == 0x000004, "Wrong alignment on FSQHealSettings");
static_assert(sizeof(FSQHealSettings) == 0x000024, "Wrong size on FSQHealSettings");
static_assert(offsetof(FSQHealSettings, TicketsLostOnRevive) == 0x000000, "Member 'FSQHealSettings::TicketsLostOnRevive' has a wrong offset!");
static_assert(offsetof(FSQHealSettings, TicketsLostOnHeal) == 0x000004, "Member 'FSQHealSettings::TicketsLostOnHeal' has a wrong offset!");
static_assert(offsetof(FSQHealSettings, TicketsLostOnSelfHeal) == 0x000008, "Member 'FSQHealSettings::TicketsLostOnSelfHeal' has a wrong offset!");
static_assert(offsetof(FSQHealSettings, PointsForHeal) == 0x00000C, "Member 'FSQHealSettings::PointsForHeal' has a wrong offset!");
static_assert(offsetof(FSQHealSettings, PointsForSelfHeal) == 0x000010, "Member 'FSQHealSettings::PointsForSelfHeal' has a wrong offset!");
static_assert(offsetof(FSQHealSettings, TeamPointsForRevive) == 0x000014, "Member 'FSQHealSettings::TeamPointsForRevive' has a wrong offset!");
static_assert(offsetof(FSQHealSettings, TeamPointsForHeal) == 0x000018, "Member 'FSQHealSettings::TeamPointsForHeal' has a wrong offset!");
static_assert(offsetof(FSQHealSettings, TeamPointsForSelfHeal) == 0x00001C, "Member 'FSQHealSettings::TeamPointsForSelfHeal' has a wrong offset!");
static_assert(offsetof(FSQHealSettings, DelayHealScore) == 0x000020, "Member 'FSQHealSettings::DelayHealScore' has a wrong offset!");
static_assert(offsetof(FSQHealSettings, DelaySelfHealScore) == 0x000021, "Member 'FSQHealSettings::DelaySelfHealScore' has a wrong offset!");

// ScriptStruct Squad.SQKillDeathSettings
// 0x0048 (0x0048 - 0x0000)
struct FSQKillDeathSettings final
{
public:
	int32                                         TicketsLostOnKill;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnSuicide;                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnTeamkill;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnKillCommander;                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnTeamkillCommander;                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostOnCommanderSuicide;                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQKillReportChannel                          KillChannel;                                       // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQKillReportChannel                          SuicideChannel;                                    // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQKillReportChannel                          TeamkillChannel;                                   // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CDF[0x1];                                      // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PointsForKill;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForWounded;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForSuicide;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForTeamkill;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointsForDeath;                                    // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamPointsForKill;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamPointsForSuicide;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamPointsForTeamkill;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamPointsForDeath;                                // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotifyKillerOnKill;                                // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotifyKillerOnTeamkill;                            // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayKillScore;                                    // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayTeamkillScore;                                // 0x0043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DelayDeathScore;                                   // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE0[0x3];                                      // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQKillDeathSettings) == 0x000004, "Wrong alignment on FSQKillDeathSettings");
static_assert(sizeof(FSQKillDeathSettings) == 0x000048, "Wrong size on FSQKillDeathSettings");
static_assert(offsetof(FSQKillDeathSettings, TicketsLostOnKill) == 0x000000, "Member 'FSQKillDeathSettings::TicketsLostOnKill' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, TicketsLostOnSuicide) == 0x000004, "Member 'FSQKillDeathSettings::TicketsLostOnSuicide' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, TicketsLostOnTeamkill) == 0x000008, "Member 'FSQKillDeathSettings::TicketsLostOnTeamkill' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, TicketsLostOnKillCommander) == 0x00000C, "Member 'FSQKillDeathSettings::TicketsLostOnKillCommander' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, TicketsLostOnTeamkillCommander) == 0x000010, "Member 'FSQKillDeathSettings::TicketsLostOnTeamkillCommander' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, TicketsLostOnCommanderSuicide) == 0x000014, "Member 'FSQKillDeathSettings::TicketsLostOnCommanderSuicide' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, KillChannel) == 0x000018, "Member 'FSQKillDeathSettings::KillChannel' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, SuicideChannel) == 0x000019, "Member 'FSQKillDeathSettings::SuicideChannel' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, TeamkillChannel) == 0x00001A, "Member 'FSQKillDeathSettings::TeamkillChannel' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, PointsForKill) == 0x00001C, "Member 'FSQKillDeathSettings::PointsForKill' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, PointsForWounded) == 0x000020, "Member 'FSQKillDeathSettings::PointsForWounded' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, PointsForSuicide) == 0x000024, "Member 'FSQKillDeathSettings::PointsForSuicide' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, PointsForTeamkill) == 0x000028, "Member 'FSQKillDeathSettings::PointsForTeamkill' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, PointsForDeath) == 0x00002C, "Member 'FSQKillDeathSettings::PointsForDeath' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, TeamPointsForKill) == 0x000030, "Member 'FSQKillDeathSettings::TeamPointsForKill' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, TeamPointsForSuicide) == 0x000034, "Member 'FSQKillDeathSettings::TeamPointsForSuicide' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, TeamPointsForTeamkill) == 0x000038, "Member 'FSQKillDeathSettings::TeamPointsForTeamkill' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, TeamPointsForDeath) == 0x00003C, "Member 'FSQKillDeathSettings::TeamPointsForDeath' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, NotifyKillerOnKill) == 0x000040, "Member 'FSQKillDeathSettings::NotifyKillerOnKill' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, NotifyKillerOnTeamkill) == 0x000041, "Member 'FSQKillDeathSettings::NotifyKillerOnTeamkill' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, DelayKillScore) == 0x000042, "Member 'FSQKillDeathSettings::DelayKillScore' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, DelayTeamkillScore) == 0x000043, "Member 'FSQKillDeathSettings::DelayTeamkillScore' has a wrong offset!");
static_assert(offsetof(FSQKillDeathSettings, DelayDeathScore) == 0x000044, "Member 'FSQKillDeathSettings::DelayDeathScore' has a wrong offset!");

// ScriptStruct Squad.SQSwayLimits
// 0x0004 (0x0004 - 0x0000)
struct FSQSwayLimits final
{
public:
	float                                         FinalSwayClamp;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSwayLimits) == 0x000004, "Wrong alignment on FSQSwayLimits");
static_assert(sizeof(FSQSwayLimits) == 0x000004, "Wrong size on FSQSwayLimits");
static_assert(offsetof(FSQSwayLimits, FinalSwayClamp) == 0x000000, "Member 'FSQSwayLimits::FinalSwayClamp' has a wrong offset!");

// ScriptStruct Squad.SQFactionTypeId
// 0x0030 (0x0030 - 0x0000)
struct FSQFactionTypeId final
{
public:
	TSoftObjectPtr<class USQFactionSetup>         FactionSetup;                                      // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypeID;                                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQFactionTypeId) == 0x000008, "Wrong alignment on FSQFactionTypeId");
static_assert(sizeof(FSQFactionTypeId) == 0x000030, "Wrong size on FSQFactionTypeId");
static_assert(offsetof(FSQFactionTypeId, FactionSetup) == 0x000000, "Member 'FSQFactionTypeId::FactionSetup' has a wrong offset!");
static_assert(offsetof(FSQFactionTypeId, TypeID) == 0x000028, "Member 'FSQFactionTypeId::TypeID' has a wrong offset!");

// ScriptStruct Squad.SQLayerPOIData
// 0x0028 (0x0028 - 0x0000)
struct FSQLayerPOIData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Order;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NameID;                                            // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQLayerPOIData) == 0x000008, "Wrong alignment on FSQLayerPOIData");
static_assert(sizeof(FSQLayerPOIData) == 0x000028, "Wrong size on FSQLayerPOIData");
static_assert(offsetof(FSQLayerPOIData, Location) == 0x000000, "Member 'FSQLayerPOIData::Location' has a wrong offset!");
static_assert(offsetof(FSQLayerPOIData, Order) == 0x00000C, "Member 'FSQLayerPOIData::Order' has a wrong offset!");
static_assert(offsetof(FSQLayerPOIData, NameID) == 0x000010, "Member 'FSQLayerPOIData::NameID' has a wrong offset!");

// ScriptStruct Squad.SQRecoilData
// 0x0048 (0x0048 - 0x0000)
struct FSQRecoilData final
{
public:
	struct FVector2D                              RecoilFactorMin;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RecoilFactorMax;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilZoomFactor;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilDuration;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotAimingDownSightsMultiplier;                     // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE1[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RecoilCurve;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RecoilCurveCrouch;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RecoilCurveProne;                                  // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoilCurveIndex;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRecoilMultipliers;                             // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE2[0x3];                                      // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CrouchRecoilMultiplier;                            // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneRecoilMultiplier;                             // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQRecoilData) == 0x000008, "Wrong alignment on FSQRecoilData");
static_assert(sizeof(FSQRecoilData) == 0x000048, "Wrong size on FSQRecoilData");
static_assert(offsetof(FSQRecoilData, RecoilFactorMin) == 0x000000, "Member 'FSQRecoilData::RecoilFactorMin' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, RecoilFactorMax) == 0x000008, "Member 'FSQRecoilData::RecoilFactorMax' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, RecoilZoomFactor) == 0x000010, "Member 'FSQRecoilData::RecoilZoomFactor' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, RecoilDuration) == 0x000014, "Member 'FSQRecoilData::RecoilDuration' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, NotAimingDownSightsMultiplier) == 0x000018, "Member 'FSQRecoilData::NotAimingDownSightsMultiplier' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, RecoilCurve) == 0x000020, "Member 'FSQRecoilData::RecoilCurve' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, RecoilCurveCrouch) == 0x000028, "Member 'FSQRecoilData::RecoilCurveCrouch' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, RecoilCurveProne) == 0x000030, "Member 'FSQRecoilData::RecoilCurveProne' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, RecoilCurveIndex) == 0x000038, "Member 'FSQRecoilData::RecoilCurveIndex' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, bUseRecoilMultipliers) == 0x00003C, "Member 'FSQRecoilData::bUseRecoilMultipliers' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, CrouchRecoilMultiplier) == 0x000040, "Member 'FSQRecoilData::CrouchRecoilMultiplier' has a wrong offset!");
static_assert(offsetof(FSQRecoilData, ProneRecoilMultiplier) == 0x000044, "Member 'FSQRecoilData::ProneRecoilMultiplier' has a wrong offset!");

// ScriptStruct Squad.SQFactionType
// 0x0078 (0x0078 - 0x0000)
struct FSQFactionType final
{
public:
	TSoftObjectPtr<class USQFactionSetup>         Faction;                                           // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class USQFactionSetup>> Types;                                             // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQFactionType) == 0x000008, "Wrong alignment on FSQFactionType");
static_assert(sizeof(FSQFactionType) == 0x000078, "Wrong size on FSQFactionType");
static_assert(offsetof(FSQFactionType, Faction) == 0x000000, "Member 'FSQFactionType::Faction' has a wrong offset!");
static_assert(offsetof(FSQFactionType, Types) == 0x000028, "Member 'FSQFactionType::Types' has a wrong offset!");

// ScriptStruct Squad.SQServerAddressInfo
// 0x0020 (0x0020 - 0x0000)
struct FSQServerAddressInfo final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Port;                                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQServerAddressInfo) == 0x000008, "Wrong alignment on FSQServerAddressInfo");
static_assert(sizeof(FSQServerAddressInfo) == 0x000020, "Wrong size on FSQServerAddressInfo");
static_assert(offsetof(FSQServerAddressInfo, Ip) == 0x000000, "Member 'FSQServerAddressInfo::Ip' has a wrong offset!");
static_assert(offsetof(FSQServerAddressInfo, Port) == 0x000010, "Member 'FSQServerAddressInfo::Port' has a wrong offset!");

// ScriptStruct Squad.SQLicenseManagerInfo
// 0x0078 (0x0078 - 0x0000)
struct FSQLicenseManagerInfo final
{
public:
	struct FSQServerAddressInfo                   ServerAddress;                                     // 0x0000(0x0020)(NativeAccessSpecifierPublic)
	int32                                         LicenseNumber;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE3[0x4];                                      // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameVersion;                                       // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LicenseSignature;                                  // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerMessage;                                     // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerCount;                                       // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealthStatus;                                      // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PasswordProtected;                                 // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE4[0x3];                                      // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQLicenseManagerInfo) == 0x000008, "Wrong alignment on FSQLicenseManagerInfo");
static_assert(sizeof(FSQLicenseManagerInfo) == 0x000078, "Wrong size on FSQLicenseManagerInfo");
static_assert(offsetof(FSQLicenseManagerInfo, ServerAddress) == 0x000000, "Member 'FSQLicenseManagerInfo::ServerAddress' has a wrong offset!");
static_assert(offsetof(FSQLicenseManagerInfo, LicenseNumber) == 0x000020, "Member 'FSQLicenseManagerInfo::LicenseNumber' has a wrong offset!");
static_assert(offsetof(FSQLicenseManagerInfo, ServerName) == 0x000028, "Member 'FSQLicenseManagerInfo::ServerName' has a wrong offset!");
static_assert(offsetof(FSQLicenseManagerInfo, GameVersion) == 0x000038, "Member 'FSQLicenseManagerInfo::GameVersion' has a wrong offset!");
static_assert(offsetof(FSQLicenseManagerInfo, LicenseSignature) == 0x000048, "Member 'FSQLicenseManagerInfo::LicenseSignature' has a wrong offset!");
static_assert(offsetof(FSQLicenseManagerInfo, ServerMessage) == 0x000058, "Member 'FSQLicenseManagerInfo::ServerMessage' has a wrong offset!");
static_assert(offsetof(FSQLicenseManagerInfo, MaxPlayers) == 0x000068, "Member 'FSQLicenseManagerInfo::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FSQLicenseManagerInfo, PlayerCount) == 0x00006C, "Member 'FSQLicenseManagerInfo::PlayerCount' has a wrong offset!");
static_assert(offsetof(FSQLicenseManagerInfo, HealthStatus) == 0x000070, "Member 'FSQLicenseManagerInfo::HealthStatus' has a wrong offset!");
static_assert(offsetof(FSQLicenseManagerInfo, PasswordProtected) == 0x000074, "Member 'FSQLicenseManagerInfo::PasswordProtected' has a wrong offset!");

// ScriptStruct Squad.SQRejectedLicenseInfo
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSQRejectedLicenseInfo final
{
public:
	uint8                                         Pad_CE5[0x18];                                     // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQRejectedLicenseInfo) == 0x000008, "Wrong alignment on FSQRejectedLicenseInfo");
static_assert(sizeof(FSQRejectedLicenseInfo) == 0x000018, "Wrong size on FSQRejectedLicenseInfo");

// ScriptStruct Squad.SQLogisticsSettings
// 0x000C (0x000C - 0x0000)
struct FSQLogisticsSettings final
{
public:
	float                                         AmmoToScore;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstructionToScore;                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassengerPercent;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQLogisticsSettings) == 0x000004, "Wrong alignment on FSQLogisticsSettings");
static_assert(sizeof(FSQLogisticsSettings) == 0x00000C, "Wrong size on FSQLogisticsSettings");
static_assert(offsetof(FSQLogisticsSettings, AmmoToScore) == 0x000000, "Member 'FSQLogisticsSettings::AmmoToScore' has a wrong offset!");
static_assert(offsetof(FSQLogisticsSettings, ConstructionToScore) == 0x000004, "Member 'FSQLogisticsSettings::ConstructionToScore' has a wrong offset!");
static_assert(offsetof(FSQLogisticsSettings, PassengerPercent) == 0x000008, "Member 'FSQLogisticsSettings::PassengerPercent' has a wrong offset!");

// ScriptStruct Squad.SQLatticeLine
// 0x002C (0x002C - 0x0000)
struct FSQLatticeLine final
{
public:
	struct FVector                                StartWorldLocation;                                // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndWorldLocation;                                  // 0x000C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgeWidth;                                         // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQLatticeLine) == 0x000004, "Wrong alignment on FSQLatticeLine");
static_assert(sizeof(FSQLatticeLine) == 0x00002C, "Wrong size on FSQLatticeLine");
static_assert(offsetof(FSQLatticeLine, StartWorldLocation) == 0x000000, "Member 'FSQLatticeLine::StartWorldLocation' has a wrong offset!");
static_assert(offsetof(FSQLatticeLine, EndWorldLocation) == 0x00000C, "Member 'FSQLatticeLine::EndWorldLocation' has a wrong offset!");
static_assert(offsetof(FSQLatticeLine, Color) == 0x000018, "Member 'FSQLatticeLine::Color' has a wrong offset!");
static_assert(offsetof(FSQLatticeLine, EdgeWidth) == 0x000028, "Member 'FSQLatticeLine::EdgeWidth' has a wrong offset!");

// ScriptStruct Squad.TeamSquadFireteamIdKey
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FTeamSquadFireteamIdKey final
{
public:
	uint8                                         Pad_CE6[0xC];                                      // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamSquadFireteamIdKey) == 0x000004, "Wrong alignment on FTeamSquadFireteamIdKey");
static_assert(sizeof(FTeamSquadFireteamIdKey) == 0x00000C, "Wrong size on FTeamSquadFireteamIdKey");

// ScriptStruct Squad.SQMarkerLimiterTeam
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FSQMarkerLimiterTeam final
{
public:
	uint8                                         Pad_CE7[0xA0];                                     // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQMarkerLimiterTeam) == 0x000008, "Wrong alignment on FSQMarkerLimiterTeam");
static_assert(sizeof(FSQMarkerLimiterTeam) == 0x0000A0, "Wrong size on FSQMarkerLimiterTeam");

// ScriptStruct Squad.SQMarkerLimiterSquad
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x08) FSQMarkerLimiterSquad final
{
public:
	uint8                                         Pad_CE8[0xA0];                                     // 0x0000(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQMarkerLimiterSquad) == 0x000008, "Wrong alignment on FSQMarkerLimiterSquad");
static_assert(sizeof(FSQMarkerLimiterSquad) == 0x0000A0, "Wrong size on FSQMarkerLimiterSquad");

// ScriptStruct Squad.SQMarkerLimiterFireTeam
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FSQMarkerLimiterFireTeam final
{
public:
	uint8                                         Pad_CE9[0x50];                                     // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQMarkerLimiterFireTeam) == 0x000008, "Wrong alignment on FSQMarkerLimiterFireTeam");
static_assert(sizeof(FSQMarkerLimiterFireTeam) == 0x000050, "Wrong size on FSQMarkerLimiterFireTeam");

// ScriptStruct Squad.SQStaticMapMarkerArray
// 0x0040 (0x0148 - 0x0108)
struct FSQStaticMapMarkerArray final : public FFastArraySerializer
{
public:
	TArray<struct FSQMapMarkerFastArraySerializerItem> Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ModifiedMarkerIndices;                             // 0x0118(0x0010)(ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             MapMarkerCreatedEvent;                             // 0x0128(0x0010)(ZeroConstructor, InstancedReference, RepSkip, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             MapMarkerDeletedEvent;                             // 0x0138(0x0010)(ZeroConstructor, InstancedReference, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQStaticMapMarkerArray) == 0x000008, "Wrong alignment on FSQStaticMapMarkerArray");
static_assert(sizeof(FSQStaticMapMarkerArray) == 0x000148, "Wrong size on FSQStaticMapMarkerArray");
static_assert(offsetof(FSQStaticMapMarkerArray, Items) == 0x000108, "Member 'FSQStaticMapMarkerArray::Items' has a wrong offset!");
static_assert(offsetof(FSQStaticMapMarkerArray, ModifiedMarkerIndices) == 0x000118, "Member 'FSQStaticMapMarkerArray::ModifiedMarkerIndices' has a wrong offset!");
static_assert(offsetof(FSQStaticMapMarkerArray, MapMarkerCreatedEvent) == 0x000128, "Member 'FSQStaticMapMarkerArray::MapMarkerCreatedEvent' has a wrong offset!");
static_assert(offsetof(FSQStaticMapMarkerArray, MapMarkerDeletedEvent) == 0x000138, "Member 'FSQStaticMapMarkerArray::MapMarkerDeletedEvent' has a wrong offset!");

// ScriptStruct Squad.SQMenuItemStyle
// 0x0198 (0x01A0 - 0x0008)
struct FSQMenuItemStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            BackgroundBrush;                                   // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LeftArrowImage;                                    // 0x0090(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            RightArrowImage;                                   // 0x0118(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMenuItemStyle) == 0x000008, "Wrong alignment on FSQMenuItemStyle");
static_assert(sizeof(FSQMenuItemStyle) == 0x0001A0, "Wrong size on FSQMenuItemStyle");
static_assert(offsetof(FSQMenuItemStyle, BackgroundBrush) == 0x000008, "Member 'FSQMenuItemStyle::BackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSQMenuItemStyle, LeftArrowImage) == 0x000090, "Member 'FSQMenuItemStyle::LeftArrowImage' has a wrong offset!");
static_assert(offsetof(FSQMenuItemStyle, RightArrowImage) == 0x000118, "Member 'FSQMenuItemStyle::RightArrowImage' has a wrong offset!");

// ScriptStruct Squad.SQMenuStyle
// 0x01F8 (0x0200 - 0x0008)
struct FSQMenuStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            HeaderBackgroundBrush;                             // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            LeftBackgroundBrush;                               // 0x0090(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateBrush                            RightBackgroundBrush;                              // 0x0118(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateSound                            MenuEnterSound;                                    // 0x01A0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            MenuBackSound;                                     // 0x01B8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            OptionChangeSound;                                 // 0x01D0(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            MenuItemChangeSound;                               // 0x01E8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMenuStyle) == 0x000008, "Wrong alignment on FSQMenuStyle");
static_assert(sizeof(FSQMenuStyle) == 0x000200, "Wrong size on FSQMenuStyle");
static_assert(offsetof(FSQMenuStyle, HeaderBackgroundBrush) == 0x000008, "Member 'FSQMenuStyle::HeaderBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSQMenuStyle, LeftBackgroundBrush) == 0x000090, "Member 'FSQMenuStyle::LeftBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSQMenuStyle, RightBackgroundBrush) == 0x000118, "Member 'FSQMenuStyle::RightBackgroundBrush' has a wrong offset!");
static_assert(offsetof(FSQMenuStyle, MenuEnterSound) == 0x0001A0, "Member 'FSQMenuStyle::MenuEnterSound' has a wrong offset!");
static_assert(offsetof(FSQMenuStyle, MenuBackSound) == 0x0001B8, "Member 'FSQMenuStyle::MenuBackSound' has a wrong offset!");
static_assert(offsetof(FSQMenuStyle, OptionChangeSound) == 0x0001D0, "Member 'FSQMenuStyle::OptionChangeSound' has a wrong offset!");
static_assert(offsetof(FSQMenuStyle, MenuItemChangeSound) == 0x0001E8, "Member 'FSQMenuStyle::MenuItemChangeSound' has a wrong offset!");

// ScriptStruct Squad.SQSwayDynamicStamina
// 0x0008 (0x0008 - 0x0000)
struct FSQSwayDynamicStamina final
{
public:
	float                                         LowStaminaSwayFactor;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStaminaSwayFactor;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSwayDynamicStamina) == 0x000004, "Wrong alignment on FSQSwayDynamicStamina");
static_assert(sizeof(FSQSwayDynamicStamina) == 0x000008, "Wrong size on FSQSwayDynamicStamina");
static_assert(offsetof(FSQSwayDynamicStamina, LowStaminaSwayFactor) == 0x000000, "Member 'FSQSwayDynamicStamina::LowStaminaSwayFactor' has a wrong offset!");
static_assert(offsetof(FSQSwayDynamicStamina, FullStaminaSwayFactor) == 0x000004, "Member 'FSQSwayDynamicStamina::FullStaminaSwayFactor' has a wrong offset!");

// ScriptStruct Squad.SQRepMovement
// 0x0040 (0x0040 - 0x0000)
struct alignas(0x08) FSQRepMovement
{
public:
	uint8                                         Pad_CEA[0x8];                                      // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationZeroBased;                                 // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RotationalVelocity;                                // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTimestamp;                                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CEB[0x4];                                      // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQRepMovement) == 0x000008, "Wrong alignment on FSQRepMovement");
static_assert(sizeof(FSQRepMovement) == 0x000040, "Wrong size on FSQRepMovement");
static_assert(offsetof(FSQRepMovement, LocationZeroBased) == 0x000008, "Member 'FSQRepMovement::LocationZeroBased' has a wrong offset!");
static_assert(offsetof(FSQRepMovement, Velocity) == 0x000014, "Member 'FSQRepMovement::Velocity' has a wrong offset!");
static_assert(offsetof(FSQRepMovement, Rotation) == 0x000020, "Member 'FSQRepMovement::Rotation' has a wrong offset!");
static_assert(offsetof(FSQRepMovement, RotationalVelocity) == 0x00002C, "Member 'FSQRepMovement::RotationalVelocity' has a wrong offset!");
static_assert(offsetof(FSQRepMovement, ServerTimestamp) == 0x000038, "Member 'FSQRepMovement::ServerTimestamp' has a wrong offset!");

// ScriptStruct Squad.AdjustPositionAndRotationPacket
// 0x0030 (0x0030 - 0x0000)
struct FAdjustPositionAndRotationPacket final
{
public:
	uint32                                        UniqueID;                                          // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAcknowledge;                                     // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasPosition;                                       // 0x0009(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasRotation;                                       // 0x000A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasRotationVelocity;                               // 0x000B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationZeroBased;                                 // 0x000C(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0018(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdjustPositionAndRotationPacket) == 0x000004, "Wrong alignment on FAdjustPositionAndRotationPacket");
static_assert(sizeof(FAdjustPositionAndRotationPacket) == 0x000030, "Wrong size on FAdjustPositionAndRotationPacket");
static_assert(offsetof(FAdjustPositionAndRotationPacket, UniqueID) == 0x000000, "Member 'FAdjustPositionAndRotationPacket::UniqueID' has a wrong offset!");
static_assert(offsetof(FAdjustPositionAndRotationPacket, Timestamp) == 0x000004, "Member 'FAdjustPositionAndRotationPacket::Timestamp' has a wrong offset!");
static_assert(offsetof(FAdjustPositionAndRotationPacket, IsAcknowledge) == 0x000008, "Member 'FAdjustPositionAndRotationPacket::IsAcknowledge' has a wrong offset!");
static_assert(offsetof(FAdjustPositionAndRotationPacket, HasPosition) == 0x000009, "Member 'FAdjustPositionAndRotationPacket::HasPosition' has a wrong offset!");
static_assert(offsetof(FAdjustPositionAndRotationPacket, HasRotation) == 0x00000A, "Member 'FAdjustPositionAndRotationPacket::HasRotation' has a wrong offset!");
static_assert(offsetof(FAdjustPositionAndRotationPacket, HasRotationVelocity) == 0x00000B, "Member 'FAdjustPositionAndRotationPacket::HasRotationVelocity' has a wrong offset!");
static_assert(offsetof(FAdjustPositionAndRotationPacket, LocationZeroBased) == 0x00000C, "Member 'FAdjustPositionAndRotationPacket::LocationZeroBased' has a wrong offset!");
static_assert(offsetof(FAdjustPositionAndRotationPacket, Velocity) == 0x000018, "Member 'FAdjustPositionAndRotationPacket::Velocity' has a wrong offset!");
static_assert(offsetof(FAdjustPositionAndRotationPacket, Rotation) == 0x000024, "Member 'FAdjustPositionAndRotationPacket::Rotation' has a wrong offset!");

// ScriptStruct Squad.SQRotationConstraints
// 0x001C (0x001C - 0x0000)
struct FSQRotationConstraints final
{
public:
	struct FVector2D                              PitchInterval;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              YawInterval;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RollInterval;                                      // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockPitch;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockYaw;                                          // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockRoll;                                         // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CEC[0x1];                                      // 0x001B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQRotationConstraints) == 0x000004, "Wrong alignment on FSQRotationConstraints");
static_assert(sizeof(FSQRotationConstraints) == 0x00001C, "Wrong size on FSQRotationConstraints");
static_assert(offsetof(FSQRotationConstraints, PitchInterval) == 0x000000, "Member 'FSQRotationConstraints::PitchInterval' has a wrong offset!");
static_assert(offsetof(FSQRotationConstraints, YawInterval) == 0x000008, "Member 'FSQRotationConstraints::YawInterval' has a wrong offset!");
static_assert(offsetof(FSQRotationConstraints, RollInterval) == 0x000010, "Member 'FSQRotationConstraints::RollInterval' has a wrong offset!");
static_assert(offsetof(FSQRotationConstraints, bLockPitch) == 0x000018, "Member 'FSQRotationConstraints::bLockPitch' has a wrong offset!");
static_assert(offsetof(FSQRotationConstraints, bLockYaw) == 0x000019, "Member 'FSQRotationConstraints::bLockYaw' has a wrong offset!");
static_assert(offsetof(FSQRotationConstraints, bLockRoll) == 0x00001A, "Member 'FSQRotationConstraints::bLockRoll' has a wrong offset!");

// ScriptStruct Squad.SQNotificationLayout
// 0x0030 (0x0030 - 0x0000)
struct FSQNotificationLayout final
{
public:
	class UTexture2D*                             Icon;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconColor;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplayTime;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CED[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQNotificationLayout) == 0x000008, "Wrong alignment on FSQNotificationLayout");
static_assert(sizeof(FSQNotificationLayout) == 0x000030, "Wrong size on FSQNotificationLayout");
static_assert(offsetof(FSQNotificationLayout, Icon) == 0x000000, "Member 'FSQNotificationLayout::Icon' has a wrong offset!");
static_assert(offsetof(FSQNotificationLayout, IconColor) == 0x000008, "Member 'FSQNotificationLayout::IconColor' has a wrong offset!");
static_assert(offsetof(FSQNotificationLayout, TextColor) == 0x000018, "Member 'FSQNotificationLayout::TextColor' has a wrong offset!");
static_assert(offsetof(FSQNotificationLayout, DisplayTime) == 0x000028, "Member 'FSQNotificationLayout::DisplayTime' has a wrong offset!");

// ScriptStruct Squad.SQOptionsStyle
// 0x0030 (0x0038 - 0x0008)
struct FSQOptionsStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateSound                            AcceptChangesSound;                                // 0x0008(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSlateSound                            DiscardChangesSound;                               // 0x0020(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQOptionsStyle) == 0x000008, "Wrong alignment on FSQOptionsStyle");
static_assert(sizeof(FSQOptionsStyle) == 0x000038, "Wrong size on FSQOptionsStyle");
static_assert(offsetof(FSQOptionsStyle, AcceptChangesSound) == 0x000008, "Member 'FSQOptionsStyle::AcceptChangesSound' has a wrong offset!");
static_assert(offsetof(FSQOptionsStyle, DiscardChangesSound) == 0x000020, "Member 'FSQOptionsStyle::DiscardChangesSound' has a wrong offset!");

// ScriptStruct Squad.SQPatchItem
// 0x0040 (0x0040 - 0x0000)
struct FSQPatchItem final
{
public:
	class FText                                   PatchName;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PatchDescription;                                  // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UTexture2D*                             PatchImage;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PatchImageUI;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQPatchItem) == 0x000008, "Wrong alignment on FSQPatchItem");
static_assert(sizeof(FSQPatchItem) == 0x000040, "Wrong size on FSQPatchItem");
static_assert(offsetof(FSQPatchItem, PatchName) == 0x000000, "Member 'FSQPatchItem::PatchName' has a wrong offset!");
static_assert(offsetof(FSQPatchItem, PatchDescription) == 0x000018, "Member 'FSQPatchItem::PatchDescription' has a wrong offset!");
static_assert(offsetof(FSQPatchItem, PatchImage) == 0x000030, "Member 'FSQPatchItem::PatchImage' has a wrong offset!");
static_assert(offsetof(FSQPatchItem, PatchImageUI) == 0x000038, "Member 'FSQPatchItem::PatchImageUI' has a wrong offset!");

// ScriptStruct Squad.SQClanPacks_TableRow
// 0x0090 (0x0098 - 0x0008)
struct FSQClanPacks_TableRow final : public FTableRowBase
{
public:
	struct FSQPatchItem                           PatchInfo;                                         // 0x0008(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<class FString>                           MembersSteamId64;                                  // 0x0048(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQClanPacks_TableRow) == 0x000008, "Wrong alignment on FSQClanPacks_TableRow");
static_assert(sizeof(FSQClanPacks_TableRow) == 0x000098, "Wrong size on FSQClanPacks_TableRow");
static_assert(offsetof(FSQClanPacks_TableRow, PatchInfo) == 0x000008, "Member 'FSQClanPacks_TableRow::PatchInfo' has a wrong offset!");
static_assert(offsetof(FSQClanPacks_TableRow, MembersSteamId64) == 0x000048, "Member 'FSQClanPacks_TableRow::MembersSteamId64' has a wrong offset!");

// ScriptStruct Squad.SQSupporterPatchItem_TableRow
// 0x0040 (0x0048 - 0x0008)
struct FSQSupporterPatchItem_TableRow final : public FTableRowBase
{
public:
	struct FSQPatchItem                           PatchInfo;                                         // 0x0008(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSupporterPatchItem_TableRow) == 0x000008, "Wrong alignment on FSQSupporterPatchItem_TableRow");
static_assert(sizeof(FSQSupporterPatchItem_TableRow) == 0x000048, "Wrong size on FSQSupporterPatchItem_TableRow");
static_assert(offsetof(FSQSupporterPatchItem_TableRow, PatchInfo) == 0x000008, "Member 'FSQSupporterPatchItem_TableRow::PatchInfo' has a wrong offset!");

// ScriptStruct Squad.SQWeaponGroupData
// 0x001C (0x0028 - 0x000C)
struct FSQWeaponGroupData final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_CEE[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASQEquipableItem*>               Weapons;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedWeaponOffset;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQWeaponGroupData) == 0x000008, "Wrong alignment on FSQWeaponGroupData");
static_assert(sizeof(FSQWeaponGroupData) == 0x000028, "Wrong size on FSQWeaponGroupData");
static_assert(offsetof(FSQWeaponGroupData, Weapons) == 0x000010, "Member 'FSQWeaponGroupData::Weapons' has a wrong offset!");
static_assert(offsetof(FSQWeaponGroupData, Index) == 0x000020, "Member 'FSQWeaponGroupData::Index' has a wrong offset!");
static_assert(offsetof(FSQWeaponGroupData, SelectedWeaponOffset) == 0x000024, "Member 'FSQWeaponGroupData::SelectedWeaponOffset' has a wrong offset!");

// ScriptStruct Squad.SQWeaponGroupDataArray
// 0x0010 (0x0118 - 0x0108)
struct FSQWeaponGroupDataArray final : public FFastArraySerializer
{
public:
	TArray<struct FSQWeaponGroupData>             Items;                                             // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQWeaponGroupDataArray) == 0x000008, "Wrong alignment on FSQWeaponGroupDataArray");
static_assert(sizeof(FSQWeaponGroupDataArray) == 0x000118, "Wrong size on FSQWeaponGroupDataArray");
static_assert(offsetof(FSQWeaponGroupDataArray, Items) == 0x000108, "Member 'FSQWeaponGroupDataArray::Items' has a wrong offset!");

// ScriptStruct Squad.SQMovePostPhysicsTickFunction
// 0x0008 (0x0030 - 0x0028)
struct FSQMovePostPhysicsTickFunction final : public FTickFunction
{
public:
	class USQPawnMovementComponent*               Target;                                            // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMovePostPhysicsTickFunction) == 0x000008, "Wrong alignment on FSQMovePostPhysicsTickFunction");
static_assert(sizeof(FSQMovePostPhysicsTickFunction) == 0x000030, "Wrong size on FSQMovePostPhysicsTickFunction");
static_assert(offsetof(FSQMovePostPhysicsTickFunction, Target) == 0x000028, "Member 'FSQMovePostPhysicsTickFunction::Target' has a wrong offset!");

// ScriptStruct Squad.SQVehicleEffect
// 0x00A0 (0x00A0 - 0x0000)
struct FSQVehicleEffect final
{
public:
	struct FSQPhysMatVehicleFXData                VehicleFXData;                                     // 0x0000(0x0064)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_CEF[0x4];                                      // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              VehicleLightImpactSound;                           // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        VehicleLightImpactEffect;                          // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraVehicleLightImpactEffect;                   // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              VehicleImpactSound;                                // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        VehicleImpactEffect;                               // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraVehicleImpactEffect;                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoVehicleParticlesUseRotation;                    // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF0[0x7];                                      // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQVehicleEffect) == 0x000008, "Wrong alignment on FSQVehicleEffect");
static_assert(sizeof(FSQVehicleEffect) == 0x0000A0, "Wrong size on FSQVehicleEffect");
static_assert(offsetof(FSQVehicleEffect, VehicleFXData) == 0x000000, "Member 'FSQVehicleEffect::VehicleFXData' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffect, VehicleLightImpactSound) == 0x000068, "Member 'FSQVehicleEffect::VehicleLightImpactSound' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffect, VehicleLightImpactEffect) == 0x000070, "Member 'FSQVehicleEffect::VehicleLightImpactEffect' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffect, NiagaraVehicleLightImpactEffect) == 0x000078, "Member 'FSQVehicleEffect::NiagaraVehicleLightImpactEffect' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffect, VehicleImpactSound) == 0x000080, "Member 'FSQVehicleEffect::VehicleImpactSound' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffect, VehicleImpactEffect) == 0x000088, "Member 'FSQVehicleEffect::VehicleImpactEffect' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffect, NiagaraVehicleImpactEffect) == 0x000090, "Member 'FSQVehicleEffect::NiagaraVehicleImpactEffect' has a wrong offset!");
static_assert(offsetof(FSQVehicleEffect, bDoVehicleParticlesUseRotation) == 0x000098, "Member 'FSQVehicleEffect::bDoVehicleParticlesUseRotation' has a wrong offset!");

// ScriptStruct Squad.SQProjectileImpactEffect
// 0x0098 (0x0098 - 0x0000)
struct FSQProjectileImpactEffect
{
public:
	TArray<class UParticleSystem*>                Particles;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UNiagaraSystem*>                 NiagaraParticles;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class USQShockwave>               Shockwave;                                         // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundCue*>                      Sounds;                                            // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class USoundCue*>                      FirstPersonSounds;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class USoundCue*>                      RicochetSounds;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class USoundCue*>                      RicochetFirstPersonSounds;                         // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             Decals;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         bDoParticlesUseRotation : 1;                       // 0x0078(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CF1[0x3];                                      // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinDecalSize;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDecalSize;                                      // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkewDecalSize;                                    // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF2[0x3];                                      // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DecalDepth;                                        // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalLifeSpan;                                     // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeDecalRotation;                           // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF3[0x7];                                      // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQProjectileImpactEffect) == 0x000008, "Wrong alignment on FSQProjectileImpactEffect");
static_assert(sizeof(FSQProjectileImpactEffect) == 0x000098, "Wrong size on FSQProjectileImpactEffect");
static_assert(offsetof(FSQProjectileImpactEffect, Particles) == 0x000000, "Member 'FSQProjectileImpactEffect::Particles' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, NiagaraParticles) == 0x000010, "Member 'FSQProjectileImpactEffect::NiagaraParticles' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, Shockwave) == 0x000020, "Member 'FSQProjectileImpactEffect::Shockwave' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, Sounds) == 0x000028, "Member 'FSQProjectileImpactEffect::Sounds' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, FirstPersonSounds) == 0x000038, "Member 'FSQProjectileImpactEffect::FirstPersonSounds' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, RicochetSounds) == 0x000048, "Member 'FSQProjectileImpactEffect::RicochetSounds' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, RicochetFirstPersonSounds) == 0x000058, "Member 'FSQProjectileImpactEffect::RicochetFirstPersonSounds' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, Decals) == 0x000068, "Member 'FSQProjectileImpactEffect::Decals' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, MinDecalSize) == 0x00007C, "Member 'FSQProjectileImpactEffect::MinDecalSize' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, MaxDecalSize) == 0x000080, "Member 'FSQProjectileImpactEffect::MaxDecalSize' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, bSkewDecalSize) == 0x000084, "Member 'FSQProjectileImpactEffect::bSkewDecalSize' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, DecalDepth) == 0x000088, "Member 'FSQProjectileImpactEffect::DecalDepth' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, DecalLifeSpan) == 0x00008C, "Member 'FSQProjectileImpactEffect::DecalLifeSpan' has a wrong offset!");
static_assert(offsetof(FSQProjectileImpactEffect, bRandomizeDecalRotation) == 0x000090, "Member 'FSQProjectileImpactEffect::bRandomizeDecalRotation' has a wrong offset!");

// ScriptStruct Squad.SQExplosionEffect
// 0x0028 (0x00C0 - 0x0098)
struct FSQExplosionEffect final : public FSQProjectileImpactEffect
{
public:
	class UParticleSystem*                        ShockwaveParticleEffect;                           // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         ShockwaveNiagaraParticleEffect;                    // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ShockwaveSound;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ShockwaveDecalMaterial;                            // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              DebrisSound;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQExplosionEffect) == 0x000008, "Wrong alignment on FSQExplosionEffect");
static_assert(sizeof(FSQExplosionEffect) == 0x0000C0, "Wrong size on FSQExplosionEffect");
static_assert(offsetof(FSQExplosionEffect, ShockwaveParticleEffect) == 0x000098, "Member 'FSQExplosionEffect::ShockwaveParticleEffect' has a wrong offset!");
static_assert(offsetof(FSQExplosionEffect, ShockwaveNiagaraParticleEffect) == 0x0000A0, "Member 'FSQExplosionEffect::ShockwaveNiagaraParticleEffect' has a wrong offset!");
static_assert(offsetof(FSQExplosionEffect, ShockwaveSound) == 0x0000A8, "Member 'FSQExplosionEffect::ShockwaveSound' has a wrong offset!");
static_assert(offsetof(FSQExplosionEffect, ShockwaveDecalMaterial) == 0x0000B0, "Member 'FSQExplosionEffect::ShockwaveDecalMaterial' has a wrong offset!");
static_assert(offsetof(FSQExplosionEffect, DebrisSound) == 0x0000B8, "Member 'FSQExplosionEffect::DebrisSound' has a wrong offset!");

// ScriptStruct Squad.SQEffectsSet
// 0x0160 (0x0160 - 0x0000)
struct FSQEffectsSet final
{
public:
	struct FSQExplosionEffect                     ImpactEffects;                                     // 0x0000(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQProjectileImpactEffect              ThrowableEffects;                                  // 0x00C0(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOverlapsThrowableProjectiles;                     // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF4[0x7];                                      // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQEffectsSet) == 0x000008, "Wrong alignment on FSQEffectsSet");
static_assert(sizeof(FSQEffectsSet) == 0x000160, "Wrong size on FSQEffectsSet");
static_assert(offsetof(FSQEffectsSet, ImpactEffects) == 0x000000, "Member 'FSQEffectsSet::ImpactEffects' has a wrong offset!");
static_assert(offsetof(FSQEffectsSet, ThrowableEffects) == 0x0000C0, "Member 'FSQEffectsSet::ThrowableEffects' has a wrong offset!");
static_assert(offsetof(FSQEffectsSet, bOverlapsThrowableProjectiles) == 0x000158, "Member 'FSQEffectsSet::bOverlapsThrowableProjectiles' has a wrong offset!");

// ScriptStruct Squad.VehicleNWGearData
// 0x000C (0x000C - 0x0000)
struct FVehicleNWGearData final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownRatio;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpRatio;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleNWGearData) == 0x000004, "Wrong alignment on FVehicleNWGearData");
static_assert(sizeof(FVehicleNWGearData) == 0x00000C, "Wrong size on FVehicleNWGearData");
static_assert(offsetof(FVehicleNWGearData, Ratio) == 0x000000, "Member 'FVehicleNWGearData::Ratio' has a wrong offset!");
static_assert(offsetof(FVehicleNWGearData, DownRatio) == 0x000004, "Member 'FVehicleNWGearData::DownRatio' has a wrong offset!");
static_assert(offsetof(FVehicleNWGearData, UpRatio) == 0x000008, "Member 'FVehicleNWGearData::UpRatio' has a wrong offset!");

// ScriptStruct Squad.DeployableItem
// 0x000C (0x0018 - 0x000C)
struct FDeployableItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_CF5[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQDeployable*                          Deployable;                                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeployableItem) == 0x000008, "Wrong alignment on FDeployableItem");
static_assert(sizeof(FDeployableItem) == 0x000018, "Wrong size on FDeployableItem");
static_assert(offsetof(FDeployableItem, Deployable) == 0x000010, "Member 'FDeployableItem::Deployable' has a wrong offset!");

// ScriptStruct Squad.DeployableItemsArray
// 0x0010 (0x0118 - 0x0108)
struct FDeployableItemsArray final : public FFastArraySerializer
{
public:
	TArray<struct FDeployableItem>                Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDeployableItemsArray) == 0x000008, "Wrong alignment on FDeployableItemsArray");
static_assert(sizeof(FDeployableItemsArray) == 0x000118, "Wrong size on FDeployableItemsArray");
static_assert(offsetof(FDeployableItemsArray, Items) == 0x000108, "Member 'FDeployableItemsArray::Items' has a wrong offset!");

// ScriptStruct Squad.TeamSquadId
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FTeamSquadId final
{
public:
	uint8                                         Pad_CF6[0x8];                                      // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTeamSquadId) == 0x000004, "Wrong alignment on FTeamSquadId");
static_assert(sizeof(FTeamSquadId) == 0x000008, "Wrong size on FTeamSquadId");

// ScriptStruct Squad.SQRoleKitIconLookup
// 0x0008 (0x0010 - 0x0008)
struct FSQRoleKitIconLookup final : public FTableRowBase
{
public:
	class USQRoleSettings*                        RoleSetting;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQRoleKitIconLookup) == 0x000008, "Wrong alignment on FSQRoleKitIconLookup");
static_assert(sizeof(FSQRoleKitIconLookup) == 0x000010, "Wrong size on FSQRoleKitIconLookup");
static_assert(offsetof(FSQRoleKitIconLookup, RoleSetting) == 0x000008, "Member 'FSQRoleKitIconLookup::RoleSetting' has a wrong offset!");

// ScriptStruct Squad.SQRotationRepMovement
// 0x0000 (0x0040 - 0x0040)
struct FSQRotationRepMovement final : public FSQRepMovement
{
};
static_assert(alignof(FSQRotationRepMovement) == 0x000008, "Wrong alignment on FSQRotationRepMovement");
static_assert(sizeof(FSQRotationRepMovement) == 0x000040, "Wrong size on FSQRotationRepMovement");

// ScriptStruct Squad.RotorWashData
// 0x0018 (0x0018 - 0x0000)
struct FRotorWashData final
{
public:
	class USQRotorWashEffectSender*               Emitter;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EmitterPosition;                                   // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectRadius;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRotorWashData) == 0x000008, "Wrong alignment on FRotorWashData");
static_assert(sizeof(FRotorWashData) == 0x000018, "Wrong size on FRotorWashData");
static_assert(offsetof(FRotorWashData, Emitter) == 0x000000, "Member 'FRotorWashData::Emitter' has a wrong offset!");
static_assert(offsetof(FRotorWashData, EmitterPosition) == 0x000008, "Member 'FRotorWashData::EmitterPosition' has a wrong offset!");
static_assert(offsetof(FRotorWashData, EffectRadius) == 0x000014, "Member 'FRotorWashData::EffectRadius' has a wrong offset!");

// ScriptStruct Squad.SQSettingBase
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSQSettingBase
{
public:
	uint8                                         Pad_CF7[0x18];                                     // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Value;                                             // 0x0018(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CF8[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQSettingBase) == 0x000008, "Wrong alignment on FSQSettingBase");
static_assert(sizeof(FSQSettingBase) == 0x000020, "Wrong size on FSQSettingBase");
static_assert(offsetof(FSQSettingBase, Value) == 0x000018, "Member 'FSQSettingBase::Value' has a wrong offset!");

// ScriptStruct Squad.SQCVarSetting
// 0x0020 (0x0040 - 0x0020)
struct FSQCVarSetting : public FSQSettingBase
{
public:
	uint8                                         Pad_CF9[0x20];                                     // 0x0020(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQCVarSetting) == 0x000008, "Wrong alignment on FSQCVarSetting");
static_assert(sizeof(FSQCVarSetting) == 0x000040, "Wrong size on FSQCVarSetting");

// ScriptStruct Squad.SQFloatCVarSetting
// 0x0000 (0x0040 - 0x0040)
struct FSQFloatCVarSetting final : public FSQCVarSetting
{
};
static_assert(alignof(FSQFloatCVarSetting) == 0x000008, "Wrong alignment on FSQFloatCVarSetting");
static_assert(sizeof(FSQFloatCVarSetting) == 0x000040, "Wrong size on FSQFloatCVarSetting");

// ScriptStruct Squad.SQInt32CVarSetting
// 0x0000 (0x0040 - 0x0040)
struct FSQInt32CVarSetting final : public FSQCVarSetting
{
};
static_assert(alignof(FSQInt32CVarSetting) == 0x000008, "Wrong alignment on FSQInt32CVarSetting");
static_assert(sizeof(FSQInt32CVarSetting) == 0x000040, "Wrong size on FSQInt32CVarSetting");

// ScriptStruct Squad.SQScalabilitySetting
// 0x0038 (0x0058 - 0x0020)
struct FSQScalabilitySetting final : public FSQSettingBase
{
public:
	uint8                                         Pad_CFA[0x38];                                     // 0x0020(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQScalabilitySetting) == 0x000008, "Wrong alignment on FSQScalabilitySetting");
static_assert(sizeof(FSQScalabilitySetting) == 0x000058, "Wrong size on FSQScalabilitySetting");

// ScriptStruct Squad.IniConfigSetting
// 0x0030 (0x0050 - 0x0020)
struct FIniConfigSetting : public FSQSettingBase
{
public:
	uint8                                         Pad_CFB[0x30];                                     // 0x0020(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIniConfigSetting) == 0x000008, "Wrong alignment on FIniConfigSetting");
static_assert(sizeof(FIniConfigSetting) == 0x000050, "Wrong size on FIniConfigSetting");

// ScriptStruct Squad.BoolIniConfigSetting
// 0x0000 (0x0050 - 0x0050)
struct FBoolIniConfigSetting final : public FIniConfigSetting
{
};
static_assert(alignof(FBoolIniConfigSetting) == 0x000008, "Wrong alignment on FBoolIniConfigSetting");
static_assert(sizeof(FBoolIniConfigSetting) == 0x000050, "Wrong size on FBoolIniConfigSetting");

// ScriptStruct Squad.PlayerWidgetPair
// 0x0010 (0x0010 - 0x0000)
struct FPlayerWidgetPair final
{
public:
	class USQScoreboardPlayer*                    PlayerWidget;                                      // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         PlayerState;                                       // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerWidgetPair) == 0x000008, "Wrong alignment on FPlayerWidgetPair");
static_assert(sizeof(FPlayerWidgetPair) == 0x000010, "Wrong size on FPlayerWidgetPair");
static_assert(offsetof(FPlayerWidgetPair, PlayerWidget) == 0x000000, "Member 'FPlayerWidgetPair::PlayerWidget' has a wrong offset!");
static_assert(offsetof(FPlayerWidgetPair, PlayerState) == 0x000008, "Member 'FPlayerWidgetPair::PlayerState' has a wrong offset!");

// ScriptStruct Squad.SquadWidgetPair
// 0x0010 (0x0010 - 0x0000)
struct FSquadWidgetPair final
{
public:
	class USQScoreboardSquad*                     SquadWidget;                                       // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadState*                          SquadState;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSquadWidgetPair) == 0x000008, "Wrong alignment on FSquadWidgetPair");
static_assert(sizeof(FSquadWidgetPair) == 0x000010, "Wrong size on FSquadWidgetPair");
static_assert(offsetof(FSquadWidgetPair, SquadWidget) == 0x000000, "Member 'FSquadWidgetPair::SquadWidget' has a wrong offset!");
static_assert(offsetof(FSquadWidgetPair, SquadState) == 0x000008, "Member 'FSquadWidgetPair::SquadState' has a wrong offset!");

// ScriptStruct Squad.SQScoreboardStyle
// 0x0100 (0x0108 - 0x0008)
struct FSQScoreboardStyle final : public FSlateWidgetStyle
{
public:
	struct FSlateBrush                            ItemBorderBrush;                                   // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
	struct FSlateColor                            KillStatColor;                                     // 0x0090(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FSlateColor                            DeathStatColor;                                    // 0x00B8(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FSlateColor                            ScoreStatColor;                                    // 0x00E0(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQScoreboardStyle) == 0x000008, "Wrong alignment on FSQScoreboardStyle");
static_assert(sizeof(FSQScoreboardStyle) == 0x000108, "Wrong size on FSQScoreboardStyle");
static_assert(offsetof(FSQScoreboardStyle, ItemBorderBrush) == 0x000008, "Member 'FSQScoreboardStyle::ItemBorderBrush' has a wrong offset!");
static_assert(offsetof(FSQScoreboardStyle, KillStatColor) == 0x000090, "Member 'FSQScoreboardStyle::KillStatColor' has a wrong offset!");
static_assert(offsetof(FSQScoreboardStyle, DeathStatColor) == 0x0000B8, "Member 'FSQScoreboardStyle::DeathStatColor' has a wrong offset!");
static_assert(offsetof(FSQScoreboardStyle, ScoreStatColor) == 0x0000E0, "Member 'FSQScoreboardStyle::ScoreStatColor' has a wrong offset!");

// ScriptStruct Squad.ScriptContainer
// 0x0088 (0x0088 - 0x0000)
struct FScriptContainer final
{
public:
	TArray<class USQScriptAction*>                ScriptActions;                                     // 0x0000(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQScriptCondition*>             ScriptConditions;                                  // 0x0010(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class USQScriptCondition*, bool>         ConditionValues;                                   // 0x0020(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bShouldMeetAllConditionsToExecute;                 // 0x0070(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CFC[0x7];                                      // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ContextObject;                                     // 0x0078(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContainerID;                                       // 0x0080(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConditionsWereMet;                                // 0x0084(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CFD[0x3];                                      // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScriptContainer) == 0x000008, "Wrong alignment on FScriptContainer");
static_assert(sizeof(FScriptContainer) == 0x000088, "Wrong size on FScriptContainer");
static_assert(offsetof(FScriptContainer, ScriptActions) == 0x000000, "Member 'FScriptContainer::ScriptActions' has a wrong offset!");
static_assert(offsetof(FScriptContainer, ScriptConditions) == 0x000010, "Member 'FScriptContainer::ScriptConditions' has a wrong offset!");
static_assert(offsetof(FScriptContainer, ConditionValues) == 0x000020, "Member 'FScriptContainer::ConditionValues' has a wrong offset!");
static_assert(offsetof(FScriptContainer, bShouldMeetAllConditionsToExecute) == 0x000070, "Member 'FScriptContainer::bShouldMeetAllConditionsToExecute' has a wrong offset!");
static_assert(offsetof(FScriptContainer, ContextObject) == 0x000078, "Member 'FScriptContainer::ContextObject' has a wrong offset!");
static_assert(offsetof(FScriptContainer, ContainerID) == 0x000080, "Member 'FScriptContainer::ContainerID' has a wrong offset!");
static_assert(offsetof(FScriptContainer, bConditionsWereMet) == 0x000084, "Member 'FScriptContainer::bConditionsWereMet' has a wrong offset!");

// ScriptStruct Squad.SQSwayProneTransition
// 0x0004 (0x0004 - 0x0000)
struct FSQSwayProneTransition final
{
public:
	float                                         ProneTransitionSwayMin;                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSwayProneTransition) == 0x000004, "Wrong alignment on FSQSwayProneTransition");
static_assert(sizeof(FSQSwayProneTransition) == 0x000004, "Wrong size on FSQSwayProneTransition");
static_assert(offsetof(FSQSwayProneTransition, ProneTransitionSwayMin) == 0x000000, "Member 'FSQSwayProneTransition::ProneTransitionSwayMin' has a wrong offset!");

// ScriptStruct Squad.SQRotator_NetQuantizeShorts
// 0x0000 (0x000C - 0x000C)
struct FSQRotator_NetQuantizeShorts final : public FRotator
{
};
static_assert(alignof(FSQRotator_NetQuantizeShorts) == 0x000004, "Wrong alignment on FSQRotator_NetQuantizeShorts");
static_assert(sizeof(FSQRotator_NetQuantizeShorts) == 0x00000C, "Wrong size on FSQRotator_NetQuantizeShorts");

// ScriptStruct Squad.SQRotator_NetQuantizeBytes
// 0x0000 (0x000C - 0x000C)
struct FSQRotator_NetQuantizeBytes final : public FRotator
{
};
static_assert(alignof(FSQRotator_NetQuantizeBytes) == 0x000004, "Wrong alignment on FSQRotator_NetQuantizeBytes");
static_assert(sizeof(FSQRotator_NetQuantizeBytes) == 0x00000C, "Wrong size on FSQRotator_NetQuantizeBytes");

// ScriptStruct Squad.SQServerTag
// 0x0050 (0x0058 - 0x0008)
struct FSQServerTag final : public FTableRowBase
{
public:
	class FText                                   DisplayText;                                       // 0x0008(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   OverrideFilterText;                                // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESQTagType                                    TagType;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CFE[0x7];                                      // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Tooltip;                                           // 0x0040(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQServerTag) == 0x000008, "Wrong alignment on FSQServerTag");
static_assert(sizeof(FSQServerTag) == 0x000058, "Wrong size on FSQServerTag");
static_assert(offsetof(FSQServerTag, DisplayText) == 0x000008, "Member 'FSQServerTag::DisplayText' has a wrong offset!");
static_assert(offsetof(FSQServerTag, OverrideFilterText) == 0x000020, "Member 'FSQServerTag::OverrideFilterText' has a wrong offset!");
static_assert(offsetof(FSQServerTag, TagType) == 0x000038, "Member 'FSQServerTag::TagType' has a wrong offset!");
static_assert(offsetof(FSQServerTag, Tooltip) == 0x000040, "Member 'FSQServerTag::Tooltip' has a wrong offset!");

// ScriptStruct Squad.SkelMeshMergeSectionMapping_BP
// 0x0010 (0x0010 - 0x0000)
struct FSkelMeshMergeSectionMapping_BP final
{
public:
	TArray<int32>                                 SectionIDs;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkelMeshMergeSectionMapping_BP) == 0x000008, "Wrong alignment on FSkelMeshMergeSectionMapping_BP");
static_assert(sizeof(FSkelMeshMergeSectionMapping_BP) == 0x000010, "Wrong size on FSkelMeshMergeSectionMapping_BP");
static_assert(offsetof(FSkelMeshMergeSectionMapping_BP, SectionIDs) == 0x000000, "Member 'FSkelMeshMergeSectionMapping_BP::SectionIDs' has a wrong offset!");

// ScriptStruct Squad.SkelMeshMergeUVTransform
// 0x0010 (0x0010 - 0x0000)
struct FSkelMeshMergeUVTransform final
{
public:
	TArray<struct FTransform>                     UVTransforms;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkelMeshMergeUVTransform) == 0x000008, "Wrong alignment on FSkelMeshMergeUVTransform");
static_assert(sizeof(FSkelMeshMergeUVTransform) == 0x000010, "Wrong size on FSkelMeshMergeUVTransform");
static_assert(offsetof(FSkelMeshMergeUVTransform, UVTransforms) == 0x000000, "Member 'FSkelMeshMergeUVTransform::UVTransforms' has a wrong offset!");

// ScriptStruct Squad.SkelMeshMergeUVTransformMapping
// 0x0010 (0x0010 - 0x0000)
struct FSkelMeshMergeUVTransformMapping final
{
public:
	TArray<struct FSkelMeshMergeUVTransform>      UVTransformsPerMesh;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkelMeshMergeUVTransformMapping) == 0x000008, "Wrong alignment on FSkelMeshMergeUVTransformMapping");
static_assert(sizeof(FSkelMeshMergeUVTransformMapping) == 0x000010, "Wrong size on FSkelMeshMergeUVTransformMapping");
static_assert(offsetof(FSkelMeshMergeUVTransformMapping, UVTransformsPerMesh) == 0x000000, "Member 'FSkelMeshMergeUVTransformMapping::UVTransformsPerMesh' has a wrong offset!");

// ScriptStruct Squad.SkeletalMeshMergeParams
// 0x0040 (0x0040 - 0x0000)
struct FSkeletalMeshMergeParams final
{
public:
	TArray<struct FSkelMeshMergeSectionMapping_BP> MeshSectionMappings;                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSkelMeshMergeUVTransformMapping> UVTransformsPerMesh;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  MeshesToMerge;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StripTopLODS;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNeedsCpuAccess : 1;                               // 0x0034(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSkeletonBefore : 1;                               // 0x0034(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CFF[0x3];                                      // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeleton*                              Skeleton;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkeletalMeshMergeParams) == 0x000008, "Wrong alignment on FSkeletalMeshMergeParams");
static_assert(sizeof(FSkeletalMeshMergeParams) == 0x000040, "Wrong size on FSkeletalMeshMergeParams");
static_assert(offsetof(FSkeletalMeshMergeParams, MeshSectionMappings) == 0x000000, "Member 'FSkeletalMeshMergeParams::MeshSectionMappings' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeParams, UVTransformsPerMesh) == 0x000010, "Member 'FSkeletalMeshMergeParams::UVTransformsPerMesh' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeParams, MeshesToMerge) == 0x000020, "Member 'FSkeletalMeshMergeParams::MeshesToMerge' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeParams, StripTopLODS) == 0x000030, "Member 'FSkeletalMeshMergeParams::StripTopLODS' has a wrong offset!");
static_assert(offsetof(FSkeletalMeshMergeParams, Skeleton) == 0x000038, "Member 'FSkeletalMeshMergeParams::Skeleton' has a wrong offset!");

// ScriptStruct Squad.SQRagdollEffectRow
// 0x0020 (0x0028 - 0x0008)
struct FSQRagdollEffectRow final : public FTableRowBase
{
public:
	class USoundCue*                              Light;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              Medium;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              Heavy;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              Scrape;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQRagdollEffectRow) == 0x000008, "Wrong alignment on FSQRagdollEffectRow");
static_assert(sizeof(FSQRagdollEffectRow) == 0x000028, "Wrong size on FSQRagdollEffectRow");
static_assert(offsetof(FSQRagdollEffectRow, Light) == 0x000008, "Member 'FSQRagdollEffectRow::Light' has a wrong offset!");
static_assert(offsetof(FSQRagdollEffectRow, Medium) == 0x000010, "Member 'FSQRagdollEffectRow::Medium' has a wrong offset!");
static_assert(offsetof(FSQRagdollEffectRow, Heavy) == 0x000018, "Member 'FSQRagdollEffectRow::Heavy' has a wrong offset!");
static_assert(offsetof(FSQRagdollEffectRow, Scrape) == 0x000020, "Member 'FSQRagdollEffectRow::Scrape' has a wrong offset!");

// ScriptStruct Squad.SQItemSkinCollectionRow
// 0x0008 (0x0010 - 0x0008)
struct FSQItemSkinCollectionRow final : public FTableRowBase
{
public:
	class USQItemSkinCollection*                  SkinCollection;                                    // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQItemSkinCollectionRow) == 0x000008, "Wrong alignment on FSQItemSkinCollectionRow");
static_assert(sizeof(FSQItemSkinCollectionRow) == 0x000010, "Wrong size on FSQItemSkinCollectionRow");
static_assert(offsetof(FSQItemSkinCollectionRow, SkinCollection) == 0x000008, "Member 'FSQItemSkinCollectionRow::SkinCollection' has a wrong offset!");

// ScriptStruct Squad.SQClimbTraceHitResults
// 0x002C (0x002C - 0x0000)
struct FSQClimbTraceHitResults final
{
public:
	struct FVector                                EndingPoint1;                                      // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockingHit;                                      // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D00[0x3];                                      // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ClimbFrontNormal;                                  // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ClimbDistanceFromWall;                             // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClimbTraceHit2;                                    // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQClimbTraceHitResults) == 0x000004, "Wrong alignment on FSQClimbTraceHitResults");
static_assert(sizeof(FSQClimbTraceHitResults) == 0x00002C, "Wrong size on FSQClimbTraceHitResults");
static_assert(offsetof(FSQClimbTraceHitResults, EndingPoint1) == 0x000000, "Member 'FSQClimbTraceHitResults::EndingPoint1' has a wrong offset!");
static_assert(offsetof(FSQClimbTraceHitResults, bBlockingHit) == 0x00000C, "Member 'FSQClimbTraceHitResults::bBlockingHit' has a wrong offset!");
static_assert(offsetof(FSQClimbTraceHitResults, ClimbFrontNormal) == 0x000010, "Member 'FSQClimbTraceHitResults::ClimbFrontNormal' has a wrong offset!");
static_assert(offsetof(FSQClimbTraceHitResults, ClimbDistanceFromWall) == 0x00001C, "Member 'FSQClimbTraceHitResults::ClimbDistanceFromWall' has a wrong offset!");
static_assert(offsetof(FSQClimbTraceHitResults, ClimbTraceHit2) == 0x000020, "Member 'FSQClimbTraceHitResults::ClimbTraceHit2' has a wrong offset!");

// ScriptStruct Squad.SQVaultTraceHitResults
// 0x00AC (0x00AC - 0x0000)
struct FSQVaultTraceHitResults final
{
public:
	struct FHitResult                             bVaultLineTrace1Hit;                               // 0x0000(0x0088)(BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                VaultOppSideWallHit;                               // 0x0088(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VaultDistanceFromOppSideWall;                      // 0x0094(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VaultEndingPointLineTraceImpact;                   // 0x0098(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVaultLineTrace2Hit;                               // 0x00A4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D01[0x3];                                      // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToNewLocation;                             // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVaultTraceHitResults) == 0x000004, "Wrong alignment on FSQVaultTraceHitResults");
static_assert(sizeof(FSQVaultTraceHitResults) == 0x0000AC, "Wrong size on FSQVaultTraceHitResults");
static_assert(offsetof(FSQVaultTraceHitResults, bVaultLineTrace1Hit) == 0x000000, "Member 'FSQVaultTraceHitResults::bVaultLineTrace1Hit' has a wrong offset!");
static_assert(offsetof(FSQVaultTraceHitResults, VaultOppSideWallHit) == 0x000088, "Member 'FSQVaultTraceHitResults::VaultOppSideWallHit' has a wrong offset!");
static_assert(offsetof(FSQVaultTraceHitResults, VaultDistanceFromOppSideWall) == 0x000094, "Member 'FSQVaultTraceHitResults::VaultDistanceFromOppSideWall' has a wrong offset!");
static_assert(offsetof(FSQVaultTraceHitResults, VaultEndingPointLineTraceImpact) == 0x000098, "Member 'FSQVaultTraceHitResults::VaultEndingPointLineTraceImpact' has a wrong offset!");
static_assert(offsetof(FSQVaultTraceHitResults, bVaultLineTrace2Hit) == 0x0000A4, "Member 'FSQVaultTraceHitResults::bVaultLineTrace2Hit' has a wrong offset!");
static_assert(offsetof(FSQVaultTraceHitResults, DistanceToNewLocation) == 0x0000A8, "Member 'FSQVaultTraceHitResults::DistanceToNewLocation' has a wrong offset!");

// ScriptStruct Squad.SQDistanceDatum
// 0x0014 (0x0014 - 0x0000)
struct FSQDistanceDatum final
{
public:
	float                                         FadeInDistanceStart;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDistanceEnd;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDistanceStart;                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDistanceEnd;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQDistanceDatum) == 0x000004, "Wrong alignment on FSQDistanceDatum");
static_assert(sizeof(FSQDistanceDatum) == 0x000014, "Wrong size on FSQDistanceDatum");
static_assert(offsetof(FSQDistanceDatum, FadeInDistanceStart) == 0x000000, "Member 'FSQDistanceDatum::FadeInDistanceStart' has a wrong offset!");
static_assert(offsetof(FSQDistanceDatum, FadeInDistanceEnd) == 0x000004, "Member 'FSQDistanceDatum::FadeInDistanceEnd' has a wrong offset!");
static_assert(offsetof(FSQDistanceDatum, FadeOutDistanceStart) == 0x000008, "Member 'FSQDistanceDatum::FadeOutDistanceStart' has a wrong offset!");
static_assert(offsetof(FSQDistanceDatum, FadeOutDistanceEnd) == 0x00000C, "Member 'FSQDistanceDatum::FadeOutDistanceEnd' has a wrong offset!");
static_assert(offsetof(FSQDistanceDatum, Volume) == 0x000010, "Member 'FSQDistanceDatum::Volume' has a wrong offset!");

// ScriptStruct Squad.SQSoundWeight
// 0x0010 (0x0010 - 0x0000)
struct FSQSoundWeight final
{
public:
	class USoundWave*                             Sound;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBeenUsed;                                      // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D02[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQSoundWeight) == 0x000008, "Wrong alignment on FSQSoundWeight");
static_assert(sizeof(FSQSoundWeight) == 0x000010, "Wrong size on FSQSoundWeight");
static_assert(offsetof(FSQSoundWeight, Sound) == 0x000000, "Member 'FSQSoundWeight::Sound' has a wrong offset!");
static_assert(offsetof(FSQSoundWeight, Weight) == 0x000008, "Member 'FSQSoundWeight::Weight' has a wrong offset!");
static_assert(offsetof(FSQSoundWeight, bHasBeenUsed) == 0x00000C, "Member 'FSQSoundWeight::bHasBeenUsed' has a wrong offset!");

// ScriptStruct Squad.SQMedicCalls
// 0x0078 (0x0078 - 0x0000)
struct FSQMedicCalls final
{
public:
	TSoftObjectPtr<class USoundCue>               MedicCO;                                           // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               MedicSL;                                           // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               MedicGrunt;                                        // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMedicCalls) == 0x000008, "Wrong alignment on FSQMedicCalls");
static_assert(sizeof(FSQMedicCalls) == 0x000078, "Wrong size on FSQMedicCalls");
static_assert(offsetof(FSQMedicCalls, MedicCO) == 0x000000, "Member 'FSQMedicCalls::MedicCO' has a wrong offset!");
static_assert(offsetof(FSQMedicCalls, MedicSL) == 0x000028, "Member 'FSQMedicCalls::MedicSL' has a wrong offset!");
static_assert(offsetof(FSQMedicCalls, MedicGrunt) == 0x000050, "Member 'FSQMedicCalls::MedicGrunt' has a wrong offset!");

// ScriptStruct Squad.SQTeamEventSounds
// 0x00C8 (0x00C8 - 0x0000)
struct FSQTeamEventSounds final
{
public:
	TSoftObjectPtr<class USoundCue>               Join;                                              // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Win;                                               // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               Lose;                                              // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               FriendlyTicketsLow;                                // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               EnemyTicketsLow;                                   // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQTeamEventSounds) == 0x000008, "Wrong alignment on FSQTeamEventSounds");
static_assert(sizeof(FSQTeamEventSounds) == 0x0000C8, "Wrong size on FSQTeamEventSounds");
static_assert(offsetof(FSQTeamEventSounds, Join) == 0x000000, "Member 'FSQTeamEventSounds::Join' has a wrong offset!");
static_assert(offsetof(FSQTeamEventSounds, Win) == 0x000028, "Member 'FSQTeamEventSounds::Win' has a wrong offset!");
static_assert(offsetof(FSQTeamEventSounds, Lose) == 0x000050, "Member 'FSQTeamEventSounds::Lose' has a wrong offset!");
static_assert(offsetof(FSQTeamEventSounds, FriendlyTicketsLow) == 0x000078, "Member 'FSQTeamEventSounds::FriendlyTicketsLow' has a wrong offset!");
static_assert(offsetof(FSQTeamEventSounds, EnemyTicketsLow) == 0x0000A0, "Member 'FSQTeamEventSounds::EnemyTicketsLow' has a wrong offset!");

// ScriptStruct Squad.SQCommanderSounds
// 0x0140 (0x0140 - 0x0000)
struct FSQCommanderSounds final
{
public:
	TSoftObjectPtr<class USoundCue>               CommanderVoteStarted;                              // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               CommanderVotePassedNormalSelf;                     // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               CommanderVotePassedNormalOthers;                   // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               CommanderVotePassedMutinySelf;                     // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               CommanderVotePassedMutinyOthers;                   // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               RequestCommandReinforcements;                      // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               CommanderReinforcementsApproved;                   // 0x00F0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               CommanderReinforcementsDenied;                     // 0x0118(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQCommanderSounds) == 0x000008, "Wrong alignment on FSQCommanderSounds");
static_assert(sizeof(FSQCommanderSounds) == 0x000140, "Wrong size on FSQCommanderSounds");
static_assert(offsetof(FSQCommanderSounds, CommanderVoteStarted) == 0x000000, "Member 'FSQCommanderSounds::CommanderVoteStarted' has a wrong offset!");
static_assert(offsetof(FSQCommanderSounds, CommanderVotePassedNormalSelf) == 0x000028, "Member 'FSQCommanderSounds::CommanderVotePassedNormalSelf' has a wrong offset!");
static_assert(offsetof(FSQCommanderSounds, CommanderVotePassedNormalOthers) == 0x000050, "Member 'FSQCommanderSounds::CommanderVotePassedNormalOthers' has a wrong offset!");
static_assert(offsetof(FSQCommanderSounds, CommanderVotePassedMutinySelf) == 0x000078, "Member 'FSQCommanderSounds::CommanderVotePassedMutinySelf' has a wrong offset!");
static_assert(offsetof(FSQCommanderSounds, CommanderVotePassedMutinyOthers) == 0x0000A0, "Member 'FSQCommanderSounds::CommanderVotePassedMutinyOthers' has a wrong offset!");
static_assert(offsetof(FSQCommanderSounds, RequestCommandReinforcements) == 0x0000C8, "Member 'FSQCommanderSounds::RequestCommandReinforcements' has a wrong offset!");
static_assert(offsetof(FSQCommanderSounds, CommanderReinforcementsApproved) == 0x0000F0, "Member 'FSQCommanderSounds::CommanderReinforcementsApproved' has a wrong offset!");
static_assert(offsetof(FSQCommanderSounds, CommanderReinforcementsDenied) == 0x000118, "Member 'FSQCommanderSounds::CommanderReinforcementsDenied' has a wrong offset!");

// ScriptStruct Squad.SQObjectiveSounds
// 0x00A0 (0x00A0 - 0x0000)
struct FSQObjectiveSounds final
{
public:
	TSoftObjectPtr<class USoundCue>               ObjectiveBeingWon;                                 // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               ObjectiveWon;                                      // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               ObjectiveBeingLost;                                // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USoundCue>               ObjectiveLost;                                     // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQObjectiveSounds) == 0x000008, "Wrong alignment on FSQObjectiveSounds");
static_assert(sizeof(FSQObjectiveSounds) == 0x0000A0, "Wrong size on FSQObjectiveSounds");
static_assert(offsetof(FSQObjectiveSounds, ObjectiveBeingWon) == 0x000000, "Member 'FSQObjectiveSounds::ObjectiveBeingWon' has a wrong offset!");
static_assert(offsetof(FSQObjectiveSounds, ObjectiveWon) == 0x000028, "Member 'FSQObjectiveSounds::ObjectiveWon' has a wrong offset!");
static_assert(offsetof(FSQObjectiveSounds, ObjectiveBeingLost) == 0x000050, "Member 'FSQObjectiveSounds::ObjectiveBeingLost' has a wrong offset!");
static_assert(offsetof(FSQObjectiveSounds, ObjectiveLost) == 0x000078, "Member 'FSQObjectiveSounds::ObjectiveLost' has a wrong offset!");

// ScriptStruct Squad.SQWaypoint
// 0x0030 (0x0030 - 0x0000)
struct FSQWaypoint final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapPosition;                                       // 0x000C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D03[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      PathPoints;                                        // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0028(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQWaypoint) == 0x000008, "Wrong alignment on FSQWaypoint");
static_assert(sizeof(FSQWaypoint) == 0x000030, "Wrong size on FSQWaypoint");
static_assert(offsetof(FSQWaypoint, WorldPosition) == 0x000000, "Member 'FSQWaypoint::WorldPosition' has a wrong offset!");
static_assert(offsetof(FSQWaypoint, MapPosition) == 0x00000C, "Member 'FSQWaypoint::MapPosition' has a wrong offset!");
static_assert(offsetof(FSQWaypoint, PathPoints) == 0x000018, "Member 'FSQWaypoint::PathPoints' has a wrong offset!");
static_assert(offsetof(FSQWaypoint, IconTexture) == 0x000028, "Member 'FSQWaypoint::IconTexture' has a wrong offset!");

// ScriptStruct Squad.VehicleOccupantsItem
// 0x0044 (0x0050 - 0x000C)
struct FVehicleOccupantsItem final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_D04[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQVehicleOccupantInfo                 VehicleOccupantInfo;                               // 0x0010(0x0038)(NativeAccessSpecifierPublic)
	int8                                          SeatId;                                            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DirtyCount;                                        // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D05[0x6];                                      // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleOccupantsItem) == 0x000008, "Wrong alignment on FVehicleOccupantsItem");
static_assert(sizeof(FVehicleOccupantsItem) == 0x000050, "Wrong size on FVehicleOccupantsItem");
static_assert(offsetof(FVehicleOccupantsItem, VehicleOccupantInfo) == 0x000010, "Member 'FVehicleOccupantsItem::VehicleOccupantInfo' has a wrong offset!");
static_assert(offsetof(FVehicleOccupantsItem, SeatId) == 0x000048, "Member 'FVehicleOccupantsItem::SeatId' has a wrong offset!");
static_assert(offsetof(FVehicleOccupantsItem, DirtyCount) == 0x000049, "Member 'FVehicleOccupantsItem::DirtyCount' has a wrong offset!");

// ScriptStruct Squad.VehicleOccupantsArray
// 0x0010 (0x0118 - 0x0108)
struct FVehicleOccupantsArray final : public FFastArraySerializer
{
public:
	TArray<struct FVehicleOccupantsItem>          Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleOccupantsArray) == 0x000008, "Wrong alignment on FVehicleOccupantsArray");
static_assert(sizeof(FVehicleOccupantsArray) == 0x000118, "Wrong size on FVehicleOccupantsArray");
static_assert(offsetof(FVehicleOccupantsArray, Items) == 0x000108, "Member 'FVehicleOccupantsArray::Items' has a wrong offset!");

// ScriptStruct Squad.SQWeaponSounds
// 0x0088 (0x0088 - 0x0000)
struct FSQWeaponSounds final
{
public:
	class USoundCue*                              FireSound1P;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              FireSound3P;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ReloadSound1P;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ReloadSound3P;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              DryReloadSound1P;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              DryReloadSound3P;                                  // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EquipSound1P;                                      // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EquipSound3P;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              UnequipSound1P;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              UnequipSound3P;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              TriggerSound1P;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              TriggerSound3P;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              BoltSound1P;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              BoltSound3P;                                       // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ToggleFiremodeSound1P;                             // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ToggleFiremodeSound3P;                             // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoundSocket;                                       // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQWeaponSounds) == 0x000008, "Wrong alignment on FSQWeaponSounds");
static_assert(sizeof(FSQWeaponSounds) == 0x000088, "Wrong size on FSQWeaponSounds");
static_assert(offsetof(FSQWeaponSounds, FireSound1P) == 0x000000, "Member 'FSQWeaponSounds::FireSound1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, FireSound3P) == 0x000008, "Member 'FSQWeaponSounds::FireSound3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, ReloadSound1P) == 0x000010, "Member 'FSQWeaponSounds::ReloadSound1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, ReloadSound3P) == 0x000018, "Member 'FSQWeaponSounds::ReloadSound3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, DryReloadSound1P) == 0x000020, "Member 'FSQWeaponSounds::DryReloadSound1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, DryReloadSound3P) == 0x000028, "Member 'FSQWeaponSounds::DryReloadSound3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, EquipSound1P) == 0x000030, "Member 'FSQWeaponSounds::EquipSound1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, EquipSound3P) == 0x000038, "Member 'FSQWeaponSounds::EquipSound3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, UnequipSound1P) == 0x000040, "Member 'FSQWeaponSounds::UnequipSound1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, UnequipSound3P) == 0x000048, "Member 'FSQWeaponSounds::UnequipSound3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, TriggerSound1P) == 0x000050, "Member 'FSQWeaponSounds::TriggerSound1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, TriggerSound3P) == 0x000058, "Member 'FSQWeaponSounds::TriggerSound3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, BoltSound1P) == 0x000060, "Member 'FSQWeaponSounds::BoltSound1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, BoltSound3P) == 0x000068, "Member 'FSQWeaponSounds::BoltSound3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, ToggleFiremodeSound1P) == 0x000070, "Member 'FSQWeaponSounds::ToggleFiremodeSound1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, ToggleFiremodeSound3P) == 0x000078, "Member 'FSQWeaponSounds::ToggleFiremodeSound3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponSounds, SoundSocket) == 0x000080, "Member 'FSQWeaponSounds::SoundSocket' has a wrong offset!");

// ScriptStruct Squad.SQRoleGroupLimit
// 0x0014 (0x0014 - 0x0000)
struct FSQRoleGroupLimit final
{
public:
	ESQRoleTypeEnum                               RoleGroup;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D06[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinLimit;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLimit;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadMembersPerSlotIncrease;                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotsPerIncrease;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQRoleGroupLimit) == 0x000004, "Wrong alignment on FSQRoleGroupLimit");
static_assert(sizeof(FSQRoleGroupLimit) == 0x000014, "Wrong size on FSQRoleGroupLimit");
static_assert(offsetof(FSQRoleGroupLimit, RoleGroup) == 0x000000, "Member 'FSQRoleGroupLimit::RoleGroup' has a wrong offset!");
static_assert(offsetof(FSQRoleGroupLimit, MinLimit) == 0x000004, "Member 'FSQRoleGroupLimit::MinLimit' has a wrong offset!");
static_assert(offsetof(FSQRoleGroupLimit, MaxLimit) == 0x000008, "Member 'FSQRoleGroupLimit::MaxLimit' has a wrong offset!");
static_assert(offsetof(FSQRoleGroupLimit, SquadMembersPerSlotIncrease) == 0x00000C, "Member 'FSQRoleGroupLimit::SquadMembersPerSlotIncrease' has a wrong offset!");
static_assert(offsetof(FSQRoleGroupLimit, SlotsPerIncrease) == 0x000010, "Member 'FSQRoleGroupLimit::SlotsPerIncrease' has a wrong offset!");

// ScriptStruct Squad.SQRoleLimit
// 0x0024 (0x0024 - 0x0000)
struct FSQRoleLimit final
{
public:
	int32                                         MinPerTeam;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinPerSquad;                                       // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadMembersToUnlockNextKit;                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlocksAtSquadSize;                                // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StopScalingAtSquadSize;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamMembersToUnlockNextKit;                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnlocksAtTeamSize;                                 // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StopScalingAtTeamSize;                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSquadLeaderOnly;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonDeployable;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D07[0x2];                                      // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQRoleLimit) == 0x000004, "Wrong alignment on FSQRoleLimit");
static_assert(sizeof(FSQRoleLimit) == 0x000024, "Wrong size on FSQRoleLimit");
static_assert(offsetof(FSQRoleLimit, MinPerTeam) == 0x000000, "Member 'FSQRoleLimit::MinPerTeam' has a wrong offset!");
static_assert(offsetof(FSQRoleLimit, MinPerSquad) == 0x000004, "Member 'FSQRoleLimit::MinPerSquad' has a wrong offset!");
static_assert(offsetof(FSQRoleLimit, SquadMembersToUnlockNextKit) == 0x000008, "Member 'FSQRoleLimit::SquadMembersToUnlockNextKit' has a wrong offset!");
static_assert(offsetof(FSQRoleLimit, UnlocksAtSquadSize) == 0x00000C, "Member 'FSQRoleLimit::UnlocksAtSquadSize' has a wrong offset!");
static_assert(offsetof(FSQRoleLimit, StopScalingAtSquadSize) == 0x000010, "Member 'FSQRoleLimit::StopScalingAtSquadSize' has a wrong offset!");
static_assert(offsetof(FSQRoleLimit, TeamMembersToUnlockNextKit) == 0x000014, "Member 'FSQRoleLimit::TeamMembersToUnlockNextKit' has a wrong offset!");
static_assert(offsetof(FSQRoleLimit, UnlocksAtTeamSize) == 0x000018, "Member 'FSQRoleLimit::UnlocksAtTeamSize' has a wrong offset!");
static_assert(offsetof(FSQRoleLimit, StopScalingAtTeamSize) == 0x00001C, "Member 'FSQRoleLimit::StopScalingAtTeamSize' has a wrong offset!");
static_assert(offsetof(FSQRoleLimit, bSquadLeaderOnly) == 0x000020, "Member 'FSQRoleLimit::bSquadLeaderOnly' has a wrong offset!");
static_assert(offsetof(FSQRoleLimit, bNonDeployable) == 0x000021, "Member 'FSQRoleLimit::bNonDeployable' has a wrong offset!");

// ScriptStruct Squad.SQRoleLimitFASItem
// 0x0024 (0x0030 - 0x000C)
struct FSQRoleLimitFASItem final : public FFastArraySerializerItem
{
public:
	struct FSQRoleLimit                           Content;                                           // 0x000C(0x0024)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQRoleLimitFASItem) == 0x000004, "Wrong alignment on FSQRoleLimitFASItem");
static_assert(sizeof(FSQRoleLimitFASItem) == 0x000030, "Wrong size on FSQRoleLimitFASItem");
static_assert(offsetof(FSQRoleLimitFASItem, Content) == 0x00000C, "Member 'FSQRoleLimitFASItem::Content' has a wrong offset!");

// ScriptStruct Squad.SQRoleLimitArray
// 0x0010 (0x0118 - 0x0108)
struct FSQRoleLimitArray final : public FFastArraySerializer
{
public:
	TArray<struct FSQRoleLimitFASItem>            Items;                                             // 0x0108(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQRoleLimitArray) == 0x000008, "Wrong alignment on FSQRoleLimitArray");
static_assert(sizeof(FSQRoleLimitArray) == 0x000118, "Wrong size on FSQRoleLimitArray");
static_assert(offsetof(FSQRoleLimitArray, Items) == 0x000108, "Member 'FSQRoleLimitArray::Items' has a wrong offset!");

// ScriptStruct Squad.SQSettingsRestriction
// 0x0018 (0x0018 - 0x0000)
struct FSQSettingsRestriction final
{
public:
	class FString                                 Setting;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSettingsRestriction) == 0x000008, "Wrong alignment on FSQSettingsRestriction");
static_assert(sizeof(FSQSettingsRestriction) == 0x000018, "Wrong size on FSQSettingsRestriction");
static_assert(offsetof(FSQSettingsRestriction, Setting) == 0x000000, "Member 'FSQSettingsRestriction::Setting' has a wrong offset!");
static_assert(offsetof(FSQSettingsRestriction, Min) == 0x000010, "Member 'FSQSettingsRestriction::Min' has a wrong offset!");
static_assert(offsetof(FSQSettingsRestriction, Max) == 0x000014, "Member 'FSQSettingsRestriction::Max' has a wrong offset!");

// ScriptStruct Squad.SQServerSlot
// 0x0028 (0x0028 - 0x0000)
struct FSQServerSlot final
{
public:
	uint8                                         Pad_D08[0x20];                                     // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQJoinBeaconClient*                    ClientBeacon;                                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQServerSlot) == 0x000008, "Wrong alignment on FSQServerSlot");
static_assert(sizeof(FSQServerSlot) == 0x000028, "Wrong size on FSQServerSlot");
static_assert(offsetof(FSQServerSlot, ClientBeacon) == 0x000020, "Member 'FSQServerSlot::ClientBeacon' has a wrong offset!");

// ScriptStruct Squad.SQConnectionCheckResponse
// 0x0008 (0x0008 - 0x0000)
struct FSQConnectionCheckResponse final
{
public:
	uint8                                         bCanQueue : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CurrentTotalPlayers;                               // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D09[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoundTripRPCTimeMS;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQConnectionCheckResponse) == 0x000004, "Wrong alignment on FSQConnectionCheckResponse");
static_assert(sizeof(FSQConnectionCheckResponse) == 0x000008, "Wrong size on FSQConnectionCheckResponse");
static_assert(offsetof(FSQConnectionCheckResponse, CurrentTotalPlayers) == 0x000001, "Member 'FSQConnectionCheckResponse::CurrentTotalPlayers' has a wrong offset!");
static_assert(offsetof(FSQConnectionCheckResponse, RoundTripRPCTimeMS) == 0x000004, "Member 'FSQConnectionCheckResponse::RoundTripRPCTimeMS' has a wrong offset!");

// ScriptStruct Squad.SQVehicleDestroyEffectConfig
// 0x0018 (0x0018 - 0x0000)
struct FSQVehicleDestroyEffectConfig final
{
public:
	class UParticleSystem*                        ParticleSystemTemplate;                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraParticleSystemTemplate;                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVehicleDestroyEffectConfig) == 0x000008, "Wrong alignment on FSQVehicleDestroyEffectConfig");
static_assert(sizeof(FSQVehicleDestroyEffectConfig) == 0x000018, "Wrong size on FSQVehicleDestroyEffectConfig");
static_assert(offsetof(FSQVehicleDestroyEffectConfig, ParticleSystemTemplate) == 0x000000, "Member 'FSQVehicleDestroyEffectConfig::ParticleSystemTemplate' has a wrong offset!");
static_assert(offsetof(FSQVehicleDestroyEffectConfig, NiagaraParticleSystemTemplate) == 0x000008, "Member 'FSQVehicleDestroyEffectConfig::NiagaraParticleSystemTemplate' has a wrong offset!");
static_assert(offsetof(FSQVehicleDestroyEffectConfig, DamageType) == 0x000010, "Member 'FSQVehicleDestroyEffectConfig::DamageType' has a wrong offset!");

// ScriptStruct Squad.SQDeployableLimit
// 0x0010 (0x0010 - 0x0000)
struct FSQDeployableLimit final
{
public:
	TSubclassOf<class ASQDeployable>              DeployableClass;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxPerFob;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0A[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQDeployableLimit) == 0x000008, "Wrong alignment on FSQDeployableLimit");
static_assert(sizeof(FSQDeployableLimit) == 0x000010, "Wrong size on FSQDeployableLimit");
static_assert(offsetof(FSQDeployableLimit, DeployableClass) == 0x000000, "Member 'FSQDeployableLimit::DeployableClass' has a wrong offset!");
static_assert(offsetof(FSQDeployableLimit, MaxPerFob) == 0x000008, "Member 'FSQDeployableLimit::MaxPerFob' has a wrong offset!");

// ScriptStruct Squad.SQVehicleSeatAnimationState
// 0x0060 (0x0060 - 0x0000)
struct FSQVehicleSeatAnimationState final
{
public:
	class UAnimMontage*                           PawnAnimation;                                     // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           SeatAnimation;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          BaseAnimation;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AimOffsets;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AimOffsets1pOverride;                              // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWheelBlendSpace1D;                             // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0B[0x7];                                      // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace1D*                          WheelBlendSpace1D;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHandIK;                                        // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWeaponForHandIK;                               // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0C[0x2];                                      // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftHandIKAlpha;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftHandIKSocketName;                              // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHandIKAlpha;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightHandIKSocketName;                             // 0x004C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0D[0x4];                                      // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          SteeringWheelSingleFrameAnimSequence;              // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVehicleSeatAnimationState) == 0x000008, "Wrong alignment on FSQVehicleSeatAnimationState");
static_assert(sizeof(FSQVehicleSeatAnimationState) == 0x000060, "Wrong size on FSQVehicleSeatAnimationState");
static_assert(offsetof(FSQVehicleSeatAnimationState, PawnAnimation) == 0x000000, "Member 'FSQVehicleSeatAnimationState::PawnAnimation' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, SeatAnimation) == 0x000008, "Member 'FSQVehicleSeatAnimationState::SeatAnimation' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, BaseAnimation) == 0x000010, "Member 'FSQVehicleSeatAnimationState::BaseAnimation' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, AimOffsets) == 0x000018, "Member 'FSQVehicleSeatAnimationState::AimOffsets' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, AimOffsets1pOverride) == 0x000020, "Member 'FSQVehicleSeatAnimationState::AimOffsets1pOverride' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, bUseWheelBlendSpace1D) == 0x000028, "Member 'FSQVehicleSeatAnimationState::bUseWheelBlendSpace1D' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, WheelBlendSpace1D) == 0x000030, "Member 'FSQVehicleSeatAnimationState::WheelBlendSpace1D' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, bUseHandIK) == 0x000038, "Member 'FSQVehicleSeatAnimationState::bUseHandIK' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, bUseWeaponForHandIK) == 0x000039, "Member 'FSQVehicleSeatAnimationState::bUseWeaponForHandIK' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, LeftHandIKAlpha) == 0x00003C, "Member 'FSQVehicleSeatAnimationState::LeftHandIKAlpha' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, LeftHandIKSocketName) == 0x000040, "Member 'FSQVehicleSeatAnimationState::LeftHandIKSocketName' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, RightHandIKAlpha) == 0x000048, "Member 'FSQVehicleSeatAnimationState::RightHandIKAlpha' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, RightHandIKSocketName) == 0x00004C, "Member 'FSQVehicleSeatAnimationState::RightHandIKSocketName' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatAnimationState, SteeringWheelSingleFrameAnimSequence) == 0x000058, "Member 'FSQVehicleSeatAnimationState::SteeringWheelSingleFrameAnimSequence' has a wrong offset!");

// ScriptStruct Squad.SQVehicleSeatState
// 0x0080 (0x0080 - 0x0000)
struct FSQVehicleSeatState final
{
public:
	struct FSQVehicleSeatAnimationState           AnimationState;                                    // 0x0000(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQVehicleSeatTransitionState          TransitionState;                                   // 0x0060(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVehicleSeatState) == 0x000008, "Wrong alignment on FSQVehicleSeatState");
static_assert(sizeof(FSQVehicleSeatState) == 0x000080, "Wrong size on FSQVehicleSeatState");
static_assert(offsetof(FSQVehicleSeatState, AnimationState) == 0x000000, "Member 'FSQVehicleSeatState::AnimationState' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatState, TransitionState) == 0x000060, "Member 'FSQVehicleSeatState::TransitionState' has a wrong offset!");

// ScriptStruct Squad.SQVehicleSeatConfig
// 0x0058 (0x0058 - 0x0000)
struct FSQVehicleSeatConfig final
{
public:
	ESQVehicleRoleAbility                         SeatAbilityRequirement;                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowDetachSoldier;                               // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExposedSeat;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0E[0x1];                                      // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SeatHealth;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRepairToolLimit;                                // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPassDamageToVehicle;                              // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0F[0x3];                                      // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionDamageMultipler;                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPassPointDamageToVehicle;                         // 0x0014(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoldierCanTakeDirectRadialDamage;                 // 0x0015(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPassRadialDamageToVehicle;                        // 0x0016(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D10[0x1];                                      // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SeatAttachSocket;                                  // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SoldierAttachSocket;                               // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQVehicleSeat>             SeatPawn;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialState;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D11[0x4];                                      // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQVehicleSeatState>            SeatStates;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bShouldAlwaysStayRegistered;                       // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSoldierInSeatCanCapture;                          // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRotationComponentForControlRotation;           // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D12[0x1];                                      // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerEnterDuration;                               // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuppressionMultiplier;                             // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSuppressionLevel;                               // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVehicleSeatConfig) == 0x000008, "Wrong alignment on FSQVehicleSeatConfig");
static_assert(sizeof(FSQVehicleSeatConfig) == 0x000058, "Wrong size on FSQVehicleSeatConfig");
static_assert(offsetof(FSQVehicleSeatConfig, SeatAbilityRequirement) == 0x000000, "Member 'FSQVehicleSeatConfig::SeatAbilityRequirement' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, bAllowDetachSoldier) == 0x000001, "Member 'FSQVehicleSeatConfig::bAllowDetachSoldier' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, bExposedSeat) == 0x000002, "Member 'FSQVehicleSeatConfig::bExposedSeat' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, SeatHealth) == 0x000004, "Member 'FSQVehicleSeatConfig::SeatHealth' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, MaxRepairToolLimit) == 0x000008, "Member 'FSQVehicleSeatConfig::MaxRepairToolLimit' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, bPassDamageToVehicle) == 0x00000C, "Member 'FSQVehicleSeatConfig::bPassDamageToVehicle' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, CollisionDamageMultipler) == 0x000010, "Member 'FSQVehicleSeatConfig::CollisionDamageMultipler' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, bPassPointDamageToVehicle) == 0x000014, "Member 'FSQVehicleSeatConfig::bPassPointDamageToVehicle' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, bSoldierCanTakeDirectRadialDamage) == 0x000015, "Member 'FSQVehicleSeatConfig::bSoldierCanTakeDirectRadialDamage' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, bPassRadialDamageToVehicle) == 0x000016, "Member 'FSQVehicleSeatConfig::bPassRadialDamageToVehicle' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, SeatAttachSocket) == 0x000018, "Member 'FSQVehicleSeatConfig::SeatAttachSocket' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, SoldierAttachSocket) == 0x000020, "Member 'FSQVehicleSeatConfig::SoldierAttachSocket' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, SeatPawn) == 0x000028, "Member 'FSQVehicleSeatConfig::SeatPawn' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, InitialState) == 0x000030, "Member 'FSQVehicleSeatConfig::InitialState' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, SeatStates) == 0x000038, "Member 'FSQVehicleSeatConfig::SeatStates' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, bShouldAlwaysStayRegistered) == 0x000048, "Member 'FSQVehicleSeatConfig::bShouldAlwaysStayRegistered' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, bSoldierInSeatCanCapture) == 0x000049, "Member 'FSQVehicleSeatConfig::bSoldierInSeatCanCapture' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, bUseRotationComponentForControlRotation) == 0x00004A, "Member 'FSQVehicleSeatConfig::bUseRotationComponentForControlRotation' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, PlayerEnterDuration) == 0x00004C, "Member 'FSQVehicleSeatConfig::PlayerEnterDuration' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, SuppressionMultiplier) == 0x000050, "Member 'FSQVehicleSeatConfig::SuppressionMultiplier' has a wrong offset!");
static_assert(offsetof(FSQVehicleSeatConfig, MaxSuppressionLevel) == 0x000054, "Member 'FSQVehicleSeatConfig::MaxSuppressionLevel' has a wrong offset!");

// ScriptStruct Squad.SQOnlineInventorySetting
// 0x0008 (0x0008 - 0x0000)
struct FSQOnlineInventorySetting final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D13[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQOnlineInventorySetting) == 0x000004, "Wrong alignment on FSQOnlineInventorySetting");
static_assert(sizeof(FSQOnlineInventorySetting) == 0x000008, "Wrong size on FSQOnlineInventorySetting");
static_assert(offsetof(FSQOnlineInventorySetting, ItemId) == 0x000000, "Member 'FSQOnlineInventorySetting::ItemId' has a wrong offset!");
static_assert(offsetof(FSQOnlineInventorySetting, bEnabled) == 0x000004, "Member 'FSQOnlineInventorySetting::bEnabled' has a wrong offset!");

// ScriptStruct Squad.SQSwayAspect
// 0x000C (0x000C - 0x0000)
struct FSQSwayAspect final
{
public:
	float                                         SwayInterpSpeed_YZ;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayInterpSpeed_Final;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HasSway;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSwayAspect) == 0x000004, "Wrong alignment on FSQSwayAspect");
static_assert(sizeof(FSQSwayAspect) == 0x00000C, "Wrong size on FSQSwayAspect");
static_assert(offsetof(FSQSwayAspect, SwayInterpSpeed_YZ) == 0x000000, "Member 'FSQSwayAspect::SwayInterpSpeed_YZ' has a wrong offset!");
static_assert(offsetof(FSQSwayAspect, SwayInterpSpeed_Final) == 0x000004, "Member 'FSQSwayAspect::SwayInterpSpeed_Final' has a wrong offset!");
static_assert(offsetof(FSQSwayAspect, HasSway) == 0x000008, "Member 'FSQSwayAspect::HasSway' has a wrong offset!");

// ScriptStruct Squad.SQShockwaveQualitySetting
// 0x0010 (0x0010 - 0x0000)
struct FSQShockwaveQualitySetting final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D14[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VerticalSteps;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HorizontalSteps;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CullingDistance;                                   // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQShockwaveQualitySetting) == 0x000004, "Wrong alignment on FSQShockwaveQualitySetting");
static_assert(sizeof(FSQShockwaveQualitySetting) == 0x000010, "Wrong size on FSQShockwaveQualitySetting");
static_assert(offsetof(FSQShockwaveQualitySetting, bEnabled) == 0x000000, "Member 'FSQShockwaveQualitySetting::bEnabled' has a wrong offset!");
static_assert(offsetof(FSQShockwaveQualitySetting, VerticalSteps) == 0x000004, "Member 'FSQShockwaveQualitySetting::VerticalSteps' has a wrong offset!");
static_assert(offsetof(FSQShockwaveQualitySetting, HorizontalSteps) == 0x000008, "Member 'FSQShockwaveQualitySetting::HorizontalSteps' has a wrong offset!");
static_assert(offsetof(FSQShockwaveQualitySetting, CullingDistance) == 0x00000C, "Member 'FSQShockwaveQualitySetting::CullingDistance' has a wrong offset!");

// ScriptStruct Squad.SQLayerSettingsPair
// 0x0018 (0x0018 - 0x0000)
struct FSQLayerSettingsPair final
{
public:
	class USQLayer*                               Layer;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SettingsString;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQLayerSettingsPair) == 0x000008, "Wrong alignment on FSQLayerSettingsPair");
static_assert(sizeof(FSQLayerSettingsPair) == 0x000018, "Wrong size on FSQLayerSettingsPair");
static_assert(offsetof(FSQLayerSettingsPair, Layer) == 0x000000, "Member 'FSQLayerSettingsPair::Layer' has a wrong offset!");
static_assert(offsetof(FSQLayerSettingsPair, SettingsString) == 0x000008, "Member 'FSQLayerSettingsPair::SettingsString' has a wrong offset!");

// ScriptStruct Squad.SQFactionAsset
// 0x0028 (0x0030 - 0x0008)
struct FSQFactionAsset final : public FTableRowBase
{
public:
	TSoftObjectPtr<class USQFaction>              Faction;                                           // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQFactionAsset) == 0x000008, "Wrong alignment on FSQFactionAsset");
static_assert(sizeof(FSQFactionAsset) == 0x000030, "Wrong size on FSQFactionAsset");
static_assert(offsetof(FSQFactionAsset, Faction) == 0x000008, "Member 'FSQFactionAsset::Faction' has a wrong offset!");

// ScriptStruct Squad.SQGameModeRules
// 0x0018 (0x0018 - 0x0000)
struct FSQGameModeRules final
{
public:
	ESQTeam                                       Team;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D15[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           Rules;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQGameModeRules) == 0x000008, "Wrong alignment on FSQGameModeRules");
static_assert(sizeof(FSQGameModeRules) == 0x000018, "Wrong size on FSQGameModeRules");
static_assert(offsetof(FSQGameModeRules, Team) == 0x000000, "Member 'FSQGameModeRules::Team' has a wrong offset!");
static_assert(offsetof(FSQGameModeRules, Rules) == 0x000008, "Member 'FSQGameModeRules::Rules' has a wrong offset!");

// ScriptStruct Squad.SQPlayerLimiter
// 0x0008 (0x0008 - 0x0000)
struct FSQPlayerLimiter final
{
public:
	int32                                         NumberOfPlayers;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQPlayerLimiter) == 0x000004, "Wrong alignment on FSQPlayerLimiter");
static_assert(sizeof(FSQPlayerLimiter) == 0x000008, "Wrong size on FSQPlayerLimiter");
static_assert(offsetof(FSQPlayerLimiter, NumberOfPlayers) == 0x000000, "Member 'FSQPlayerLimiter::NumberOfPlayers' has a wrong offset!");
static_assert(offsetof(FSQPlayerLimiter, Value) == 0x000004, "Member 'FSQPlayerLimiter::Value' has a wrong offset!");

// ScriptStruct Squad.SQFontInfo
// 0x0060 (0x0060 - 0x0000)
struct FSQFontInfo final
{
public:
	class UFont*                                  Font;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset;                                            // 0x001C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextHorizontalAlignment                    HorizontalAlignment;                               // 0x0024(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextVerticalAlignment                      VerticalAlignment;                                 // 0x0025(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D16[0x2];                                      // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawShadow;                                       // 0x002C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D17[0x3];                                      // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ShadowDirection;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawOutline;                                      // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D18[0x3];                                      // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OutlineColor;                                      // 0x004C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D19[0x4];                                      // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQFontInfo) == 0x000008, "Wrong alignment on FSQFontInfo");
static_assert(sizeof(FSQFontInfo) == 0x000060, "Wrong size on FSQFontInfo");
static_assert(offsetof(FSQFontInfo, Font) == 0x000000, "Member 'FSQFontInfo::Font' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, Color) == 0x000008, "Member 'FSQFontInfo::Color' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, Scale) == 0x000018, "Member 'FSQFontInfo::Scale' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, Offset) == 0x00001C, "Member 'FSQFontInfo::Offset' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, HorizontalAlignment) == 0x000024, "Member 'FSQFontInfo::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, VerticalAlignment) == 0x000025, "Member 'FSQFontInfo::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, Alpha) == 0x000028, "Member 'FSQFontInfo::Alpha' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, bDrawShadow) == 0x00002C, "Member 'FSQFontInfo::bDrawShadow' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, ShadowDirection) == 0x000030, "Member 'FSQFontInfo::ShadowDirection' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, ShadowColor) == 0x000038, "Member 'FSQFontInfo::ShadowColor' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, bDrawOutline) == 0x000048, "Member 'FSQFontInfo::bDrawOutline' has a wrong offset!");
static_assert(offsetof(FSQFontInfo, OutlineColor) == 0x00004C, "Member 'FSQFontInfo::OutlineColor' has a wrong offset!");

// ScriptStruct Squad.SQPersistedAmmoCount
// 0x0008 (0x0008 - 0x0000)
struct FSQPersistedAmmoCount final
{
public:
	int32                                         AmmoCount;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQPersistedAmmoCount) == 0x000004, "Wrong alignment on FSQPersistedAmmoCount");
static_assert(sizeof(FSQPersistedAmmoCount) == 0x000008, "Wrong size on FSQPersistedAmmoCount");
static_assert(offsetof(FSQPersistedAmmoCount, AmmoCount) == 0x000000, "Member 'FSQPersistedAmmoCount::AmmoCount' has a wrong offset!");
static_assert(offsetof(FSQPersistedAmmoCount, ItemCount) == 0x000004, "Member 'FSQPersistedAmmoCount::ItemCount' has a wrong offset!");

// ScriptStruct Squad.SQPersistedAmmoGroup
// 0x0010 (0x0010 - 0x0000)
struct FSQPersistedAmmoGroup final
{
public:
	TArray<struct FSQPersistedAmmoCount>          AmmoCounts;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQPersistedAmmoGroup) == 0x000008, "Wrong alignment on FSQPersistedAmmoGroup");
static_assert(sizeof(FSQPersistedAmmoGroup) == 0x000010, "Wrong size on FSQPersistedAmmoGroup");
static_assert(offsetof(FSQPersistedAmmoGroup, AmmoCounts) == 0x000000, "Member 'FSQPersistedAmmoGroup::AmmoCounts' has a wrong offset!");

// ScriptStruct Squad.SQPersistedAmmoState
// 0x0018 (0x0018 - 0x0000)
struct FSQPersistedAmmoState final
{
public:
	TArray<struct FSQPersistedAmmoGroup>          AmmoGroups;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        PersistedRole;                                     // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQPersistedAmmoState) == 0x000008, "Wrong alignment on FSQPersistedAmmoState");
static_assert(sizeof(FSQPersistedAmmoState) == 0x000018, "Wrong size on FSQPersistedAmmoState");
static_assert(offsetof(FSQPersistedAmmoState, AmmoGroups) == 0x000000, "Member 'FSQPersistedAmmoState::AmmoGroups' has a wrong offset!");
static_assert(offsetof(FSQPersistedAmmoState, PersistedRole) == 0x000010, "Member 'FSQPersistedAmmoState::PersistedRole' has a wrong offset!");

// ScriptStruct Squad.SQInventoryData
// 0x0038 (0x0038 - 0x0000)
struct FSQInventoryData final
{
public:
	TSoftClassPtr<class UClass>                   EquipableItem;                                     // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAllowedInInventory;                             // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumCountOnSpawn;                               // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCannotRearm : 1;                                  // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D1A[0x3];                                      // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EWeaponType                                   WeaponType;                                        // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1B[0x3];                                      // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQInventoryData) == 0x000008, "Wrong alignment on FSQInventoryData");
static_assert(sizeof(FSQInventoryData) == 0x000038, "Wrong size on FSQInventoryData");
static_assert(offsetof(FSQInventoryData, EquipableItem) == 0x000000, "Member 'FSQInventoryData::EquipableItem' has a wrong offset!");
static_assert(offsetof(FSQInventoryData, MaxAllowedInInventory) == 0x000028, "Member 'FSQInventoryData::MaxAllowedInInventory' has a wrong offset!");
static_assert(offsetof(FSQInventoryData, MinimumCountOnSpawn) == 0x00002C, "Member 'FSQInventoryData::MinimumCountOnSpawn' has a wrong offset!");
static_assert(offsetof(FSQInventoryData, WeaponType) == 0x000034, "Member 'FSQInventoryData::WeaponType' has a wrong offset!");

// ScriptStruct Squad.SQInventoryWeaponGroupData
// 0x0010 (0x0010 - 0x0000)
struct FSQInventoryWeaponGroupData final
{
public:
	TArray<struct FSQInventoryData>               WeaponItems;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQInventoryWeaponGroupData) == 0x000008, "Wrong alignment on FSQInventoryWeaponGroupData");
static_assert(sizeof(FSQInventoryWeaponGroupData) == 0x000010, "Wrong size on FSQInventoryWeaponGroupData");
static_assert(offsetof(FSQInventoryWeaponGroupData, WeaponItems) == 0x000000, "Member 'FSQInventoryWeaponGroupData::WeaponItems' has a wrong offset!");

// ScriptStruct Squad.SQTestInventoryData
// 0x0010 (0x0010 - 0x0000)
struct FSQTestInventoryData final
{
public:
	TArray<struct FSQInventoryWeaponGroupData>    GroupItems;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQTestInventoryData) == 0x000008, "Wrong alignment on FSQTestInventoryData");
static_assert(sizeof(FSQTestInventoryData) == 0x000010, "Wrong size on FSQTestInventoryData");
static_assert(offsetof(FSQTestInventoryData, GroupItems) == 0x000000, "Member 'FSQTestInventoryData::GroupItems' has a wrong offset!");

// ScriptStruct Squad.SQInventoryMod
// 0x0058 (0x0058 - 0x0000)
struct FSQInventoryMod final
{
public:
	uint8                                         bClearAllInventoryFirst : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D1C[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQInventoryData                       InventoryData;                                     // 0x0008(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESQInventoryModificationType                  InventoryModificationType;                         // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1D[0x3];                                      // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       Team;                                              // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1E[0x3];                                      // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USQRoleSettings*                        Role;                                              // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQInventoryMod) == 0x000008, "Wrong alignment on FSQInventoryMod");
static_assert(sizeof(FSQInventoryMod) == 0x000058, "Wrong size on FSQInventoryMod");
static_assert(offsetof(FSQInventoryMod, InventoryData) == 0x000008, "Member 'FSQInventoryMod::InventoryData' has a wrong offset!");
static_assert(offsetof(FSQInventoryMod, InventoryModificationType) == 0x000040, "Member 'FSQInventoryMod::InventoryModificationType' has a wrong offset!");
static_assert(offsetof(FSQInventoryMod, Slot) == 0x000044, "Member 'FSQInventoryMod::Slot' has a wrong offset!");
static_assert(offsetof(FSQInventoryMod, Offset) == 0x000048, "Member 'FSQInventoryMod::Offset' has a wrong offset!");
static_assert(offsetof(FSQInventoryMod, Team) == 0x00004C, "Member 'FSQInventoryMod::Team' has a wrong offset!");
static_assert(offsetof(FSQInventoryMod, Role) == 0x000050, "Member 'FSQInventoryMod::Role' has a wrong offset!");

// ScriptStruct Squad.VehicleNWWheelDifferentialData
// 0x0001 (0x0001 - 0x0000)
struct FVehicleNWWheelDifferentialData final
{
public:
	bool                                          bDriven;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleNWWheelDifferentialData) == 0x000001, "Wrong alignment on FVehicleNWWheelDifferentialData");
static_assert(sizeof(FVehicleNWWheelDifferentialData) == 0x000001, "Wrong size on FVehicleNWWheelDifferentialData");
static_assert(offsetof(FVehicleNWWheelDifferentialData, bDriven) == 0x000000, "Member 'FVehicleNWWheelDifferentialData::bDriven' has a wrong offset!");

// ScriptStruct Squad.SQCameraShake
// 0x0020 (0x0020 - 0x0000)
struct FSQCameraShake final
{
public:
	uint8                                         Pad_D1F[0x8];                                      // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           Shake;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Falloff;                                           // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOrientShakeTowardsEpicenter;                      // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D20[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQCameraShake) == 0x000008, "Wrong alignment on FSQCameraShake");
static_assert(sizeof(FSQCameraShake) == 0x000020, "Wrong size on FSQCameraShake");
static_assert(offsetof(FSQCameraShake, Shake) == 0x000008, "Member 'FSQCameraShake::Shake' has a wrong offset!");
static_assert(offsetof(FSQCameraShake, InnerRadius) == 0x000010, "Member 'FSQCameraShake::InnerRadius' has a wrong offset!");
static_assert(offsetof(FSQCameraShake, OuterRadius) == 0x000014, "Member 'FSQCameraShake::OuterRadius' has a wrong offset!");
static_assert(offsetof(FSQCameraShake, Falloff) == 0x000018, "Member 'FSQCameraShake::Falloff' has a wrong offset!");
static_assert(offsetof(FSQCameraShake, bOrientShakeTowardsEpicenter) == 0x00001C, "Member 'FSQCameraShake::bOrientShakeTowardsEpicenter' has a wrong offset!");

// ScriptStruct Squad.SQScoreEvent
// 0x0028 (0x0028 - 0x0000)
struct FSQScoreEvent final
{
public:
	float                                         Points;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D21[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreGroup;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D22[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQScoreEvent) == 0x000008, "Wrong alignment on FSQScoreEvent");
static_assert(sizeof(FSQScoreEvent) == 0x000028, "Wrong size on FSQScoreEvent");
static_assert(offsetof(FSQScoreEvent, Points) == 0x000000, "Member 'FSQScoreEvent::Points' has a wrong offset!");
static_assert(offsetof(FSQScoreEvent, Reason) == 0x000008, "Member 'FSQScoreEvent::Reason' has a wrong offset!");
static_assert(offsetof(FSQScoreEvent, ScoreGroup) == 0x000018, "Member 'FSQScoreEvent::ScoreGroup' has a wrong offset!");
static_assert(offsetof(FSQScoreEvent, Timestamp) == 0x000020, "Member 'FSQScoreEvent::Timestamp' has a wrong offset!");

// ScriptStruct Squad.SQSoliderNetPriorityObject
// 0x000C (0x000C - 0x0000)
struct FSQSoliderNetPriorityObject final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetPriority;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetPriorityWhenBehind;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSoliderNetPriorityObject) == 0x000004, "Wrong alignment on FSQSoliderNetPriorityObject");
static_assert(sizeof(FSQSoliderNetPriorityObject) == 0x00000C, "Wrong size on FSQSoliderNetPriorityObject");
static_assert(offsetof(FSQSoliderNetPriorityObject, Distance) == 0x000000, "Member 'FSQSoliderNetPriorityObject::Distance' has a wrong offset!");
static_assert(offsetof(FSQSoliderNetPriorityObject, NetPriority) == 0x000004, "Member 'FSQSoliderNetPriorityObject::NetPriority' has a wrong offset!");
static_assert(offsetof(FSQSoliderNetPriorityObject, NetPriorityWhenBehind) == 0x000008, "Member 'FSQSoliderNetPriorityObject::NetPriorityWhenBehind' has a wrong offset!");

// ScriptStruct Squad.SQMapData
// 0x0040 (0x0040 - 0x0000)
struct FSQMapData final
{
public:
	class FString                                 ShortName;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadingScreenTexturePath;                          // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MapPaths;                                          // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D23[0x10];                                     // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQMapData) == 0x000008, "Wrong alignment on FSQMapData");
static_assert(sizeof(FSQMapData) == 0x000040, "Wrong size on FSQMapData");
static_assert(offsetof(FSQMapData, ShortName) == 0x000000, "Member 'FSQMapData::ShortName' has a wrong offset!");
static_assert(offsetof(FSQMapData, LoadingScreenTexturePath) == 0x000010, "Member 'FSQMapData::LoadingScreenTexturePath' has a wrong offset!");
static_assert(offsetof(FSQMapData, MapPaths) == 0x000020, "Member 'FSQMapData::MapPaths' has a wrong offset!");

// ScriptStruct Squad.SQSwayDynamicBreath
// 0x0008 (0x0008 - 0x0000)
struct FSQSwayDynamicBreath final
{
public:
	float                                         HoldingBreathSwayFactor;                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldingBreathSway;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSwayDynamicBreath) == 0x000004, "Wrong alignment on FSQSwayDynamicBreath");
static_assert(sizeof(FSQSwayDynamicBreath) == 0x000008, "Wrong size on FSQSwayDynamicBreath");
static_assert(offsetof(FSQSwayDynamicBreath, HoldingBreathSwayFactor) == 0x000000, "Member 'FSQSwayDynamicBreath::HoldingBreathSwayFactor' has a wrong offset!");
static_assert(offsetof(FSQSwayDynamicBreath, HoldingBreathSway) == 0x000004, "Member 'FSQSwayDynamicBreath::HoldingBreathSway' has a wrong offset!");

// ScriptStruct Squad.SQSwayDynamicGroup
// 0x0020 (0x0020 - 0x0000)
struct FSQSwayDynamicGroup final
{
public:
	struct FSQSwayDynamicMovement                 Movement;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQSwayDynamicStamina                  Stamina;                                           // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQSwayDynamicBreath                   Breath;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSwayDynamicGroup) == 0x000004, "Wrong alignment on FSQSwayDynamicGroup");
static_assert(sizeof(FSQSwayDynamicGroup) == 0x000020, "Wrong size on FSQSwayDynamicGroup");
static_assert(offsetof(FSQSwayDynamicGroup, Movement) == 0x000000, "Member 'FSQSwayDynamicGroup::Movement' has a wrong offset!");
static_assert(offsetof(FSQSwayDynamicGroup, Stamina) == 0x000010, "Member 'FSQSwayDynamicGroup::Stamina' has a wrong offset!");
static_assert(offsetof(FSQSwayDynamicGroup, Breath) == 0x000018, "Member 'FSQSwayDynamicGroup::Breath' has a wrong offset!");

// ScriptStruct Squad.SQExplosiveShotInfo
// 0x000C (0x0038 - 0x002C)
struct FSQExplosiveShotInfo final : public FSQShotInfo
{
public:
	uint8                                         Pad_D24[0x4];                                      // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 ProjectileClass;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQExplosiveShotInfo) == 0x000008, "Wrong alignment on FSQExplosiveShotInfo");
static_assert(sizeof(FSQExplosiveShotInfo) == 0x000038, "Wrong size on FSQExplosiveShotInfo");
static_assert(offsetof(FSQExplosiveShotInfo, ProjectileClass) == 0x000030, "Member 'FSQExplosiveShotInfo::ProjectileClass' has a wrong offset!");

// ScriptStruct Squad.SQSessionFlagStruct
// 0x0008 (0x0008 - 0x0000)
struct FSQSessionFlagStruct final
{
public:
	int32                                         ServerHealth;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsAnticheatProtected : 1;                         // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D25[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQSessionFlagStruct) == 0x000004, "Wrong alignment on FSQSessionFlagStruct");
static_assert(sizeof(FSQSessionFlagStruct) == 0x000008, "Wrong size on FSQSessionFlagStruct");
static_assert(offsetof(FSQSessionFlagStruct, ServerHealth) == 0x000000, "Member 'FSQSessionFlagStruct::ServerHealth' has a wrong offset!");

// ScriptStruct Squad.SQVote
// 0x0030 (0x0030 - 0x0000)
struct FSQVote final
{
public:
	class FName                                   ID;                                                // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              Duration;                                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    Data;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSQChoice>                      Choices;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVote) == 0x000008, "Wrong alignment on FSQVote");
static_assert(sizeof(FSQVote) == 0x000030, "Wrong size on FSQVote");
static_assert(offsetof(FSQVote, ID) == 0x000000, "Member 'FSQVote::ID' has a wrong offset!");
static_assert(offsetof(FSQVote, Duration) == 0x000008, "Member 'FSQVote::Duration' has a wrong offset!");
static_assert(offsetof(FSQVote, Data) == 0x000010, "Member 'FSQVote::Data' has a wrong offset!");
static_assert(offsetof(FSQVote, Choices) == 0x000020, "Member 'FSQVote::Choices' has a wrong offset!");

// ScriptStruct Squad.SQFTEText
// 0x0030 (0x0030 - 0x0000)
struct FSQFTEText final
{
public:
	class FText                                   FTEText;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionKeys;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D26[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQFTEText) == 0x000008, "Wrong alignment on FSQFTEText");
static_assert(sizeof(FSQFTEText) == 0x000030, "Wrong size on FSQFTEText");
static_assert(offsetof(FSQFTEText, FTEText) == 0x000000, "Member 'FSQFTEText::FTEText' has a wrong offset!");
static_assert(offsetof(FSQFTEText, ActionKeys) == 0x000018, "Member 'FSQFTEText::ActionKeys' has a wrong offset!");
static_assert(offsetof(FSQFTEText, Lifetime) == 0x000028, "Member 'FSQFTEText::Lifetime' has a wrong offset!");

// ScriptStruct Squad.SQPointDamageEvent
// 0x0008 (0x00B0 - 0x00A8)
struct FSQPointDamageEvent final : public FPointDamageEvent
{
public:
	bool                                          bCanPassDamage;                                    // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D27[0x7];                                      // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQPointDamageEvent) == 0x000008, "Wrong alignment on FSQPointDamageEvent");
static_assert(sizeof(FSQPointDamageEvent) == 0x0000B0, "Wrong size on FSQPointDamageEvent");
static_assert(offsetof(FSQPointDamageEvent, bCanPassDamage) == 0x0000A8, "Member 'FSQPointDamageEvent::bCanPassDamage' has a wrong offset!");

// ScriptStruct Squad.SQRadialDamageEvent
// 0x0090 (0x00D0 - 0x0040)
struct FSQRadialDamageEvent final : public FRadialDamageEvent
{
public:
	bool                                          bDirectHit;                                        // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D28[0x3];                                      // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0044(0x0088)(Edit, BlueprintVisible, EditConst, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_D29[0x4];                                      // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQRadialDamageEvent) == 0x000008, "Wrong alignment on FSQRadialDamageEvent");
static_assert(sizeof(FSQRadialDamageEvent) == 0x0000D0, "Wrong size on FSQRadialDamageEvent");
static_assert(offsetof(FSQRadialDamageEvent, bDirectHit) == 0x000040, "Member 'FSQRadialDamageEvent::bDirectHit' has a wrong offset!");
static_assert(offsetof(FSQRadialDamageEvent, HitResult) == 0x000044, "Member 'FSQRadialDamageEvent::HitResult' has a wrong offset!");

// ScriptStruct Squad.SQBitFlag
// 0x0004 (0x0004 - 0x0000)
struct FSQBitFlag final
{
public:
	int32                                         Flags;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSQBitFlag) == 0x000004, "Wrong alignment on FSQBitFlag");
static_assert(sizeof(FSQBitFlag) == 0x000004, "Wrong size on FSQBitFlag");
static_assert(offsetof(FSQBitFlag, Flags) == 0x000000, "Member 'FSQBitFlag::Flags' has a wrong offset!");

// ScriptStruct Squad.SQVehicleQueueEntry
// 0x0020 (0x0020 - 0x0000)
struct FSQVehicleQueueEntry final
{
public:
	uint8                                         Pad_D2A[0x8];                                      // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    Player;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2B[0x10];                                     // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQVehicleQueueEntry) == 0x000008, "Wrong alignment on FSQVehicleQueueEntry");
static_assert(sizeof(FSQVehicleQueueEntry) == 0x000020, "Wrong size on FSQVehicleQueueEntry");
static_assert(offsetof(FSQVehicleQueueEntry, Player) == 0x000008, "Member 'FSQVehicleQueueEntry::Player' has a wrong offset!");

// ScriptStruct Squad.SQAmmoReductionConfig
// 0x0020 (0x0020 - 0x0000)
struct FSQAmmoReductionConfig final
{
public:
	bool                                          bAmmoReductionEnabled;                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectAllWeapons;                                 // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2C[0x2];                                      // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmmoPercentageToLeave;                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectCurrentMagazine;                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectCurrentMagIfEquipped;                       // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2D[0x6];                                      // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQWeaponAmmoReductionConfig>   PerWeaponAmmoReduction;                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQAmmoReductionConfig) == 0x000008, "Wrong alignment on FSQAmmoReductionConfig");
static_assert(sizeof(FSQAmmoReductionConfig) == 0x000020, "Wrong size on FSQAmmoReductionConfig");
static_assert(offsetof(FSQAmmoReductionConfig, bAmmoReductionEnabled) == 0x000000, "Member 'FSQAmmoReductionConfig::bAmmoReductionEnabled' has a wrong offset!");
static_assert(offsetof(FSQAmmoReductionConfig, bAffectAllWeapons) == 0x000001, "Member 'FSQAmmoReductionConfig::bAffectAllWeapons' has a wrong offset!");
static_assert(offsetof(FSQAmmoReductionConfig, AmmoPercentageToLeave) == 0x000004, "Member 'FSQAmmoReductionConfig::AmmoPercentageToLeave' has a wrong offset!");
static_assert(offsetof(FSQAmmoReductionConfig, bAffectCurrentMagazine) == 0x000008, "Member 'FSQAmmoReductionConfig::bAffectCurrentMagazine' has a wrong offset!");
static_assert(offsetof(FSQAmmoReductionConfig, bAffectCurrentMagIfEquipped) == 0x000009, "Member 'FSQAmmoReductionConfig::bAffectCurrentMagIfEquipped' has a wrong offset!");
static_assert(offsetof(FSQAmmoReductionConfig, PerWeaponAmmoReduction) == 0x000010, "Member 'FSQAmmoReductionConfig::PerWeaponAmmoReduction' has a wrong offset!");

// ScriptStruct Squad.SQEngineMovementSoundObject
// 0x0028 (0x0028 - 0x0000)
struct FSQEngineMovementSoundObject final
{
public:
	class USoundCue*                              EngineSound;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Gear;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAcceleratingSound;                              // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2E[0x3];                                      // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachBoneName;                                    // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutEndVolume;                                  // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        AudioComponent;                                    // 0x0020(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQEngineMovementSoundObject) == 0x000008, "Wrong alignment on FSQEngineMovementSoundObject");
static_assert(sizeof(FSQEngineMovementSoundObject) == 0x000028, "Wrong size on FSQEngineMovementSoundObject");
static_assert(offsetof(FSQEngineMovementSoundObject, EngineSound) == 0x000000, "Member 'FSQEngineMovementSoundObject::EngineSound' has a wrong offset!");
static_assert(offsetof(FSQEngineMovementSoundObject, Gear) == 0x000008, "Member 'FSQEngineMovementSoundObject::Gear' has a wrong offset!");
static_assert(offsetof(FSQEngineMovementSoundObject, bIsAcceleratingSound) == 0x00000C, "Member 'FSQEngineMovementSoundObject::bIsAcceleratingSound' has a wrong offset!");
static_assert(offsetof(FSQEngineMovementSoundObject, AttachBoneName) == 0x000010, "Member 'FSQEngineMovementSoundObject::AttachBoneName' has a wrong offset!");
static_assert(offsetof(FSQEngineMovementSoundObject, FadeOutTime) == 0x000018, "Member 'FSQEngineMovementSoundObject::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FSQEngineMovementSoundObject, FadeOutEndVolume) == 0x00001C, "Member 'FSQEngineMovementSoundObject::FadeOutEndVolume' has a wrong offset!");
static_assert(offsetof(FSQEngineMovementSoundObject, AudioComponent) == 0x000020, "Member 'FSQEngineMovementSoundObject::AudioComponent' has a wrong offset!");

// ScriptStruct Squad.SQVehicleWeaponConfig
// 0x0008 (0x0008 - 0x0000)
struct FSQVehicleWeaponConfig final
{
public:
	TSubclassOf<class ASQVehicleWeapon>           WeaponClass;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVehicleWeaponConfig) == 0x000008, "Wrong alignment on FSQVehicleWeaponConfig");
static_assert(sizeof(FSQVehicleWeaponConfig) == 0x000008, "Wrong size on FSQVehicleWeaponConfig");
static_assert(offsetof(FSQVehicleWeaponConfig, WeaponClass) == 0x000000, "Member 'FSQVehicleWeaponConfig::WeaponClass' has a wrong offset!");

// ScriptStruct Squad.SQVehicleSettingEntry
// 0x0010 (0x0010 - 0x0000)
struct FSQVehicleSettingEntry final
{
public:
	class USQVehicleSettings*                     Setting;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArrayIndex;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2F[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQVehicleSettingEntry) == 0x000008, "Wrong alignment on FSQVehicleSettingEntry");
static_assert(sizeof(FSQVehicleSettingEntry) == 0x000010, "Wrong size on FSQVehicleSettingEntry");
static_assert(offsetof(FSQVehicleSettingEntry, Setting) == 0x000000, "Member 'FSQVehicleSettingEntry::Setting' has a wrong offset!");
static_assert(offsetof(FSQVehicleSettingEntry, ArrayIndex) == 0x000008, "Member 'FSQVehicleSettingEntry::ArrayIndex' has a wrong offset!");

// ScriptStruct Squad.SQVehicleRecoil
// 0x000C (0x000C - 0x0000)
struct FSQVehicleRecoil final
{
public:
	struct FVector2D                              RecoilFactor;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepeatAmount;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D30[0x3];                                      // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQVehicleRecoil) == 0x000004, "Wrong alignment on FSQVehicleRecoil");
static_assert(sizeof(FSQVehicleRecoil) == 0x00000C, "Wrong size on FSQVehicleRecoil");
static_assert(offsetof(FSQVehicleRecoil, RecoilFactor) == 0x000000, "Member 'FSQVehicleRecoil::RecoilFactor' has a wrong offset!");
static_assert(offsetof(FSQVehicleRecoil, RepeatAmount) == 0x000008, "Member 'FSQVehicleRecoil::RepeatAmount' has a wrong offset!");

// ScriptStruct Squad.SQRotationVelocityRepMovement
// 0x0010 (0x0050 - 0x0040)
struct FSQRotationVelocityRepMovement final : public FSQRepMovement
{
public:
	uint8                                         Pad_D31[0x10];                                     // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQRotationVelocityRepMovement) == 0x000008, "Wrong alignment on FSQRotationVelocityRepMovement");
static_assert(sizeof(FSQRotationVelocityRepMovement) == 0x000050, "Wrong size on FSQRotationVelocityRepMovement");

// ScriptStruct Squad.SQRangeConstraints
// 0x0038 (0x0038 - 0x0000)
struct FSQRangeConstraints final
{
public:
	bool                                          bEnablePitchInterval;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableYawInterval;                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableRollInterval;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D32[0x1];                                      // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PitchInterval;                                     // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              YawInterval;                                       // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RollInterval;                                      // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQRotationConstraints                 Constraints;                                       // 0x001C(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQRangeConstraints) == 0x000004, "Wrong alignment on FSQRangeConstraints");
static_assert(sizeof(FSQRangeConstraints) == 0x000038, "Wrong size on FSQRangeConstraints");
static_assert(offsetof(FSQRangeConstraints, bEnablePitchInterval) == 0x000000, "Member 'FSQRangeConstraints::bEnablePitchInterval' has a wrong offset!");
static_assert(offsetof(FSQRangeConstraints, bEnableYawInterval) == 0x000001, "Member 'FSQRangeConstraints::bEnableYawInterval' has a wrong offset!");
static_assert(offsetof(FSQRangeConstraints, bEnableRollInterval) == 0x000002, "Member 'FSQRangeConstraints::bEnableRollInterval' has a wrong offset!");
static_assert(offsetof(FSQRangeConstraints, PitchInterval) == 0x000004, "Member 'FSQRangeConstraints::PitchInterval' has a wrong offset!");
static_assert(offsetof(FSQRangeConstraints, YawInterval) == 0x00000C, "Member 'FSQRangeConstraints::YawInterval' has a wrong offset!");
static_assert(offsetof(FSQRangeConstraints, RollInterval) == 0x000014, "Member 'FSQRangeConstraints::RollInterval' has a wrong offset!");
static_assert(offsetof(FSQRangeConstraints, Constraints) == 0x00001C, "Member 'FSQRangeConstraints::Constraints' has a wrong offset!");

// ScriptStruct Squad.SQVoteSessionInfo
// 0x0038 (0x0038 - 0x0000)
struct FSQVoteSessionInfo final
{
public:
	struct FDateTime                              StartTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQVoteSessionChoiceInfo>       Votes;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RecordedVotes;                                     // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExpectedVoteCount;                                 // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 TeamAccess;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQVoteSessionInfo) == 0x000008, "Wrong alignment on FSQVoteSessionInfo");
static_assert(sizeof(FSQVoteSessionInfo) == 0x000038, "Wrong size on FSQVoteSessionInfo");
static_assert(offsetof(FSQVoteSessionInfo, StartTime) == 0x000000, "Member 'FSQVoteSessionInfo::StartTime' has a wrong offset!");
static_assert(offsetof(FSQVoteSessionInfo, EndTime) == 0x000008, "Member 'FSQVoteSessionInfo::EndTime' has a wrong offset!");
static_assert(offsetof(FSQVoteSessionInfo, Votes) == 0x000010, "Member 'FSQVoteSessionInfo::Votes' has a wrong offset!");
static_assert(offsetof(FSQVoteSessionInfo, RecordedVotes) == 0x000020, "Member 'FSQVoteSessionInfo::RecordedVotes' has a wrong offset!");
static_assert(offsetof(FSQVoteSessionInfo, ExpectedVoteCount) == 0x000024, "Member 'FSQVoteSessionInfo::ExpectedVoteCount' has a wrong offset!");
static_assert(offsetof(FSQVoteSessionInfo, TeamAccess) == 0x000028, "Member 'FSQVoteSessionInfo::TeamAccess' has a wrong offset!");

// ScriptStruct Squad.SQVoteStateContainer
// 0x0098 (0x0098 - 0x0000)
struct FSQVoteStateContainer final
{
public:
	struct FSQVote                                Vote;                                              // 0x0000(0x0030)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FSQVoteSessionInfo                     State;                                             // 0x0030(0x0038)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FName                                   WinnerId;                                          // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ended;                                             // 0x0070(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D33[0x7];                                      // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQChoice                              WinnerChoice;                                      // 0x0078(0x0018)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         StatusUpdateID;                                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D34[0x7];                                      // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQVoteStateContainer) == 0x000008, "Wrong alignment on FSQVoteStateContainer");
static_assert(sizeof(FSQVoteStateContainer) == 0x000098, "Wrong size on FSQVoteStateContainer");
static_assert(offsetof(FSQVoteStateContainer, Vote) == 0x000000, "Member 'FSQVoteStateContainer::Vote' has a wrong offset!");
static_assert(offsetof(FSQVoteStateContainer, State) == 0x000030, "Member 'FSQVoteStateContainer::State' has a wrong offset!");
static_assert(offsetof(FSQVoteStateContainer, WinnerId) == 0x000068, "Member 'FSQVoteStateContainer::WinnerId' has a wrong offset!");
static_assert(offsetof(FSQVoteStateContainer, Ended) == 0x000070, "Member 'FSQVoteStateContainer::Ended' has a wrong offset!");
static_assert(offsetof(FSQVoteStateContainer, WinnerChoice) == 0x000078, "Member 'FSQVoteStateContainer::WinnerChoice' has a wrong offset!");
static_assert(offsetof(FSQVoteStateContainer, StatusUpdateID) == 0x000090, "Member 'FSQVoteStateContainer::StatusUpdateID' has a wrong offset!");

// ScriptStruct Squad.ArmorPenetration
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x04) FArmorPenetration final
{
public:
	uint8                                         Pad_D35[0x28];                                     // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArmorPenetration) == 0x000004, "Wrong alignment on FArmorPenetration");
static_assert(sizeof(FArmorPenetration) == 0x000028, "Wrong size on FArmorPenetration");

// ScriptStruct Squad.SQMagazineData
// 0x0008 (0x0008 - 0x0000)
struct FSQMagazineData final
{
public:
	int32                                         DefaultRoundsPerMag;                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingRounds;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQMagazineData) == 0x000004, "Wrong alignment on FSQMagazineData");
static_assert(sizeof(FSQMagazineData) == 0x000008, "Wrong size on FSQMagazineData");
static_assert(offsetof(FSQMagazineData, DefaultRoundsPerMag) == 0x000000, "Member 'FSQMagazineData::DefaultRoundsPerMag' has a wrong offset!");
static_assert(offsetof(FSQMagazineData, RemainingRounds) == 0x000004, "Member 'FSQMagazineData::RemainingRounds' has a wrong offset!");

// ScriptStruct Squad.SQWeaponEffects
// 0x0078 (0x0078 - 0x0000)
struct FSQWeaponEffects final
{
public:
	class UParticleSystem*                        MuzzleFlashEffect1P;                               // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraMuzzleFlashEffect1P;                        // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        MuzzleFlashEffect3P;                               // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraMuzzleFlashEffect3P;                        // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ShellEjection1P;                                   // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraShellEjection1P;                            // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ShellEjection3P;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraShellEjection3P;                            // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MuzzleFlashSocket;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShellEjectionSocket;                               // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShellEjectionCullDistanceInMeters;                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D36[0x4];                                      // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASQLastingEffect>           DustCloudLastingEffect1p;                          // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQLastingEffect>           DustCloudLastingEffect3p;                          // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DustCloudLastingEffectAdditionalRotation;          // 0x0068(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D37[0x4];                                      // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQWeaponEffects) == 0x000008, "Wrong alignment on FSQWeaponEffects");
static_assert(sizeof(FSQWeaponEffects) == 0x000078, "Wrong size on FSQWeaponEffects");
static_assert(offsetof(FSQWeaponEffects, MuzzleFlashEffect1P) == 0x000000, "Member 'FSQWeaponEffects::MuzzleFlashEffect1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, NiagaraMuzzleFlashEffect1P) == 0x000008, "Member 'FSQWeaponEffects::NiagaraMuzzleFlashEffect1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, MuzzleFlashEffect3P) == 0x000010, "Member 'FSQWeaponEffects::MuzzleFlashEffect3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, NiagaraMuzzleFlashEffect3P) == 0x000018, "Member 'FSQWeaponEffects::NiagaraMuzzleFlashEffect3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, ShellEjection1P) == 0x000020, "Member 'FSQWeaponEffects::ShellEjection1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, NiagaraShellEjection1P) == 0x000028, "Member 'FSQWeaponEffects::NiagaraShellEjection1P' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, ShellEjection3P) == 0x000030, "Member 'FSQWeaponEffects::ShellEjection3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, NiagaraShellEjection3P) == 0x000038, "Member 'FSQWeaponEffects::NiagaraShellEjection3P' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, MuzzleFlashSocket) == 0x000040, "Member 'FSQWeaponEffects::MuzzleFlashSocket' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, ShellEjectionSocket) == 0x000048, "Member 'FSQWeaponEffects::ShellEjectionSocket' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, ShellEjectionCullDistanceInMeters) == 0x000050, "Member 'FSQWeaponEffects::ShellEjectionCullDistanceInMeters' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, DustCloudLastingEffect1p) == 0x000058, "Member 'FSQWeaponEffects::DustCloudLastingEffect1p' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, DustCloudLastingEffect3p) == 0x000060, "Member 'FSQWeaponEffects::DustCloudLastingEffect3p' has a wrong offset!");
static_assert(offsetof(FSQWeaponEffects, DustCloudLastingEffectAdditionalRotation) == 0x000068, "Member 'FSQWeaponEffects::DustCloudLastingEffectAdditionalRotation' has a wrong offset!");

// ScriptStruct Squad.SQWeaponAnims
// 0x0048 (0x0048 - 0x0000)
struct FSQWeaponAnims final
{
public:
	class UAnimSequence*                          StandAnim;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          EquipAnim;                                         // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          FireRecoilAnim;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          FireTriggerAnim;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ReloadAnim;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          DryAnim;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ToggleFiremodeAnim;                                // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldLockBult;                                   // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D38[0x3];                                      // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggerPullDuration;                               // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           AimOffsetCurve;                                    // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQWeaponAnims) == 0x000008, "Wrong alignment on FSQWeaponAnims");
static_assert(sizeof(FSQWeaponAnims) == 0x000048, "Wrong size on FSQWeaponAnims");
static_assert(offsetof(FSQWeaponAnims, StandAnim) == 0x000000, "Member 'FSQWeaponAnims::StandAnim' has a wrong offset!");
static_assert(offsetof(FSQWeaponAnims, EquipAnim) == 0x000008, "Member 'FSQWeaponAnims::EquipAnim' has a wrong offset!");
static_assert(offsetof(FSQWeaponAnims, FireRecoilAnim) == 0x000010, "Member 'FSQWeaponAnims::FireRecoilAnim' has a wrong offset!");
static_assert(offsetof(FSQWeaponAnims, FireTriggerAnim) == 0x000018, "Member 'FSQWeaponAnims::FireTriggerAnim' has a wrong offset!");
static_assert(offsetof(FSQWeaponAnims, ReloadAnim) == 0x000020, "Member 'FSQWeaponAnims::ReloadAnim' has a wrong offset!");
static_assert(offsetof(FSQWeaponAnims, DryAnim) == 0x000028, "Member 'FSQWeaponAnims::DryAnim' has a wrong offset!");
static_assert(offsetof(FSQWeaponAnims, ToggleFiremodeAnim) == 0x000030, "Member 'FSQWeaponAnims::ToggleFiremodeAnim' has a wrong offset!");
static_assert(offsetof(FSQWeaponAnims, bShouldLockBult) == 0x000038, "Member 'FSQWeaponAnims::bShouldLockBult' has a wrong offset!");
static_assert(offsetof(FSQWeaponAnims, TriggerPullDuration) == 0x00003C, "Member 'FSQWeaponAnims::TriggerPullDuration' has a wrong offset!");
static_assert(offsetof(FSQWeaponAnims, AimOffsetCurve) == 0x000040, "Member 'FSQWeaponAnims::AimOffsetCurve' has a wrong offset!");

// ScriptStruct Squad.SQAttachmentSkin_Combined_Entry
// 0x0050 (0x0050 - 0x0000)
struct FSQAttachmentSkin_Combined_Entry final
{
public:
	TArray<TSoftClassPtr<class UClass>>           WeaponAttachmentTypes;                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bRemoveMesh;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D39[0x7];                                      // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             Mesh;                                              // 0x0018(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> SkinMaterials;                                     // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQAttachmentSkin_Combined_Entry) == 0x000008, "Wrong alignment on FSQAttachmentSkin_Combined_Entry");
static_assert(sizeof(FSQAttachmentSkin_Combined_Entry) == 0x000050, "Wrong size on FSQAttachmentSkin_Combined_Entry");
static_assert(offsetof(FSQAttachmentSkin_Combined_Entry, WeaponAttachmentTypes) == 0x000000, "Member 'FSQAttachmentSkin_Combined_Entry::WeaponAttachmentTypes' has a wrong offset!");
static_assert(offsetof(FSQAttachmentSkin_Combined_Entry, bRemoveMesh) == 0x000010, "Member 'FSQAttachmentSkin_Combined_Entry::bRemoveMesh' has a wrong offset!");
static_assert(offsetof(FSQAttachmentSkin_Combined_Entry, Mesh) == 0x000018, "Member 'FSQAttachmentSkin_Combined_Entry::Mesh' has a wrong offset!");
static_assert(offsetof(FSQAttachmentSkin_Combined_Entry, SkinMaterials) == 0x000040, "Member 'FSQAttachmentSkin_Combined_Entry::SkinMaterials' has a wrong offset!");

// ScriptStruct Squad.SQSkinUIBadge
// 0x0070 (0x0070 - 0x0000)
struct FSQSkinUIBadge final
{
public:
	class FText                                   BadgeText;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FLinearColor                           BadgeTextColor;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BadgeBackgroundColor;                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStriped;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThreeColor;                                       // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3A[0x2];                                      // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Colour1;                                           // 0x003C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Colour2;                                           // 0x004C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Colour3;                                           // 0x005C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3B[0x4];                                      // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSQSkinUIBadge) == 0x000008, "Wrong alignment on FSQSkinUIBadge");
static_assert(sizeof(FSQSkinUIBadge) == 0x000070, "Wrong size on FSQSkinUIBadge");
static_assert(offsetof(FSQSkinUIBadge, BadgeText) == 0x000000, "Member 'FSQSkinUIBadge::BadgeText' has a wrong offset!");
static_assert(offsetof(FSQSkinUIBadge, BadgeTextColor) == 0x000018, "Member 'FSQSkinUIBadge::BadgeTextColor' has a wrong offset!");
static_assert(offsetof(FSQSkinUIBadge, BadgeBackgroundColor) == 0x000028, "Member 'FSQSkinUIBadge::BadgeBackgroundColor' has a wrong offset!");
static_assert(offsetof(FSQSkinUIBadge, bStriped) == 0x000038, "Member 'FSQSkinUIBadge::bStriped' has a wrong offset!");
static_assert(offsetof(FSQSkinUIBadge, bThreeColor) == 0x000039, "Member 'FSQSkinUIBadge::bThreeColor' has a wrong offset!");
static_assert(offsetof(FSQSkinUIBadge, Colour1) == 0x00003C, "Member 'FSQSkinUIBadge::Colour1' has a wrong offset!");
static_assert(offsetof(FSQSkinUIBadge, Colour2) == 0x00004C, "Member 'FSQSkinUIBadge::Colour2' has a wrong offset!");
static_assert(offsetof(FSQSkinUIBadge, Colour3) == 0x00005C, "Member 'FSQSkinUIBadge::Colour3' has a wrong offset!");

// ScriptStruct Squad.SQSwayStancesValues
// 0x0008 (0x0008 - 0x0000)
struct FSQSwayStancesValues final
{
public:
	float                                         AdsSwayMin;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayMin;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSwayStancesValues) == 0x000004, "Wrong alignment on FSQSwayStancesValues");
static_assert(sizeof(FSQSwayStancesValues) == 0x000008, "Wrong size on FSQSwayStancesValues");
static_assert(offsetof(FSQSwayStancesValues, AdsSwayMin) == 0x000000, "Member 'FSQSwayStancesValues::AdsSwayMin' has a wrong offset!");
static_assert(offsetof(FSQSwayStancesValues, SwayMin) == 0x000004, "Member 'FSQSwayStancesValues::SwayMin' has a wrong offset!");

// ScriptStruct Squad.SQSwayStanceGroup
// 0x002C (0x002C - 0x0000)
struct FSQSwayStanceGroup final
{
public:
	float                                         StanceInterpolationSpeed;                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodInterpolationSpeed;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQSwayStancesValues                   Prone;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQSwayStancesValues                   Crouch;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQSwayStancesValues                   Standing;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQSwayStancesValues                   Bipod;                                             // 0x0020(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQSwayProneTransition                 ProneTransition;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSwayStanceGroup) == 0x000004, "Wrong alignment on FSQSwayStanceGroup");
static_assert(sizeof(FSQSwayStanceGroup) == 0x00002C, "Wrong size on FSQSwayStanceGroup");
static_assert(offsetof(FSQSwayStanceGroup, StanceInterpolationSpeed) == 0x000000, "Member 'FSQSwayStanceGroup::StanceInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(FSQSwayStanceGroup, BipodInterpolationSpeed) == 0x000004, "Member 'FSQSwayStanceGroup::BipodInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(FSQSwayStanceGroup, Prone) == 0x000008, "Member 'FSQSwayStanceGroup::Prone' has a wrong offset!");
static_assert(offsetof(FSQSwayStanceGroup, Crouch) == 0x000010, "Member 'FSQSwayStanceGroup::Crouch' has a wrong offset!");
static_assert(offsetof(FSQSwayStanceGroup, Standing) == 0x000018, "Member 'FSQSwayStanceGroup::Standing' has a wrong offset!");
static_assert(offsetof(FSQSwayStanceGroup, Bipod) == 0x000020, "Member 'FSQSwayStanceGroup::Bipod' has a wrong offset!");
static_assert(offsetof(FSQSwayStanceGroup, ProneTransition) == 0x000028, "Member 'FSQSwayStanceGroup::ProneTransition' has a wrong offset!");

// ScriptStruct Squad.SQSwayData
// 0x0094 (0x0094 - 0x0000)
struct FSQSwayData final
{
public:
	struct FSQSwayAspect                          Aspect;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQSwayDynamicGroup                    DynamicGroup;                                      // 0x000C(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQSwayStanceGroup                     StanceGroup;                                       // 0x002C(0x002C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LocationOffsetMultiplier;                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQSwayLimits                          Limits;                                            // 0x005C(0x0004)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3C[0x14];                                     // 0x0060(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnclampedTotalSway;                                // 0x0074(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalSway;                                         // 0x0078(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Sway;                                              // 0x007C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                LocationOffset;                                    // 0x0088(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQSwayData) == 0x000004, "Wrong alignment on FSQSwayData");
static_assert(sizeof(FSQSwayData) == 0x000094, "Wrong size on FSQSwayData");
static_assert(offsetof(FSQSwayData, Aspect) == 0x000000, "Member 'FSQSwayData::Aspect' has a wrong offset!");
static_assert(offsetof(FSQSwayData, DynamicGroup) == 0x00000C, "Member 'FSQSwayData::DynamicGroup' has a wrong offset!");
static_assert(offsetof(FSQSwayData, StanceGroup) == 0x00002C, "Member 'FSQSwayData::StanceGroup' has a wrong offset!");
static_assert(offsetof(FSQSwayData, LocationOffsetMultiplier) == 0x000058, "Member 'FSQSwayData::LocationOffsetMultiplier' has a wrong offset!");
static_assert(offsetof(FSQSwayData, Limits) == 0x00005C, "Member 'FSQSwayData::Limits' has a wrong offset!");
static_assert(offsetof(FSQSwayData, UnclampedTotalSway) == 0x000074, "Member 'FSQSwayData::UnclampedTotalSway' has a wrong offset!");
static_assert(offsetof(FSQSwayData, TotalSway) == 0x000078, "Member 'FSQSwayData::TotalSway' has a wrong offset!");
static_assert(offsetof(FSQSwayData, Sway) == 0x00007C, "Member 'FSQSwayData::Sway' has a wrong offset!");
static_assert(offsetof(FSQSwayData, LocationOffset) == 0x000088, "Member 'FSQSwayData::LocationOffset' has a wrong offset!");

// ScriptStruct Squad.SQFireTriggerMontage
// 0x0010 (0x0010 - 0x0000)
struct FSQFireTriggerMontage final
{
public:
	class UAnimMontage*                           FireWeaponMontage;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireTriggerMontage;                                // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSQFireTriggerMontage) == 0x000008, "Wrong alignment on FSQFireTriggerMontage");
static_assert(sizeof(FSQFireTriggerMontage) == 0x000010, "Wrong size on FSQFireTriggerMontage");
static_assert(offsetof(FSQFireTriggerMontage, FireWeaponMontage) == 0x000000, "Member 'FSQFireTriggerMontage::FireWeaponMontage' has a wrong offset!");
static_assert(offsetof(FSQFireTriggerMontage, FireTriggerMontage) == 0x000008, "Member 'FSQFireTriggerMontage::FireTriggerMontage' has a wrong offset!");

// ScriptStruct Squad.VehicleTankEngineData
// 0x00A0 (0x00A0 - 0x0000)
struct FVehicleTankEngineData final
{
public:
	struct FRuntimeFloatCurve                     TorqueCurve;                                       // 0x0000(0x0088)(Edit, NativeAccessSpecifierPublic)
	float                                         MaxRPM;                                            // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MOI;                                               // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateFullThrottle;                           // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateZeroThrottleClutchEngaged;              // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingRateZeroThrottleClutchDisengaged;           // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3D[0x4];                                      // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVehicleTankEngineData) == 0x000008, "Wrong alignment on FVehicleTankEngineData");
static_assert(sizeof(FVehicleTankEngineData) == 0x0000A0, "Wrong size on FVehicleTankEngineData");
static_assert(offsetof(FVehicleTankEngineData, TorqueCurve) == 0x000000, "Member 'FVehicleTankEngineData::TorqueCurve' has a wrong offset!");
static_assert(offsetof(FVehicleTankEngineData, MaxRPM) == 0x000088, "Member 'FVehicleTankEngineData::MaxRPM' has a wrong offset!");
static_assert(offsetof(FVehicleTankEngineData, MOI) == 0x00008C, "Member 'FVehicleTankEngineData::MOI' has a wrong offset!");
static_assert(offsetof(FVehicleTankEngineData, DampingRateFullThrottle) == 0x000090, "Member 'FVehicleTankEngineData::DampingRateFullThrottle' has a wrong offset!");
static_assert(offsetof(FVehicleTankEngineData, DampingRateZeroThrottleClutchEngaged) == 0x000094, "Member 'FVehicleTankEngineData::DampingRateZeroThrottleClutchEngaged' has a wrong offset!");
static_assert(offsetof(FVehicleTankEngineData, DampingRateZeroThrottleClutchDisengaged) == 0x000098, "Member 'FVehicleTankEngineData::DampingRateZeroThrottleClutchDisengaged' has a wrong offset!");

// ScriptStruct Squad.VehicleNWTransmissionData
// 0x0040 (0x0040 - 0x0000)
struct FVehicleNWTransmissionData final
{
public:
	bool                                          bUseGearAutoBox;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3E[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GearSwitchTime;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearAutoBoxLatency;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinalRatio;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVehicleNWGearData>             ForwardGears;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FVehicleNWGearData>             BackwardGears;                                     // 0x0020(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         ReverseGearRatio;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralGearUpRatio;                                // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeutralGearDownRatio;                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClutchStrength;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVehicleNWTransmissionData) == 0x000008, "Wrong alignment on FVehicleNWTransmissionData");
static_assert(sizeof(FVehicleNWTransmissionData) == 0x000040, "Wrong size on FVehicleNWTransmissionData");
static_assert(offsetof(FVehicleNWTransmissionData, bUseGearAutoBox) == 0x000000, "Member 'FVehicleNWTransmissionData::bUseGearAutoBox' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, GearSwitchTime) == 0x000004, "Member 'FVehicleNWTransmissionData::GearSwitchTime' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, GearAutoBoxLatency) == 0x000008, "Member 'FVehicleNWTransmissionData::GearAutoBoxLatency' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, FinalRatio) == 0x00000C, "Member 'FVehicleNWTransmissionData::FinalRatio' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, ForwardGears) == 0x000010, "Member 'FVehicleNWTransmissionData::ForwardGears' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, BackwardGears) == 0x000020, "Member 'FVehicleNWTransmissionData::BackwardGears' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, ReverseGearRatio) == 0x000030, "Member 'FVehicleNWTransmissionData::ReverseGearRatio' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, NeutralGearUpRatio) == 0x000034, "Member 'FVehicleNWTransmissionData::NeutralGearUpRatio' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, NeutralGearDownRatio) == 0x000038, "Member 'FVehicleNWTransmissionData::NeutralGearDownRatio' has a wrong offset!");
static_assert(offsetof(FVehicleNWTransmissionData, ClutchStrength) == 0x00003C, "Member 'FVehicleNWTransmissionData::ClutchStrength' has a wrong offset!");

}

