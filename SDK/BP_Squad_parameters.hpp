#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Squad

#include "Basic.hpp"

#include "Squad_structs.hpp"


namespace SDK::Params
{

// Function BP_Squad.BP_Squad_C.ExecuteUbergraph_BP_Squad
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Squad_C_ExecuteUbergraph_BP_Squad final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A33[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSquad*                               K2Node_CustomEvent_Squad;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerController*                    K2Node_CustomEvent_Player;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ASQSquad* Squad, int32 FireTeamId)> K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ASQSquad* Squad, int32 FireTeamId)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ASQSquad* Squad, class ASQPlayerController* Player)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ASQSquad* Squad, class ASQPlayerController* Player)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(class ASQSquad* Squad, class ASQPlayerController* Player)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x0058(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A34[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSquad*                               K2Node_CustomEvent_Squad_4;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_FireteamID_1;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A35[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSquad*                               K2Node_CustomEvent_Squad_3;                        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_FireteamID;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A36[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSquad*                               K2Node_CustomEvent_Squad_2;                        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerController*                    K2Node_CustomEvent_Player_2;                       // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQSquad*                               K2Node_CustomEvent_Squad_1;                        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerController*                    K2Node_CustomEvent_Player_1;                       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Squad_C_ExecuteUbergraph_BP_Squad) == 0x000008, "Wrong alignment on BP_Squad_C_ExecuteUbergraph_BP_Squad");
static_assert(sizeof(BP_Squad_C_ExecuteUbergraph_BP_Squad) == 0x0000B0, "Wrong size on BP_Squad_C_ExecuteUbergraph_BP_Squad");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, EntryPoint) == 0x000000, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CustomEvent_Squad) == 0x000008, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CustomEvent_Squad' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CustomEvent_Player) == 0x000010, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CustomEvent_Player' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CreateDelegate_OutputDelegate_2) == 0x000038, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CreateDelegate_OutputDelegate_3) == 0x000048, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CreateDelegate_OutputDelegate_4) == 0x000058, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, CallFunc_HasAuthority_ReturnValue) == 0x000068, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CustomEvent_Squad_4) == 0x000070, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CustomEvent_Squad_4' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CustomEvent_FireteamID_1) == 0x000078, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CustomEvent_FireteamID_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CustomEvent_Squad_3) == 0x000080, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CustomEvent_Squad_3' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CustomEvent_FireteamID) == 0x000088, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CustomEvent_FireteamID' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CustomEvent_Squad_2) == 0x000090, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CustomEvent_Squad_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CustomEvent_Player_2) == 0x000098, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CustomEvent_Player_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CustomEvent_Squad_1) == 0x0000A0, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CustomEvent_Squad_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_ExecuteUbergraph_BP_Squad, K2Node_CustomEvent_Player_1) == 0x0000A8, "Member 'BP_Squad_C_ExecuteUbergraph_BP_Squad::K2Node_CustomEvent_Player_1' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.OnPlayerBecomeSquadLeader_Event_0
// 0x0010 (0x0010 - 0x0000)
struct BP_Squad_C_OnPlayerBecomeSquadLeader_Event_0 final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerController*                    Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Squad_C_OnPlayerBecomeSquadLeader_Event_0) == 0x000008, "Wrong alignment on BP_Squad_C_OnPlayerBecomeSquadLeader_Event_0");
static_assert(sizeof(BP_Squad_C_OnPlayerBecomeSquadLeader_Event_0) == 0x000010, "Wrong size on BP_Squad_C_OnPlayerBecomeSquadLeader_Event_0");
static_assert(offsetof(BP_Squad_C_OnPlayerBecomeSquadLeader_Event_0, Squad) == 0x000000, "Member 'BP_Squad_C_OnPlayerBecomeSquadLeader_Event_0::Squad' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnPlayerBecomeSquadLeader_Event_0, Player) == 0x000008, "Member 'BP_Squad_C_OnPlayerBecomeSquadLeader_Event_0::Player' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.OnPlayerJoinSquad_Event_0
// 0x0010 (0x0010 - 0x0000)
struct BP_Squad_C_OnPlayerJoinSquad_Event_0 final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerController*                    Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Squad_C_OnPlayerJoinSquad_Event_0) == 0x000008, "Wrong alignment on BP_Squad_C_OnPlayerJoinSquad_Event_0");
static_assert(sizeof(BP_Squad_C_OnPlayerJoinSquad_Event_0) == 0x000010, "Wrong size on BP_Squad_C_OnPlayerJoinSquad_Event_0");
static_assert(offsetof(BP_Squad_C_OnPlayerJoinSquad_Event_0, Squad) == 0x000000, "Member 'BP_Squad_C_OnPlayerJoinSquad_Event_0::Squad' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnPlayerJoinSquad_Event_0, Player) == 0x000008, "Member 'BP_Squad_C_OnPlayerJoinSquad_Event_0::Player' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.OnPlayerPartSquad_Event_0
// 0x0010 (0x0010 - 0x0000)
struct BP_Squad_C_OnPlayerPartSquad_Event_0 final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerController*                    Player;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Squad_C_OnPlayerPartSquad_Event_0) == 0x000008, "Wrong alignment on BP_Squad_C_OnPlayerPartSquad_Event_0");
static_assert(sizeof(BP_Squad_C_OnPlayerPartSquad_Event_0) == 0x000010, "Wrong size on BP_Squad_C_OnPlayerPartSquad_Event_0");
static_assert(offsetof(BP_Squad_C_OnPlayerPartSquad_Event_0, Squad) == 0x000000, "Member 'BP_Squad_C_OnPlayerPartSquad_Event_0::Squad' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnPlayerPartSquad_Event_0, Player) == 0x000008, "Member 'BP_Squad_C_OnPlayerPartSquad_Event_0::Player' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.OnFireteamUpdated_Event_0
// 0x0010 (0x0010 - 0x0000)
struct BP_Squad_C_OnFireteamUpdated_Event_0 final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FireTeamId;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Squad_C_OnFireteamUpdated_Event_0) == 0x000008, "Wrong alignment on BP_Squad_C_OnFireteamUpdated_Event_0");
static_assert(sizeof(BP_Squad_C_OnFireteamUpdated_Event_0) == 0x000010, "Wrong size on BP_Squad_C_OnFireteamUpdated_Event_0");
static_assert(offsetof(BP_Squad_C_OnFireteamUpdated_Event_0, Squad) == 0x000000, "Member 'BP_Squad_C_OnFireteamUpdated_Event_0::Squad' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnFireteamUpdated_Event_0, FireTeamId) == 0x000008, "Member 'BP_Squad_C_OnFireteamUpdated_Event_0::FireTeamId' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.OnFireteamDisbanded_Event_0
// 0x0010 (0x0010 - 0x0000)
struct BP_Squad_C_OnFireteamDisbanded_Event_0 final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FireTeamId;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Squad_C_OnFireteamDisbanded_Event_0) == 0x000008, "Wrong alignment on BP_Squad_C_OnFireteamDisbanded_Event_0");
static_assert(sizeof(BP_Squad_C_OnFireteamDisbanded_Event_0) == 0x000010, "Wrong size on BP_Squad_C_OnFireteamDisbanded_Event_0");
static_assert(offsetof(BP_Squad_C_OnFireteamDisbanded_Event_0, Squad) == 0x000000, "Member 'BP_Squad_C_OnFireteamDisbanded_Event_0::Squad' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnFireteamDisbanded_Event_0, FireTeamId) == 0x000008, "Member 'BP_Squad_C_OnFireteamDisbanded_Event_0::FireTeamId' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.Destroy All Markers
// 0x0030 (0x0030 - 0x0000)
struct BP_Squad_C_Destroy_All_Markers final
{
public:
	TArray<class ASQMapMarker*>                   Markers_To_Destroy;                                // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A37[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQMapMarker*                           CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Squad_C_Destroy_All_Markers) == 0x000008, "Wrong alignment on BP_Squad_C_Destroy_All_Markers");
static_assert(sizeof(BP_Squad_C_Destroy_All_Markers) == 0x000030, "Wrong size on BP_Squad_C_Destroy_All_Markers");
static_assert(offsetof(BP_Squad_C_Destroy_All_Markers, Markers_To_Destroy) == 0x000000, "Member 'BP_Squad_C_Destroy_All_Markers::Markers_To_Destroy' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_All_Markers, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_Squad_C_Destroy_All_Markers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_All_Markers, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'BP_Squad_C_Destroy_All_Markers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_All_Markers, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_Squad_C_Destroy_All_Markers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_All_Markers, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_Squad_C_Destroy_All_Markers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_All_Markers, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_Squad_C_Destroy_All_Markers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_All_Markers, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'BP_Squad_C_Destroy_All_Markers::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_All_Markers, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'BP_Squad_C_Destroy_All_Markers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.Destroy Fireteam Markers
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Squad_C_Destroy_Fireteam_Markers final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_FT_Members_in_other_squads;                    // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A38[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A39[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQFireTeam                            CallFunc_Array_Get_Item;                           // 0x0028(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A3A[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A3B[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQMapMarker*                           CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A3C[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQMapMarker*                           CallFunc_Array_Get_Item_2;                         // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQFireTeam                            CallFunc_Array_Get_Item_3;                         // 0x0070(0x0018)()
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A3D[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetFireteamId_ReturnValue;                // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A3E[0x1];                                     // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Squad_C_Destroy_Fireteam_Markers) == 0x000008, "Wrong alignment on BP_Squad_C_Destroy_Fireteam_Markers");
static_assert(sizeof(BP_Squad_C_Destroy_Fireteam_Markers) == 0x0000A0, "Wrong size on BP_Squad_C_Destroy_Fireteam_Markers");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, ID) == 0x000000, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::ID' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, Has_FT_Members_in_other_squads) == 0x000004, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::Has_FT_Members_in_other_squads' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, Temp_int_Loop_Counter_Variable_1) == 0x00001C, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Add_IntInt_ReturnValue_1) == 0x000020, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, Temp_int_Array_Index_Variable_2) == 0x000024, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_Length_ReturnValue_1) == 0x000048, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00004C, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_Length_ReturnValue_2) == 0x000058, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, Temp_int_Loop_Counter_Variable_2) == 0x00005C, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Less_IntInt_ReturnValue_1) == 0x000060, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Add_IntInt_ReturnValue_2) == 0x000064, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_Get_Item_2) == 0x000068, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_Get_Item_3) == 0x000070, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_RemoveItem_ReturnValue) == 0x000088, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_Length_ReturnValue_3) == 0x00008C, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_GetFireteamId_ReturnValue) == 0x000090, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_GetFireteamId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000094, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000095, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000096, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Array_Length_ReturnValue_4) == 0x000098, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Destroy_Fireteam_Markers, CallFunc_Less_IntInt_ReturnValue_2) == 0x00009C, "Member 'BP_Squad_C_Destroy_Fireteam_Markers::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.Fireteam Notification
// 0x0118 (0x0118 - 0x0000)
struct BP_Squad_C_Fireteam_Notification final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FT;                                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A3F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LCachedFTLName;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A40[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A41[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A42[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0050(0x0018)()
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A43[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQFireTeam                            CallFunc_Array_Get_Item;                           // 0x0070(0x0018)()
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A44[0x7];                                     // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    CallFunc_Array_Get_Item_1;                         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFireTeamLeader_ReturnValue;             // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A45[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         K2Node_DynamicCast_AsSQPlayer_State;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A46[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    CallFunc_Array_Get_Item_2;                         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetFullPlayerName_ReturnValue;            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFireTeamLeader_ReturnValue_1;           // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A47[0x6];                                     // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller;         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A48[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    CallFunc_Array_Get_Item_3;                         // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSquadLeader_ReturnValue;                // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x00EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFireTeamLeader_ReturnValue_2;           // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A49[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller_1;       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4A[0x3];                                     // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4B[0x3];                                     // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Squad_C_Fireteam_Notification) == 0x000008, "Wrong alignment on BP_Squad_C_Fireteam_Notification");
static_assert(sizeof(BP_Squad_C_Fireteam_Notification) == 0x000118, "Wrong size on BP_Squad_C_Fireteam_Notification");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, Squad) == 0x000000, "Member 'BP_Squad_C_Fireteam_Notification::Squad' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, FT) == 0x000008, "Member 'BP_Squad_C_Fireteam_Notification::FT' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, LCachedFTLName) == 0x000010, "Member 'BP_Squad_C_Fireteam_Notification::LCachedFTLName' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_Squad_C_Fireteam_Notification::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_Squad_C_Fireteam_Notification::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'BP_Squad_C_Fireteam_Notification::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, Temp_int_Array_Index_Variable_2) == 0x000030, "Member 'BP_Squad_C_Fireteam_Notification::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, Temp_int_Loop_Counter_Variable_1) == 0x000034, "Member 'BP_Squad_C_Fireteam_Notification::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000038, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, Temp_bool_True_if_break_was_hit_Variable) == 0x000040, "Member 'BP_Squad_C_Fireteam_Notification::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, Temp_int_Loop_Counter_Variable_2) == 0x000044, "Member 'BP_Squad_C_Fireteam_Notification::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Add_IntInt_ReturnValue_2) == 0x000048, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Not_PreBool_ReturnValue) == 0x00004C, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Conv_StringToText_ReturnValue) == 0x000050, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000068, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Array_Get_Item) == 0x000070, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000088, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_IsFireTeamLeader_ReturnValue) == 0x000098, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_IsFireTeamLeader_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, K2Node_DynamicCast_AsSQPlayer_State) == 0x0000A0, "Member 'BP_Squad_C_Fireteam_Notification::K2Node_DynamicCast_AsSQPlayer_State' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_Squad_C_Fireteam_Notification::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Array_Get_Item_2) == 0x0000B0, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_GetFullPlayerName_ReturnValue) == 0x0000B8, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_GetFullPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_IsFireTeamLeader_ReturnValue_1) == 0x0000C8, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_IsFireTeamLeader_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000C9, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, K2Node_DynamicCast_AsBP_Player_Controller) == 0x0000D0, "Member 'BP_Squad_C_Fireteam_Notification::K2Node_DynamicCast_AsBP_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, K2Node_DynamicCast_bSuccess_1) == 0x0000D8, "Member 'BP_Squad_C_Fireteam_Notification::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Array_Get_Item_3) == 0x0000E0, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Array_Length_ReturnValue) == 0x0000E8, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_IsSquadLeader_ReturnValue) == 0x0000EC, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_IsSquadLeader_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Less_IntInt_ReturnValue) == 0x0000ED, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Not_PreBool_ReturnValue_2) == 0x0000EE, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_BooleanAND_ReturnValue) == 0x0000EF, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_IsFireTeamLeader_ReturnValue_2) == 0x0000F0, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_IsFireTeamLeader_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, K2Node_DynamicCast_AsBP_Player_Controller_1) == 0x0000F8, "Member 'BP_Squad_C_Fireteam_Notification::K2Node_DynamicCast_AsBP_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, K2Node_DynamicCast_bSuccess_2) == 0x000100, "Member 'BP_Squad_C_Fireteam_Notification::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Array_Length_ReturnValue_1) == 0x000104, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Less_IntInt_ReturnValue_1) == 0x000108, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Array_Length_ReturnValue_2) == 0x00010C, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Fireteam_Notification, CallFunc_Less_IntInt_ReturnValue_2) == 0x000110, "Member 'BP_Squad_C_Fireteam_Notification::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.Parting Notification
// 0x0038 (0x0038 - 0x0000)
struct BP_Squad_C_Parting_Notification final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            Leaving_State;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         K2Node_DynamicCast_AsSQPlayer_State;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4D[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Squad_C_Parting_Notification) == 0x000008, "Wrong alignment on BP_Squad_C_Parting_Notification");
static_assert(sizeof(BP_Squad_C_Parting_Notification) == 0x000038, "Wrong size on BP_Squad_C_Parting_Notification");
static_assert(offsetof(BP_Squad_C_Parting_Notification, Squad) == 0x000000, "Member 'BP_Squad_C_Parting_Notification::Squad' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Parting_Notification, Leaving_State) == 0x000008, "Member 'BP_Squad_C_Parting_Notification::Leaving_State' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Parting_Notification, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Squad_C_Parting_Notification::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Parting_Notification, K2Node_DynamicCast_AsSQPlayer_State) == 0x000018, "Member 'BP_Squad_C_Parting_Notification::K2Node_DynamicCast_AsSQPlayer_State' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Parting_Notification, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Squad_C_Parting_Notification::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Parting_Notification, K2Node_DynamicCast_AsBP_Player_Controller) == 0x000028, "Member 'BP_Squad_C_Parting_Notification::K2Node_DynamicCast_AsBP_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Parting_Notification, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BP_Squad_C_Parting_Notification::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.Become SL Notification
// 0x0020 (0x0020 - 0x0000)
struct BP_Squad_C_Become_SL_Notification final
{
public:
	class ASQSquad*                               State;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_C*                 NewLocalVar_0;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsCommander_ReturnValue;                  // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Squad_C_Become_SL_Notification) == 0x000008, "Wrong alignment on BP_Squad_C_Become_SL_Notification");
static_assert(sizeof(BP_Squad_C_Become_SL_Notification) == 0x000020, "Wrong size on BP_Squad_C_Become_SL_Notification");
static_assert(offsetof(BP_Squad_C_Become_SL_Notification, State) == 0x000000, "Member 'BP_Squad_C_Become_SL_Notification::State' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Become_SL_Notification, NewLocalVar_0) == 0x000008, "Member 'BP_Squad_C_Become_SL_Notification::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Become_SL_Notification, K2Node_DynamicCast_AsBP_Player_Controller) == 0x000010, "Member 'BP_Squad_C_Become_SL_Notification::K2Node_DynamicCast_AsBP_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Become_SL_Notification, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Squad_C_Become_SL_Notification::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Become_SL_Notification, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'BP_Squad_C_Become_SL_Notification::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_Become_SL_Notification, CallFunc_IsCommander_ReturnValue) == 0x00001A, "Member 'BP_Squad_C_Become_SL_Notification::CallFunc_IsCommander_ReturnValue' has a wrong offset!");

// Function BP_Squad.BP_Squad_C.OnJoinedEvent
// 0x0038 (0x0038 - 0x0000)
struct BP_Squad_C_OnJoinedEvent final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            Joining_State;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4E[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         K2Node_DynamicCast_AsSQPlayer_State;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A4F[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller;         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Squad_C_OnJoinedEvent) == 0x000008, "Wrong alignment on BP_Squad_C_OnJoinedEvent");
static_assert(sizeof(BP_Squad_C_OnJoinedEvent) == 0x000038, "Wrong size on BP_Squad_C_OnJoinedEvent");
static_assert(offsetof(BP_Squad_C_OnJoinedEvent, Squad) == 0x000000, "Member 'BP_Squad_C_OnJoinedEvent::Squad' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnJoinedEvent, Joining_State) == 0x000008, "Member 'BP_Squad_C_OnJoinedEvent::Joining_State' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnJoinedEvent, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Squad_C_OnJoinedEvent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnJoinedEvent, K2Node_DynamicCast_AsSQPlayer_State) == 0x000018, "Member 'BP_Squad_C_OnJoinedEvent::K2Node_DynamicCast_AsSQPlayer_State' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnJoinedEvent, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_Squad_C_OnJoinedEvent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnJoinedEvent, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000021, "Member 'BP_Squad_C_OnJoinedEvent::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnJoinedEvent, K2Node_DynamicCast_AsBP_Player_Controller) == 0x000028, "Member 'BP_Squad_C_OnJoinedEvent::K2Node_DynamicCast_AsBP_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Squad_C_OnJoinedEvent, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BP_Squad_C_OnJoinedEvent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

}

