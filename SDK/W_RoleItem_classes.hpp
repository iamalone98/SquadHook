#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RoleItem

#include "Basic.hpp"

#include "SQRoleTags_structs.hpp"
#include "SQRoleGroupingStrategy_structs.hpp"
#include "Engine_structs.hpp"
#include "Squad_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_RoleItem.W_RoleItem_C
// 0x0150 (0x03B0 - 0x0260)
class UW_RoleItem_C : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Open;                                              // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                Border_Main;                                       // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Button_Role;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 IconRole;                                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SelectedLine;                                      // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TBAvailable;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TBName;                                            // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        WidgetSwitcher_Availability;                       // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ASQPlayerController*                    My_PC;                                             // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ASQPlayerState*                         My_PS;                                             // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Role_Selected;                                     // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UW_SubRoleItem_C*>               Sub_Role_Widgets;                                  // 0x02C8(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	class UW_SubRoleOptions_C*                    Sub_Options_UI;                                    // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Sub_Role_Item_Class;                               // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQRoleGroupingStrategy                TagGroupingStrategy;                               // 0x02E8(0x00A0)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          HasTagGrouping;                                    // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_486E[0x7];                                     // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQAvailabilityState_Role>      Role_States;                                       // 0x0390(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, ContainsInstancedReference)
	FMulticastInlineDelegateProperty_             Role_Hovered;                                      // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Role_Selected__DelegateSignature(class USQRoleSettings* Role);
	void Role_Hovered__DelegateSignature(class USQRoleSettings* Role, bool Hovered, class UW_RoleItem_C* Button_Reference, bool bSubRole);
	void ExecuteUbergraph_W_RoleItem(int32 EntryPoint);
	void On_Button_Pressed();
	void OnRoleChange(class USQRoleSettings* In_Current_Role);
	void On_Tick(const TArray<struct FSQAvailabilityState_Role>& In_Player_Role_States);
	void SubRole_Selected(class USQRoleSettings* Role);
	void Select_Role(class USQRoleSettings* In_Selected_Role);
	void BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature();
	void BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature();
	void Get_State_Color(bool In_Selected, bool In_Locked, struct FLinearColor* Out_Color);
	void Open_Sub_Roles();
	void AddSubRoleItem(const struct FSQAvailabilityState_Role& InTeamRoleAvailabilityState);
	void CreateSubRoleWidget(const struct FSQAvailabilityState_Role& InState);
	void HasThisTagGrouping(const struct FSQRoleGroupingStrategy& InTagGrouping, bool* OutHasMatchingTagGrouping);
	void SetTagGrouping(const struct FSQRoleGroupingStrategy& InTagGroupingStrategy);
	void GetRoleEntry(int32 In_Index, struct FFSQRoleEntry* OutEntry);
	void GetIcon(int32 InIndex, TSoftObjectPtr<class UTexture2D>* OutIcon);
	void GetDisplayName(int32 InIndex, class FText* OutDisplayName);
	void GetWeaponImage(int32 InIndex, TSoftObjectPtr<class UTexture2D>* OutIcon);
	void SetupExposition();
	void PlayerIsNotSpawned(bool* Out_Is_NOT_Spawned);
	void TryGetFirstRole(bool* Out_Success, class USQRoleSettings** Out_Role_Setting);
	void IsRoleAlreadySelected(class USQRoleSettings* In_Role_Setting, bool* Out_Not_Selected_Yet);
	void ShouldHideThisItem(bool* Out_ShouldHide);
	void SetRoleVisible(bool InVisible);
	void UpdateLocalStates(TArray<struct FSQAvailabilityState_Role>& In_Player_Role_States);
	void UpdateSubOptions();
	void IsAvailable(bool* Out_Is_Available);
	void GetWidgetSwitcherIndex(int32 In_Availability, int32* Out_Widget_Switcher_Index);
	void GetCounts(int32* Out_Used, int32* Out_Availability);
	void IsSelectedRole(bool* Out_Selected);
	void UpdateExposition();
	void GetUnavailabilityReason(int32 InIndex, class FText* OutReason);
	void IsItemMatching(class USQRoleSettings* In_Setting, bool* Is_Matching);
	void IsButtonHovered(bool* Is_Hovered);
	void Close_Sub_Roles();
	void GetRole(int32 In_Index, bool* Out_Success, class UBP_SQRoleSettings_C** OutEntry);
	void GetCountText(class FText* Out_CountText);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_RoleItem_C">();
	}
	static class UW_RoleItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_RoleItem_C>();
	}
};
static_assert(alignof(UW_RoleItem_C) == 0x000008, "Wrong alignment on UW_RoleItem_C");
static_assert(sizeof(UW_RoleItem_C) == 0x0003B0, "Wrong size on UW_RoleItem_C");
static_assert(offsetof(UW_RoleItem_C, UberGraphFrame) == 0x000260, "Member 'UW_RoleItem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, Open) == 0x000268, "Member 'UW_RoleItem_C::Open' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, Border_Main) == 0x000270, "Member 'UW_RoleItem_C::Border_Main' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, Button_Role) == 0x000278, "Member 'UW_RoleItem_C::Button_Role' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, IconRole) == 0x000280, "Member 'UW_RoleItem_C::IconRole' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, SelectedLine) == 0x000288, "Member 'UW_RoleItem_C::SelectedLine' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, TBAvailable) == 0x000290, "Member 'UW_RoleItem_C::TBAvailable' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, TBName) == 0x000298, "Member 'UW_RoleItem_C::TBName' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, WidgetSwitcher_Availability) == 0x0002A0, "Member 'UW_RoleItem_C::WidgetSwitcher_Availability' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, My_PC) == 0x0002A8, "Member 'UW_RoleItem_C::My_PC' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, My_PS) == 0x0002B0, "Member 'UW_RoleItem_C::My_PS' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, Role_Selected) == 0x0002B8, "Member 'UW_RoleItem_C::Role_Selected' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, Sub_Role_Widgets) == 0x0002C8, "Member 'UW_RoleItem_C::Sub_Role_Widgets' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, Sub_Options_UI) == 0x0002D8, "Member 'UW_RoleItem_C::Sub_Options_UI' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, Sub_Role_Item_Class) == 0x0002E0, "Member 'UW_RoleItem_C::Sub_Role_Item_Class' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, TagGroupingStrategy) == 0x0002E8, "Member 'UW_RoleItem_C::TagGroupingStrategy' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, HasTagGrouping) == 0x000388, "Member 'UW_RoleItem_C::HasTagGrouping' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, Role_States) == 0x000390, "Member 'UW_RoleItem_C::Role_States' has a wrong offset!");
static_assert(offsetof(UW_RoleItem_C, Role_Hovered) == 0x0003A0, "Member 'UW_RoleItem_C::Role_Hovered' has a wrong offset!");

}

