#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_VoteEntryBase

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UMG_VoteEntryBase.UMG_VoteEntryBase_C.ExecuteUbergraph_UMG_VoteEntryBase
// 0x0048 (0x0048 - 0x0000)
struct UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4190[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_VoteCount;                      // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_HasVotedFor;                    // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4191[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UVoteScreenListItem_C*                  K2Node_DynamicCast_AsVote_Screen_List_Item;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsWinner;                       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4192[0x2];                                     // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool IsWinner)>                K2Node_CreateDelegate_OutputDelegate;              // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void(int32 VoteCount, bool HasVotedFor)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase) == 0x000008, "Wrong alignment on UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase");
static_assert(sizeof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase) == 0x000048, "Wrong size on UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, EntryPoint) == 0x000000, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, K2Node_Event_bIsExpanded) == 0x000004, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::K2Node_Event_bIsExpanded' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, K2Node_Event_bIsSelected) == 0x000005, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, K2Node_Event_ListItemObject) == 0x000008, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, K2Node_CustomEvent_VoteCount) == 0x000010, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::K2Node_CustomEvent_VoteCount' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, K2Node_CustomEvent_HasVotedFor) == 0x000014, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::K2Node_CustomEvent_HasVotedFor' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, K2Node_DynamicCast_AsVote_Screen_List_Item) == 0x000018, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::K2Node_DynamicCast_AsVote_Screen_List_Item' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, K2Node_CustomEvent_IsWinner) == 0x000021, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::K2Node_CustomEvent_IsWinner' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, K2Node_CreateDelegate_OutputDelegate) == 0x000024, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase, K2Node_CreateDelegate_OutputDelegate_1) == 0x000034, "Member 'UMG_VoteEntryBase_C_ExecuteUbergraph_UMG_VoteEntryBase::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function UMG_VoteEntryBase.UMG_VoteEntryBase_C.OnEndVote
// 0x0001 (0x0001 - 0x0000)
struct UMG_VoteEntryBase_C_OnEndVote final
{
public:
	bool                                          IsWinner;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteEntryBase_C_OnEndVote) == 0x000001, "Wrong alignment on UMG_VoteEntryBase_C_OnEndVote");
static_assert(sizeof(UMG_VoteEntryBase_C_OnEndVote) == 0x000001, "Wrong size on UMG_VoteEntryBase_C_OnEndVote");
static_assert(offsetof(UMG_VoteEntryBase_C_OnEndVote, IsWinner) == 0x000000, "Member 'UMG_VoteEntryBase_C_OnEndVote::IsWinner' has a wrong offset!");

// Function UMG_VoteEntryBase.UMG_VoteEntryBase_C.OnUpdateVote
// 0x0008 (0x0008 - 0x0000)
struct UMG_VoteEntryBase_C_OnUpdateVote final
{
public:
	int32                                         VoteCount;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasVotedFor;                                       // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteEntryBase_C_OnUpdateVote) == 0x000004, "Wrong alignment on UMG_VoteEntryBase_C_OnUpdateVote");
static_assert(sizeof(UMG_VoteEntryBase_C_OnUpdateVote) == 0x000008, "Wrong size on UMG_VoteEntryBase_C_OnUpdateVote");
static_assert(offsetof(UMG_VoteEntryBase_C_OnUpdateVote, VoteCount) == 0x000000, "Member 'UMG_VoteEntryBase_C_OnUpdateVote::VoteCount' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_OnUpdateVote, HasVotedFor) == 0x000004, "Member 'UMG_VoteEntryBase_C_OnUpdateVote::HasVotedFor' has a wrong offset!");

// Function UMG_VoteEntryBase.UMG_VoteEntryBase_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct UMG_VoteEntryBase_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteEntryBase_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on UMG_VoteEntryBase_C_OnListItemObjectSet");
static_assert(sizeof(UMG_VoteEntryBase_C_OnListItemObjectSet) == 0x000008, "Wrong size on UMG_VoteEntryBase_C_OnListItemObjectSet");
static_assert(offsetof(UMG_VoteEntryBase_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'UMG_VoteEntryBase_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function UMG_VoteEntryBase.UMG_VoteEntryBase_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct UMG_VoteEntryBase_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteEntryBase_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on UMG_VoteEntryBase_C_BP_OnItemSelectionChanged");
static_assert(sizeof(UMG_VoteEntryBase_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on UMG_VoteEntryBase_C_BP_OnItemSelectionChanged");
static_assert(offsetof(UMG_VoteEntryBase_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'UMG_VoteEntryBase_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function UMG_VoteEntryBase.UMG_VoteEntryBase_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct UMG_VoteEntryBase_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteEntryBase_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on UMG_VoteEntryBase_C_BP_OnItemExpansionChanged");
static_assert(sizeof(UMG_VoteEntryBase_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on UMG_VoteEntryBase_C_BP_OnItemExpansionChanged");
static_assert(offsetof(UMG_VoteEntryBase_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'UMG_VoteEntryBase_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

// Function UMG_VoteEntryBase.UMG_VoteEntryBase_C.SubmitVote
// 0x0002 (0x0002 - 0x0000)
struct UMG_VoteEntryBase_C_SubmitVote final
{
public:
	bool                                          OutVotedDisplayStatus;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SendVote_OutVotedDisplayStatus;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteEntryBase_C_SubmitVote) == 0x000001, "Wrong alignment on UMG_VoteEntryBase_C_SubmitVote");
static_assert(sizeof(UMG_VoteEntryBase_C_SubmitVote) == 0x000002, "Wrong size on UMG_VoteEntryBase_C_SubmitVote");
static_assert(offsetof(UMG_VoteEntryBase_C_SubmitVote, OutVotedDisplayStatus) == 0x000000, "Member 'UMG_VoteEntryBase_C_SubmitVote::OutVotedDisplayStatus' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_SubmitVote, CallFunc_SendVote_OutVotedDisplayStatus) == 0x000001, "Member 'UMG_VoteEntryBase_C_SubmitVote::CallFunc_SendVote_OutVotedDisplayStatus' has a wrong offset!");

// Function UMG_VoteEntryBase.UMG_VoteEntryBase_C.OnMouseButtonDown
// 0x0220 (0x0220 - 0x0000)
struct UMG_VoteEntryBase_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0070)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00A8(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0160(0x00B8)()
	bool                                          CallFunc_SubmitVote_OutVotedDisplayStatus;         // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteEntryBase_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on UMG_VoteEntryBase_C_OnMouseButtonDown");
static_assert(sizeof(UMG_VoteEntryBase_C_OnMouseButtonDown) == 0x000220, "Wrong size on UMG_VoteEntryBase_C_OnMouseButtonDown");
static_assert(offsetof(UMG_VoteEntryBase_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'UMG_VoteEntryBase_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'UMG_VoteEntryBase_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_OnMouseButtonDown, ReturnValue) == 0x0000A8, "Member 'UMG_VoteEntryBase_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000160, "Member 'UMG_VoteEntryBase_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteEntryBase_C_OnMouseButtonDown, CallFunc_SubmitVote_OutVotedDisplayStatus) == 0x000218, "Member 'UMG_VoteEntryBase_C_OnMouseButtonDown::CallFunc_SubmitVote_OutVotedDisplayStatus' has a wrong offset!");

}

