#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Shockwave

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Shockwave.BP_Shockwave_C
// 0x0028 (0x0250 - 0x0228)
class ABP_Shockwave_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        ShockwaveRoot;                                     // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        Emitter_Being_Played;                              // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         VerticalSteps;                                     // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HorizontalSteps;                                   // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 EffectsClass;                                      // 0x0248(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Shockwave(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Explode(class AActor* Param_Instigator);
	void ConvertStepsToLoops(int32 Steps, int32* PositiveInt, int32* NegativeInt);
	void SpawnEmitterAtTraceIntersect(const struct FVector& StartTrace, const struct FVector& EndTrace, class AActor* Param_Instigator);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Shockwave_C">();
	}
	static class ABP_Shockwave_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Shockwave_C>();
	}
};
static_assert(alignof(ABP_Shockwave_C) == 0x000008, "Wrong alignment on ABP_Shockwave_C");
static_assert(sizeof(ABP_Shockwave_C) == 0x000250, "Wrong size on ABP_Shockwave_C");
static_assert(offsetof(ABP_Shockwave_C, UberGraphFrame) == 0x000228, "Member 'ABP_Shockwave_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Shockwave_C, ShockwaveRoot) == 0x000230, "Member 'ABP_Shockwave_C::ShockwaveRoot' has a wrong offset!");
static_assert(offsetof(ABP_Shockwave_C, Emitter_Being_Played) == 0x000238, "Member 'ABP_Shockwave_C::Emitter_Being_Played' has a wrong offset!");
static_assert(offsetof(ABP_Shockwave_C, VerticalSteps) == 0x000240, "Member 'ABP_Shockwave_C::VerticalSteps' has a wrong offset!");
static_assert(offsetof(ABP_Shockwave_C, HorizontalSteps) == 0x000244, "Member 'ABP_Shockwave_C::HorizontalSteps' has a wrong offset!");
static_assert(offsetof(ABP_Shockwave_C, EffectsClass) == 0x000248, "Member 'ABP_Shockwave_C::EffectsClass' has a wrong offset!");

}

