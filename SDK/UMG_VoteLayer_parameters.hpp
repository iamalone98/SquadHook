#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_VoteLayer

#include "Basic.hpp"

#include "SQLayerEntry_structs.hpp"
#include "SQLevelEntry_structs.hpp"
#include "Squad_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UMG_VoteLayer.UMG_VoteLayer_C.LayerInfoRequested__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct UMG_VoteLayer_C_LayerInfoRequested__DelegateSignature final
{
public:
	class FName                                   LayerID;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteLayer_C_LayerInfoRequested__DelegateSignature) == 0x000004, "Wrong alignment on UMG_VoteLayer_C_LayerInfoRequested__DelegateSignature");
static_assert(sizeof(UMG_VoteLayer_C_LayerInfoRequested__DelegateSignature) == 0x000008, "Wrong size on UMG_VoteLayer_C_LayerInfoRequested__DelegateSignature");
static_assert(offsetof(UMG_VoteLayer_C_LayerInfoRequested__DelegateSignature, LayerID) == 0x000000, "Member 'UMG_VoteLayer_C_LayerInfoRequested__DelegateSignature::LayerID' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.ExecuteUbergraph_UMG_VoteLayer
// 0x0080 (0x0080 - 0x0000)
struct UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_ChoiceID;                             // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41BC[0x2];                                     // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession_2;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_VotePossible;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41BD[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession_1;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerCurrentVoteCount;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41BE[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              K2Node_Event_Winner;                               // 0x0038(0x0018)(NoDestructor)
	bool                                          K2Node_Event_Activated;                            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41BF[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_TeamName;                       // 0x0058(0x0018)()
	class FName                                   K2Node_CustomEvent_PlayerName;                     // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer) == 0x000008, "Wrong alignment on UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer");
static_assert(sizeof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer) == 0x000080, "Wrong size on UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, EntryPoint) == 0x000000, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::EntryPoint' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_Event_ChoiceID) == 0x000004, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_Event_ChoiceID' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, Temp_byte_Variable) == 0x00000C, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, Temp_byte_Variable_1) == 0x00000D, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_Event_VoteSession_2) == 0x000010, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_Event_VoteSession_2' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_Event_VotePossible) == 0x000018, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_Event_VotePossible' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_Event_VoteSession_1) == 0x000020, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_Event_VoteSession_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_Event_PlayerCurrentVoteCount) == 0x000028, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_Event_PlayerCurrentVoteCount' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_Event_VoteSession) == 0x000030, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_Event_VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_Event_Winner) == 0x000038, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_Event_Winner' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_Event_Activated) == 0x000050, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_Event_Activated' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_CustomEvent_TeamName) == 0x000058, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_CustomEvent_TeamName' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_CustomEvent_PlayerName) == 0x000070, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_CustomEvent_PlayerName' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, Temp_bool_Variable) == 0x000078, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer, K2Node_Select_Default) == 0x000079, "Member 'UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer::K2Node_Select_Default' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.OnVoteUpdatedByID
// 0x0008 (0x0008 - 0x0000)
struct UMG_VoteLayer_C_OnVoteUpdatedByID final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteLayer_C_OnVoteUpdatedByID) == 0x000004, "Wrong alignment on UMG_VoteLayer_C_OnVoteUpdatedByID");
static_assert(sizeof(UMG_VoteLayer_C_OnVoteUpdatedByID) == 0x000008, "Wrong size on UMG_VoteLayer_C_OnVoteUpdatedByID");
static_assert(offsetof(UMG_VoteLayer_C_OnVoteUpdatedByID, ChoiceId) == 0x000000, "Member 'UMG_VoteLayer_C_OnVoteUpdatedByID::ChoiceId' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.OnSetup
// 0x0020 (0x0020 - 0x0000)
struct UMG_VoteLayer_C_OnSetup final
{
public:
	class FText                                   TeamName;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FName                                   Param_PlayerName;                                  // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteLayer_C_OnSetup) == 0x000008, "Wrong alignment on UMG_VoteLayer_C_OnSetup");
static_assert(sizeof(UMG_VoteLayer_C_OnSetup) == 0x000020, "Wrong size on UMG_VoteLayer_C_OnSetup");
static_assert(offsetof(UMG_VoteLayer_C_OnSetup, TeamName) == 0x000000, "Member 'UMG_VoteLayer_C_OnSetup::TeamName' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_OnSetup, Param_PlayerName) == 0x000018, "Member 'UMG_VoteLayer_C_OnSetup::Param_PlayerName' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.SetVoteScreenActive
// 0x0001 (0x0001 - 0x0000)
struct UMG_VoteLayer_C_SetVoteScreenActive final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteLayer_C_SetVoteScreenActive) == 0x000001, "Wrong alignment on UMG_VoteLayer_C_SetVoteScreenActive");
static_assert(sizeof(UMG_VoteLayer_C_SetVoteScreenActive) == 0x000001, "Wrong size on UMG_VoteLayer_C_SetVoteScreenActive");
static_assert(offsetof(UMG_VoteLayer_C_SetVoteScreenActive, Activated) == 0x000000, "Member 'UMG_VoteLayer_C_SetVoteScreenActive::Activated' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.OnVoteEnded
// 0x0020 (0x0020 - 0x0000)
struct UMG_VoteLayer_C_OnVoteEnded final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(UMG_VoteLayer_C_OnVoteEnded) == 0x000008, "Wrong alignment on UMG_VoteLayer_C_OnVoteEnded");
static_assert(sizeof(UMG_VoteLayer_C_OnVoteEnded) == 0x000020, "Wrong size on UMG_VoteLayer_C_OnVoteEnded");
static_assert(offsetof(UMG_VoteLayer_C_OnVoteEnded, VoteSession) == 0x000000, "Member 'UMG_VoteLayer_C_OnVoteEnded::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_OnVoteEnded, Winner) == 0x000008, "Member 'UMG_VoteLayer_C_OnVoteEnded::Winner' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.OnVoteUpdated
// 0x0010 (0x0010 - 0x0000)
struct UMG_VoteLayer_C_OnVoteUpdated final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerCurrentVoteCount;                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteLayer_C_OnVoteUpdated) == 0x000008, "Wrong alignment on UMG_VoteLayer_C_OnVoteUpdated");
static_assert(sizeof(UMG_VoteLayer_C_OnVoteUpdated) == 0x000010, "Wrong size on UMG_VoteLayer_C_OnVoteUpdated");
static_assert(offsetof(UMG_VoteLayer_C_OnVoteUpdated, VoteSession) == 0x000000, "Member 'UMG_VoteLayer_C_OnVoteUpdated::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_OnVoteUpdated, PlayerCurrentVoteCount) == 0x000008, "Member 'UMG_VoteLayer_C_OnVoteUpdated::PlayerCurrentVoteCount' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.OnVoteStarted
// 0x0010 (0x0010 - 0x0000)
struct UMG_VoteLayer_C_OnVoteStarted final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VotePossible;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteLayer_C_OnVoteStarted) == 0x000008, "Wrong alignment on UMG_VoteLayer_C_OnVoteStarted");
static_assert(sizeof(UMG_VoteLayer_C_OnVoteStarted) == 0x000010, "Wrong size on UMG_VoteLayer_C_OnVoteStarted");
static_assert(offsetof(UMG_VoteLayer_C_OnVoteStarted, VoteSession) == 0x000000, "Member 'UMG_VoteLayer_C_OnVoteStarted::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_OnVoteStarted, VotePossible) == 0x000008, "Member 'UMG_VoteLayer_C_OnVoteStarted::VotePossible' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.Generate Items
// 0x0110 (0x0110 - 0x0000)
struct UMG_VoteLayer_C_Generate_Items final
{
public:
	class USQVoteSessionClient*                   Vote_Session;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisplayVoteCount;                                  // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C0[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize;                  // 0x000C(0x0008)(NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName ChoiceId)>         K2Node_CreateDelegate_OutputDelegate;              // 0x0020(0x0010)(ZeroConstructor, NoDestructor)
	class ASQGameState*                           CallFunc_GetSquadGameState_Return_Value;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName Choice)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_VoteItem_C*                        CallFunc_Create_ReturnValue;                       // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              CallFunc_Array_Get_Item;                           // 0x0070(0x0018)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C1[0x2];                                     // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USQGameInstance*                        CallFunc_GetSquadGameInstance_ReturnValue;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQLayer*                               CallFunc_DetermineLayerFromName_OutLayer;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DetermineLayerFromName_ReturnValue;       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C2[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SQLayer_C*                          K2Node_DynamicCast_AsBP_SQLayer;                   // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C3[0x7];                                     // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetLayerInfo_DisplayName;                 // 0x00B8(0x0018)()
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetLayerInfo_Thumbnail;                   // 0x00D0(0x0028)(HasGetValueTypeHash)
	class FText                                   CallFunc_GetGameModeVersion_GMVer;                 // 0x00F8(0x0018)()
};
static_assert(alignof(UMG_VoteLayer_C_Generate_Items) == 0x000008, "Wrong alignment on UMG_VoteLayer_C_Generate_Items");
static_assert(sizeof(UMG_VoteLayer_C_Generate_Items) == 0x000110, "Wrong size on UMG_VoteLayer_C_Generate_Items");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, Vote_Session) == 0x000000, "Member 'UMG_VoteLayer_C_Generate_Items::Vote_Session' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, DisplayVoteCount) == 0x000008, "Member 'UMG_VoteLayer_C_Generate_Items::DisplayVoteCount' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, K2Node_MakeStruct_SlateChildSize) == 0x00000C, "Member 'UMG_VoteLayer_C_Generate_Items::K2Node_MakeStruct_SlateChildSize' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, Temp_int_Array_Index_Variable) == 0x000014, "Member 'UMG_VoteLayer_C_Generate_Items::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_Divide_IntInt_ReturnValue) == 0x000018, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_Clamp_ReturnValue) == 0x00001C, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, K2Node_CreateDelegate_OutputDelegate) == 0x000020, "Member 'UMG_VoteLayer_C_Generate_Items::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_GetSquadGameState_Return_Value) == 0x000030, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_GetSquadGameState_Return_Value' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, K2Node_CreateDelegate_OutputDelegate_1) == 0x000038, "Member 'UMG_VoteLayer_C_Generate_Items::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'UMG_VoteLayer_C_Generate_Items::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_Create_ReturnValue) == 0x000050, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, Temp_int_Variable) == 0x00005C, "Member 'UMG_VoteLayer_C_Generate_Items::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, K2Node_Select_Default) == 0x000060, "Member 'UMG_VoteLayer_C_Generate_Items::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x000068, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_Array_Get_Item) == 0x000070, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_Array_Length_ReturnValue) == 0x000088, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_Less_IntInt_ReturnValue) == 0x00008C, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_IsValid_ReturnValue) == 0x00008D, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_GetSquadGameInstance_ReturnValue) == 0x000090, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_GetSquadGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_DetermineLayerFromName_OutLayer) == 0x000098, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_DetermineLayerFromName_OutLayer' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_DetermineLayerFromName_ReturnValue) == 0x0000A0, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_DetermineLayerFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, K2Node_DynamicCast_AsBP_SQLayer) == 0x0000A8, "Member 'UMG_VoteLayer_C_Generate_Items::K2Node_DynamicCast_AsBP_SQLayer' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'UMG_VoteLayer_C_Generate_Items::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_GetLayerInfo_DisplayName) == 0x0000B8, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_GetLayerInfo_DisplayName' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_GetLayerInfo_Thumbnail) == 0x0000D0, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_GetLayerInfo_Thumbnail' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Generate_Items, CallFunc_GetGameModeVersion_GMVer) == 0x0000F8, "Member 'UMG_VoteLayer_C_Generate_Items::CallFunc_GetGameModeVersion_GMVer' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.Update Choices
// 0x0030 (0x0030 - 0x0000)
struct UMG_VoteLayer_C_Update_Choices final
{
public:
	class USQVoteSessionClient*                   Vote_Session;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Player_Current_Vote_Count;                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C4[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMG_VoteItem_C*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteLayer_C_Update_Choices) == 0x000008, "Wrong alignment on UMG_VoteLayer_C_Update_Choices");
static_assert(sizeof(UMG_VoteLayer_C_Update_Choices) == 0x000030, "Wrong size on UMG_VoteLayer_C_Update_Choices");
static_assert(offsetof(UMG_VoteLayer_C_Update_Choices, Vote_Session) == 0x000000, "Member 'UMG_VoteLayer_C_Update_Choices::Vote_Session' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Update_Choices, Player_Current_Vote_Count) == 0x000008, "Member 'UMG_VoteLayer_C_Update_Choices::Player_Current_Vote_Count' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Update_Choices, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'UMG_VoteLayer_C_Update_Choices::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Update_Choices, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'UMG_VoteLayer_C_Update_Choices::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Update_Choices, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'UMG_VoteLayer_C_Update_Choices::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Update_Choices, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'UMG_VoteLayer_C_Update_Choices::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Update_Choices, CallFunc_Array_Get_Item) == 0x000020, "Member 'UMG_VoteLayer_C_Update_Choices::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Update_Choices, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'UMG_VoteLayer_C_Update_Choices::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.Display Result
// 0x0020 (0x0020 - 0x0000)
struct UMG_VoteLayer_C_Display_Result final
{
public:
	class USQVoteSession*                         VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              SQChoice;                                          // 0x0008(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
};
static_assert(alignof(UMG_VoteLayer_C_Display_Result) == 0x000008, "Wrong alignment on UMG_VoteLayer_C_Display_Result");
static_assert(sizeof(UMG_VoteLayer_C_Display_Result) == 0x000020, "Wrong size on UMG_VoteLayer_C_Display_Result");
static_assert(offsetof(UMG_VoteLayer_C_Display_Result, VoteSession) == 0x000000, "Member 'UMG_VoteLayer_C_Display_Result::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_Display_Result, SQChoice) == 0x000008, "Member 'UMG_VoteLayer_C_Display_Result::SQChoice' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.OnChoiceSelected
// 0x0008 (0x0008 - 0x0000)
struct UMG_VoteLayer_C_OnChoiceSelected final
{
public:
	class FName                                   Choice;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteLayer_C_OnChoiceSelected) == 0x000004, "Wrong alignment on UMG_VoteLayer_C_OnChoiceSelected");
static_assert(sizeof(UMG_VoteLayer_C_OnChoiceSelected) == 0x000008, "Wrong size on UMG_VoteLayer_C_OnChoiceSelected");
static_assert(offsetof(UMG_VoteLayer_C_OnChoiceSelected, Choice) == 0x000000, "Member 'UMG_VoteLayer_C_OnChoiceSelected::Choice' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.UpdateChoiceByID
// 0x0028 (0x0028 - 0x0000)
struct UMG_VoteLayer_C_UpdateChoiceByID final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_VoteItem_C*                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteLayer_C_UpdateChoiceByID) == 0x000008, "Wrong alignment on UMG_VoteLayer_C_UpdateChoiceByID");
static_assert(sizeof(UMG_VoteLayer_C_UpdateChoiceByID) == 0x000028, "Wrong size on UMG_VoteLayer_C_UpdateChoiceByID");
static_assert(offsetof(UMG_VoteLayer_C_UpdateChoiceByID, ChoiceId) == 0x000000, "Member 'UMG_VoteLayer_C_UpdateChoiceByID::ChoiceId' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_UpdateChoiceByID, Temp_int_Array_Index_Variable) == 0x000008, "Member 'UMG_VoteLayer_C_UpdateChoiceByID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_UpdateChoiceByID, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'UMG_VoteLayer_C_UpdateChoiceByID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_UpdateChoiceByID, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'UMG_VoteLayer_C_UpdateChoiceByID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_UpdateChoiceByID, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'UMG_VoteLayer_C_UpdateChoiceByID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_UpdateChoiceByID, CallFunc_Array_Get_Item) == 0x000018, "Member 'UMG_VoteLayer_C_UpdateChoiceByID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_UpdateChoiceByID, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'UMG_VoteLayer_C_UpdateChoiceByID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_UpdateChoiceByID, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000021, "Member 'UMG_VoteLayer_C_UpdateChoiceByID::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.OnInfoSelected
// 0x0008 (0x0008 - 0x0000)
struct UMG_VoteLayer_C_OnInfoSelected final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteLayer_C_OnInfoSelected) == 0x000004, "Wrong alignment on UMG_VoteLayer_C_OnInfoSelected");
static_assert(sizeof(UMG_VoteLayer_C_OnInfoSelected) == 0x000008, "Wrong size on UMG_VoteLayer_C_OnInfoSelected");
static_assert(offsetof(UMG_VoteLayer_C_OnInfoSelected, ChoiceId) == 0x000000, "Member 'UMG_VoteLayer_C_OnInfoSelected::ChoiceId' has a wrong offset!");

// Function UMG_VoteLayer.UMG_VoteLayer_C.GetLayerInfo
// 0x0210 (0x0210 - 0x0000)
struct UMG_VoteLayer_C_GetLayerInfo final
{
public:
	class UBP_SQLayer_C*                          InLayer;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DisplayName;                                       // 0x0008(0x0018)(Parm, OutParm)
	TSoftObjectPtr<class UTexture2D>              Thumbnail;                                         // 0x0020(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          CallFunc_TryGetLevelEntry_Success;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C5[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQLevelEntry                          CallFunc_TryGetLevelEntry_LevelEntry;              // 0x0050(0x0138)(HasGetValueTypeHash)
	struct FSQLayerEntry                          CallFunc_GetDataTableRowFromName_OutRow;           // 0x0188(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41C6[0x7];                                     // 0x01A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetGameModeVersion_GMVer;                 // 0x01B8(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindSubstring_ReturnValue;                // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41C7[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Left_ReturnValue;                         // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x01F8(0x0018)()
};
static_assert(alignof(UMG_VoteLayer_C_GetLayerInfo) == 0x000008, "Wrong alignment on UMG_VoteLayer_C_GetLayerInfo");
static_assert(sizeof(UMG_VoteLayer_C_GetLayerInfo) == 0x000210, "Wrong size on UMG_VoteLayer_C_GetLayerInfo");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, InLayer) == 0x000000, "Member 'UMG_VoteLayer_C_GetLayerInfo::InLayer' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, DisplayName) == 0x000008, "Member 'UMG_VoteLayer_C_GetLayerInfo::DisplayName' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, Thumbnail) == 0x000020, "Member 'UMG_VoteLayer_C_GetLayerInfo::Thumbnail' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, CallFunc_TryGetLevelEntry_Success) == 0x000048, "Member 'UMG_VoteLayer_C_GetLayerInfo::CallFunc_TryGetLevelEntry_Success' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, CallFunc_TryGetLevelEntry_LevelEntry) == 0x000050, "Member 'UMG_VoteLayer_C_GetLayerInfo::CallFunc_TryGetLevelEntry_LevelEntry' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, CallFunc_GetDataTableRowFromName_OutRow) == 0x000188, "Member 'UMG_VoteLayer_C_GetLayerInfo::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0001A0, "Member 'UMG_VoteLayer_C_GetLayerInfo::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, CallFunc_Conv_TextToString_ReturnValue) == 0x0001A8, "Member 'UMG_VoteLayer_C_GetLayerInfo::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, CallFunc_GetGameModeVersion_GMVer) == 0x0001B8, "Member 'UMG_VoteLayer_C_GetLayerInfo::CallFunc_GetGameModeVersion_GMVer' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, CallFunc_Conv_TextToString_ReturnValue_1) == 0x0001D0, "Member 'UMG_VoteLayer_C_GetLayerInfo::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, CallFunc_FindSubstring_ReturnValue) == 0x0001E0, "Member 'UMG_VoteLayer_C_GetLayerInfo::CallFunc_FindSubstring_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, CallFunc_Left_ReturnValue) == 0x0001E8, "Member 'UMG_VoteLayer_C_GetLayerInfo::CallFunc_Left_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteLayer_C_GetLayerInfo, CallFunc_Conv_StringToText_ReturnValue) == 0x0001F8, "Member 'UMG_VoteLayer_C_GetLayerInfo::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

}

