#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GamepadUMGPlugin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class GamepadUMGPlugin.GamepadCursorSettings
// 0x00C0 (0x00F8 - 0x0038)
class UGamepadCursorSettings final : public UDeveloperSettings
{
public:
	struct FRuntimeFloatCurve                     AnalogCursorAccelerationCurve;                     // 0x0038(0x0088)(Edit, Config, NativeAccessSpecifierPrivate)
	float                                         MaxAnalogCursorSpeed;                              // 0x00C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxAnalogCursorSpeedWhenHovered;                   // 0x00C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorDragCoefficient;                       // 0x00C8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorDragCoefficientWhenHovered;            // 0x00CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinAnalogCursorSpeed;                              // 0x00D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorDeadZone;                              // 0x00D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorAccelerationMultiplier;                // 0x00D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnalogCursorSize;                                  // 0x00DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseEngineAnalogCursor;                            // 0x00E0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAnalogCursorNoAcceleration;                       // 0x00E1(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_23E9[0x16];                                    // 0x00E2(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GamepadCursorSettings">();
	}
	static class UGamepadCursorSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGamepadCursorSettings>();
	}
};
static_assert(alignof(UGamepadCursorSettings) == 0x000008, "Wrong alignment on UGamepadCursorSettings");
static_assert(sizeof(UGamepadCursorSettings) == 0x0000F8, "Wrong size on UGamepadCursorSettings");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorAccelerationCurve) == 0x000038, "Member 'UGamepadCursorSettings::AnalogCursorAccelerationCurve' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, MaxAnalogCursorSpeed) == 0x0000C0, "Member 'UGamepadCursorSettings::MaxAnalogCursorSpeed' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, MaxAnalogCursorSpeedWhenHovered) == 0x0000C4, "Member 'UGamepadCursorSettings::MaxAnalogCursorSpeedWhenHovered' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorDragCoefficient) == 0x0000C8, "Member 'UGamepadCursorSettings::AnalogCursorDragCoefficient' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorDragCoefficientWhenHovered) == 0x0000CC, "Member 'UGamepadCursorSettings::AnalogCursorDragCoefficientWhenHovered' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, MinAnalogCursorSpeed) == 0x0000D0, "Member 'UGamepadCursorSettings::MinAnalogCursorSpeed' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorDeadZone) == 0x0000D4, "Member 'UGamepadCursorSettings::AnalogCursorDeadZone' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorAccelerationMultiplier) == 0x0000D8, "Member 'UGamepadCursorSettings::AnalogCursorAccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, AnalogCursorSize) == 0x0000DC, "Member 'UGamepadCursorSettings::AnalogCursorSize' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, bUseEngineAnalogCursor) == 0x0000E0, "Member 'UGamepadCursorSettings::bUseEngineAnalogCursor' has a wrong offset!");
static_assert(offsetof(UGamepadCursorSettings, bAnalogCursorNoAcceleration) == 0x0000E1, "Member 'UGamepadCursorSettings::bAnalogCursorNoAcceleration' has a wrong offset!");

// Class GamepadUMGPlugin.VirtualCursorFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UVirtualCursorFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DisableVirtualCursor(class APlayerController* PC);
	static void EnableVirtualCursor(class APlayerController* PC);
	static bool IsCursorOverInteractableWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualCursorFunctionLibrary">();
	}
	static class UVirtualCursorFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualCursorFunctionLibrary>();
	}
};
static_assert(alignof(UVirtualCursorFunctionLibrary) == 0x000008, "Wrong alignment on UVirtualCursorFunctionLibrary");
static_assert(sizeof(UVirtualCursorFunctionLibrary) == 0x000028, "Wrong size on UVirtualCursorFunctionLibrary");

}

