#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Ocean

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SQWater_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Ocean.BP_Ocean_C
// 0x0070 (0x0338 - 0x02C8)
class ABP_Ocean_C : public ASQOcean
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_DrawWaterIntensityVolume_C*         DrawWaterIntensityVolume;                          // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_WakeSimComponent_C*                 WakeSim;                                           // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  WaterLine;                                         // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FFT_Height_Tex;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FFT_Normal_Tex;                                    // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wave_Normal_Intensity;                             // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Pause_Ocean;                                       // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B49[0x3];                                     // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Surface_MID;                                       // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               WaterLine_MID;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Disable_Underwater_PostProcess;                    // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B4A[0x7];                                     // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     SurfaceMaterial;                                   // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     UnderwaterMaterial;                                // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         GPU_Sample_Iterations;                             // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOD_Distance;                                      // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LOD_Normal_Multiplier;                             // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Ocean(int32 EntryPoint);
	void UpdateMaskPosSize();
	void Update_Ocean_Mask();
	void OnPackedDataUpdated(class UTextureRenderTarget2D* InPackedData);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void Init();
	void OnSettingsChanged(const class USQGameUserSettings* UserSettings);
	void Rebase(const struct FVector& OriginLocation);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Set_MPC_Variables();
	void GetMaterialFromModes();
	void Set_MIDs(class UMaterialInterface* OceanSurface, class UMaterialInterface* Param_WaterLine);
	void SetFFTs(class UMaterialInstanceDynamic* Target, bool SetupNormal);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Ocean_C">();
	}
	static class ABP_Ocean_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Ocean_C>();
	}
};
static_assert(alignof(ABP_Ocean_C) == 0x000008, "Wrong alignment on ABP_Ocean_C");
static_assert(sizeof(ABP_Ocean_C) == 0x000338, "Wrong size on ABP_Ocean_C");
static_assert(offsetof(ABP_Ocean_C, UberGraphFrame) == 0x0002C8, "Member 'ABP_Ocean_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, DrawWaterIntensityVolume) == 0x0002D0, "Member 'ABP_Ocean_C::DrawWaterIntensityVolume' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, WakeSim) == 0x0002D8, "Member 'ABP_Ocean_C::WakeSim' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, WaterLine) == 0x0002E0, "Member 'ABP_Ocean_C::WaterLine' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, FFT_Height_Tex) == 0x0002E8, "Member 'ABP_Ocean_C::FFT_Height_Tex' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, FFT_Normal_Tex) == 0x0002F0, "Member 'ABP_Ocean_C::FFT_Normal_Tex' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, Wave_Normal_Intensity) == 0x0002F8, "Member 'ABP_Ocean_C::Wave_Normal_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, Pause_Ocean) == 0x0002FC, "Member 'ABP_Ocean_C::Pause_Ocean' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, Surface_MID) == 0x000300, "Member 'ABP_Ocean_C::Surface_MID' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, WaterLine_MID) == 0x000308, "Member 'ABP_Ocean_C::WaterLine_MID' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, Disable_Underwater_PostProcess) == 0x000310, "Member 'ABP_Ocean_C::Disable_Underwater_PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, SurfaceMaterial) == 0x000318, "Member 'ABP_Ocean_C::SurfaceMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, UnderwaterMaterial) == 0x000320, "Member 'ABP_Ocean_C::UnderwaterMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, GPU_Sample_Iterations) == 0x000328, "Member 'ABP_Ocean_C::GPU_Sample_Iterations' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, LOD_Distance) == 0x00032C, "Member 'ABP_Ocean_C::LOD_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Ocean_C, LOD_Normal_Multiplier) == 0x000330, "Member 'ABP_Ocean_C::LOD_Normal_Multiplier' has a wrong offset!");

}

