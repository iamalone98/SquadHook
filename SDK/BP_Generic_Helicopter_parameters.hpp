#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Generic_Helicopter

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Squad_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.ExecuteUbergraph_BP_Generic_Helicopter
// 0x0D58 (0x0D58 - 0x0000)
struct BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue;       // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue_1;     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanLand_CanLand_;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsLanded_;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371E[0x1];                                     // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
	float                                         K2Node_CustomEvent_AxisInput;                      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_NewIsLandedState;               // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371F[0x2];                                     // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_AxisValue_2;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3720[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_1;          // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3721[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3722[0x1];                                     // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AxisValue_1;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3723[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3724[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue_4;             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_2;        // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_2;          // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3725[0x2];                                     // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_9;                     // 0x0090(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_3;          // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue;           // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_InRange_FloatFloat_ReturnValue_1;         // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_4;          // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_5;          // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3726[0x1];                                     // 0x00B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AxisValue;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_5;             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRollNormalized_NewParam;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_6;             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3727[0x3];                                     // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3728[0x3];                                     // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_1;        // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3729[0x2];                                     // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_3;        // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_3;               // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372A[0x5];                                     // 0x00EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_8;                     // 0x00F0(0x0018)(HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372B[0x1];                                     // 0x010F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue_14;                // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_13;                // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_12;                // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_11;                // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPhysicsEnabled_ReturnValue;             // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsUsingFreeLook_ReturnValue;           // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372C[0x2];                                     // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsUsingFreeLook_ReturnValue_1;         // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372D[0x7];                                     // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue;     // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_7;                     // 0x0138(0x0018)(HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_372E[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue_1;   // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHealthy_ReturnValue;                    // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPhysicsEnabled_ReturnValue_1;           // 0x0166(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372F[0x1];                                     // 0x0167(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetThrustPower_Thrust;                    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_3;            // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3730[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_7;             // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable;                              // 0x0180(0x0018)(HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_2;                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_8;             // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_13;       // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_14;       // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_15;       // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_9;             // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_2;    // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x01E5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x01E6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x01E7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3731[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_5;        // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_DeltaTimeRatio;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_16;       // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_17;       // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_18;       // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_19;       // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue_6;          // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3732[0x7];                                     // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key_6;                     // 0x0210(0x0018)(HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_10;                // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_3;    // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x022D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3733[0x2];                                     // 0x022E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue_9;                 // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_8;                 // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_7;                 // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPhysicsEnabled_ReturnValue_2;           // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_4;        // 0x023D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_5;        // 0x023E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPhysicsEnabled_ReturnValue_3;           // 0x023F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0240(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x0241(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_2;     // 0x0242(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue_4;               // 0x0243(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3734[0x4];                                     // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue_2;   // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_5;                     // 0x0250(0x0018)(HasGetValueTypeHash)
	struct FSQJoyStickConfig                      CallFunc_GetJoyConfig_ReturnValue;                 // 0x0268(0x0010)(ConstParm, NoDestructor)
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue_3;   // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CurveType_Out;                            // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQJoyStickConfig                      CallFunc_GetJoyConfig_ReturnValue_1;               // 0x0284(0x0010)(ConstParm, NoDestructor)
	float                                         CallFunc_CurveType_Out_1;                          // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_1;                            // 0x0298(0x0018)(HasGetValueTypeHash)
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue_4;   // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQJoyStickConfig                      CallFunc_GetJoyConfig_ReturnValue_2;               // 0x02B8(0x0010)(ConstParm, NoDestructor)
	float                                         CallFunc_CurveType_Out_2;                          // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3735[0x4];                                     // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue_5;   // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue_6;   // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_6;                 // 0x02E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_5;                 // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_4;                 // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_3;                 // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x02F4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_2;        // 0x02FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x02FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x02FE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x02FF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue_3;                        // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_4;                        // 0x0304(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0308(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3736[0x3];                                     // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_5;                        // 0x030C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_6;                        // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_7;                        // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_4;    // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3737[0x2];                                     // 0x031A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_8;                        // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_5;    // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0321(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0322(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0323(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3738[0x4];                                     // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller;         // 0x0328(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3739[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller_1;       // 0x0338(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0341(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_373A[0x6];                                     // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller_2;       // 0x0348(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_373B[0x7];                                     // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller_3;       // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0361(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0362(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_373C[0x1];                                     // 0x0363(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_373D[0x3];                                     // 0x0369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_20;       // 0x036C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller_4;       // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_373E[0x7];                                     // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller_5;       // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x0389(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsUsingFreeLook_ReturnValue_2;         // 0x038A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x038B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_373F[0x4];                                     // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller_6;       // 0x0390(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0398(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3740[0x7];                                     // 0x0399(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerController_C*                 K2Node_DynamicCast_AsBP_Player_Controller_7;       // 0x03A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x03A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3741[0x3];                                     // 0x03A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue_2;                 // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_InputAxisEvent_AxisValue_1;                 // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_21;       // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x03B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3742[0x2];                                     // 0x03BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_10;            // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x03CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x03D8(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0460(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0464(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_11;            // 0x046C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_NewController;                        // 0x0470(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0478(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult_1;  // 0x0484(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x050C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3743[0x3];                                     // 0x050D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0510(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_Event_OldController;                        // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IgnoreLandingCheck;             // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3744[0x3];                                     // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_CustomEvent_NewLinearVelocity;              // 0x0524(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_NewAngularVelocity;             // 0x0530(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x053C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_7;                // 0x0540(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x0541(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0542(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue_3;        // 0x0543(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x0544(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x0545(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3745[0x2];                                     // 0x0546(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0548(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0558(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0560(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x0570(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_5;               // 0x057C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3746[0x3];                                     // 0x057D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_22;       // 0x0580(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_23;       // 0x0584(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFreeLookMode                                 Temp_byte_Variable;                                // 0x0588(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3747[0x3];                                     // 0x0589(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x058C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_24;       // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0594(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0598(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_3;                     // 0x05A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFreeLookMode                                 Temp_byte_Variable_1;                              // 0x05A8(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3748[0x3];                                     // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x05AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_2;                      // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x05BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x05C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x05D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x05E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcCustomVelocity_Velocity;              // 0x05F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0604(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanLand_CanLand__1;                       // 0x0605(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_IsTimerActiveHandle_ReturnValue_2;     // 0x0606(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_8;                // 0x0607(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_9;                // 0x0608(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanLand_CanLand__2;                       // 0x0609(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3749[0x2];                                     // 0x060A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGradualRotationIncrement_Roll;         // 0x060C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGradualRotationIncrement_Pitch;        // 0x0610(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFreeLookMode                                 K2Node_Select_Default_1;                           // 0x0614(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_6;               // 0x0615(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_bActive;                        // 0x0616(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_374A[0x1];                                     // 0x0617(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool bActive)>                 K2Node_CreateDelegate_OutputDelegate_3;            // 0x0618(0x0010)(ZeroConstructor, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0628(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_374B[0x4];                                     // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_HitComponent;           // 0x0638(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_2;           // 0x0640(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_2;            // 0x0648(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_ComponentBoundEvent_NormalImpulse;          // 0x0650(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_ComponentBoundEvent_Hit;                    // 0x065C(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FRotator                               CallFunc_GetRotationDiff_NewParam;                 // 0x06E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x06F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_374C[0x3];                                     // 0x06F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_InputAxisEvent_AxisValue;                   // 0x06F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_9;                        // 0x06F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x06FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x06FD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_374D[0x2];                                     // 0x06FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetGroundEffect_Height;                   // 0x0700(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0704(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQSoldier*                             K2Node_Event_Soldier_2;                            // 0x0708(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleSeatComponent*                K2Node_Event_NewSeat_1;                            // 0x0710(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsActive_ReturnValue_1;                   // 0x0718(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_374E[0x7];                                     // 0x0719(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             K2Node_Event_Soldier_1;                            // 0x0720(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleSeatComponent*                K2Node_Event_PreviousSeat_1;                       // 0x0728(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleSeatComponent*                K2Node_Event_NewSeat;                              // 0x0730(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0738(0x0010)(ZeroConstructor, NoDestructor)
	class AWorldSettings*                         CallFunc_GetWorldSettings_ReturnValue;             // 0x0748(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPhysicsEnabled_ReturnValue_4;           // 0x0750(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_374F[0x7];                                     // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQWorldSettings*                       K2Node_DynamicCast_AsSQWorld_Settings;             // 0x0758(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x0760(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Condition;                      // 0x0761(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3750[0x2];                                     // 0x0762(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0764(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQSoldier*                             K2Node_Event_Soldier;                              // 0x0768(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleSeatComponent*                K2Node_Event_PreviousSeat;                         // 0x0770(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue_1;        // 0x0778(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0780(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0788(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x078C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3751[0x4];                                     // 0x079C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_3;        // 0x07A0(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_7;               // 0x07A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3752[0x3];                                     // 0x07A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMainRotorThrust_ReturnValue;           // 0x07AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_6;         // 0x07B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3753[0x3];                                     // 0x07B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_6;            // 0x07B4(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_Event_Active;                               // 0x07C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3754[0x3];                                     // 0x07C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_4;        // 0x07C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             K2Node_CustomEvent_HitResult;                      // 0x07D0(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         K2Node_CustomEvent_TimeSlice;                      // 0x0858(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_CustomEvent_MoveDelta;                      // 0x085C(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(struct FHitResult& HitResult, float TimeSlice, struct FVector& MoveDelta)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x0868(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetThrustPower_Thrust_1;                  // 0x0878(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x087C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_6;        // 0x0880(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_12;            // 0x0884(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_10;                       // 0x0888(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3755[0x4];                                     // 0x088C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0890(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_4;            // 0x08A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_5;            // 0x08A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x08AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_6;            // 0x08AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x08AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x08AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x08AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3756[0x1];                                     // 0x08AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x08B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x08BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x08C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3757[0x3];                                     // 0x08C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x08CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x08D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x08E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x08F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x08FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_25;       // 0x0908(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x090C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_3;                      // 0x0918(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_4;                      // 0x091C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_1;         // 0x0920(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_2;         // 0x0930(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0940(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0950(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0960(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0970(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0980(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0990(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x099C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x09A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x09B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue_1;         // 0x09C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_5;                      // 0x09CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_3;         // 0x09D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x09E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3758[0x4];                                     // 0x09EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x09F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0A00(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0A10(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x0A1C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x0A28(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_4;       // 0x0A34(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_5;           // 0x0A40(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3759[0x4];                                     // 0x0A4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue_4;         // 0x0A50(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0A60(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FKey                                   Temp_struct_Variable_2;                            // 0x0A70(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_1;                     // 0x0A88(0x0018)(HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0AA0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x0AA4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue_7;   // 0x0AA8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0AB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_375A[0x3];                                     // 0x0AB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetNormalizedHealth_ReturnValue;          // 0x0AB4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_26;       // 0x0AB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_27;       // 0x0ABC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_3;       // 0x0AC0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_10;               // 0x0AC1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEngineActive_ReturnValue;               // 0x0AC2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_375B[0x1];                                     // 0x0AC3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_28;       // 0x0AC4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_29;       // 0x0AC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_7;            // 0x0ACC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_375C[0x3];                                     // 0x0ACD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_8;            // 0x0AD0(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_5;        // 0x0AE0(0x0008)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_ReturnValue;                  // 0x0AE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_375D[0x4];                                     // 0x0AEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0AF0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0AF8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0B00(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0B08(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep_1;           // 0x0B0C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_375E[0x3];                                     // 0x0B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult_1;          // 0x0B10(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0B98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue;               // 0x0BA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_375F[0x7];                                     // 0x0BA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0BA8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0BB0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0BB8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0BC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0BC4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3760[0x3];                                     // 0x0BC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0BC8(0x0088)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x0C50(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ClassIsChildOf_ReturnValue_1;             // 0x0C58(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3761[0x3];                                     // 0x0C59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetKnots_Knots;                           // 0x0C5C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetKnots_Knots_1;                         // 0x0C60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_7;         // 0x0C64(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3762[0x3];                                     // 0x0C65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_9;            // 0x0C68(0x0010)(ZeroConstructor, NoDestructor)
	struct FKey                                   K2Node_InputActionEvent_Key_2;                     // 0x0C78(0x0018)(HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_3;    // 0x0C90(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_10;           // 0x0C9C(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_GetWaterDepth_Depth;                      // 0x0CAC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetWaterDepth_ReturnValue;                // 0x0CB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3763[0x3];                                     // 0x0CB1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x0CB4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_30;       // 0x0CB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0CBC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_ApplyDamage_ReturnValue_1;                // 0x0CC0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3764[0x4];                                     // 0x0CC4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Temp_struct_Variable_3;                            // 0x0CC8(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_3;                     // 0x0CE0(0x0018)(HasGetValueTypeHash)
	struct FKey                                   K2Node_InputActionEvent_Key_4;                     // 0x0CF8(0x0018)(HasGetValueTypeHash)
	class ASQPlayerController*                    CallFunc_GetSquadPlayerController_Return_Value;    // 0x0D10(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQSoldier*                             CallFunc_GetSoldier_ReturnValue;                   // 0x0D18(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerController*                    CallFunc_GetSquadPlayerController_Return_Value_1;  // 0x0D20(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0D28(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3765[0x7];                                     // 0x0D29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             CallFunc_GetSoldier_ReturnValue_1;                 // 0x0D30(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0D38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3766[0x7];                                     // 0x0D39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    CallFunc_GetSquadPlayerController_Return_Value_2;  // 0x0D40(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQSoldier*                             CallFunc_GetSoldier_ReturnValue_2;                 // 0x0D48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_8;               // 0x0D50(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0D51(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter");
static_assert(sizeof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter) == 0x000D58, "Wrong size on BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, EntryPoint) == 0x000000, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_IsTimerActiveHandle_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_IsTimerActiveHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_IsTimerActiveHandle_ReturnValue_1) == 0x000006, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_IsTimerActiveHandle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue) == 0x000007, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_CanLand_CanLand_) == 0x000008, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_CanLand_CanLand_' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_IsLanded_) == 0x000009, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_IsLanded_' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue_1) == 0x00000A, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_AxisInput) == 0x00001C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_AxisInput' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000020, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Less_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000029, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x00002A, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue_2) == 0x00002B, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue_3) == 0x00002C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_NewIsLandedState) == 0x00002D, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_NewIsLandedState' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_AxisValue_2) == 0x000038, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsDedicatedServer_ReturnValue) == 0x00003C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue) == 0x000040, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x000044, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsDedicatedServer_ReturnValue_1) == 0x000045, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsDedicatedServer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000048, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakVector_X) == 0x000054, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakVector_Y) == 0x000058, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakVector_Z) == 0x00005C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakRotator_Roll) == 0x000060, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakRotator_Pitch) == 0x000064, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakRotator_Yaw) == 0x000068, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00006D, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x00006E, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_AxisValue_1) == 0x000070, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000074, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000078, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x00007C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000080, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000084, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_4) == 0x000088, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_NotEqual_FloatFloat_ReturnValue_2) == 0x00008C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_NotEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsDedicatedServer_ReturnValue_2) == 0x00008D, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsDedicatedServer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputActionEvent_Key_9) == 0x000090, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputActionEvent_Key_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_HasAuthority_ReturnValue) == 0x0000A8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsLocallyControlled_ReturnValue) == 0x0000A9, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsDedicatedServer_ReturnValue_3) == 0x0000AA, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsDedicatedServer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_InRange_FloatFloat_ReturnValue) == 0x0000AB, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_InRange_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue_4) == 0x0000AC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_1) == 0x0000AD, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanAND_ReturnValue) == 0x0000AE, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_InRange_FloatFloat_ReturnValue_1) == 0x0000AF, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_InRange_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue_5) == 0x0000B0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsDedicatedServer_ReturnValue_4) == 0x0000B1, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsDedicatedServer_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsDedicatedServer_ReturnValue_5) == 0x0000B2, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsDedicatedServer_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_AxisValue) == 0x0000B4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000B8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_5) == 0x0000BC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetRollNormalized_NewParam) == 0x0000C0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetRollNormalized_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_6) == 0x0000C4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x0000C8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue_1) == 0x0000CC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x0000D0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_HasAuthority_ReturnValue_1) == 0x0000D4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0000D8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_FClamp_ReturnValue) == 0x0000DC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsLocallyControlled_ReturnValue_1) == 0x0000E0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsLocallyControlled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanAND_ReturnValue_1) == 0x0000E1, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue_2) == 0x0000E4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_NotEqual_FloatFloat_ReturnValue_3) == 0x0000E8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_NotEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_HasAuthority_ReturnValue_2) == 0x0000E9, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_HasAuthority_ReturnValue_3) == 0x0000EA, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_HasAuthority_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputActionEvent_Key_8) == 0x0000F0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputActionEvent_Key_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, Temp_float_Variable) == 0x000108, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_2) == 0x00010C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_3) == 0x00010D, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_4) == 0x00010E, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_14) == 0x000110, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_14' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_13) == 0x000114, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_13' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_12) == 0x000118, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_12' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_11) == 0x00011C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_11' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsPhysicsEnabled_ReturnValue) == 0x000120, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsPhysicsEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetIsUsingFreeLook_ReturnValue) == 0x000121, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetIsUsingFreeLook_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000124, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetIsUsingFreeLook_ReturnValue_1) == 0x000128, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetIsUsingFreeLook_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadGameUserSettings_ReturnValue) == 0x000130, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputActionEvent_Key_7) == 0x000138, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputActionEvent_Key_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000150, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadGameUserSettings_ReturnValue_1) == 0x000158, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadGameUserSettings_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000160, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_5) == 0x000164, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsHealthy_ReturnValue) == 0x000165, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsHealthy_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsPhysicsEnabled_ReturnValue_1) == 0x000166, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsPhysicsEnabled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetThrustPower_Thrust) == 0x000168, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetThrustPower_Thrust' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x00016C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Less_FloatFloat_ReturnValue_3) == 0x000170, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Less_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x000174, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x000178, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_7) == 0x00017C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, Temp_struct_Variable) == 0x000180, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_FInterpTo_ReturnValue) == 0x000198, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00019C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_FInterpTo_ReturnValue_1) == 0x0001A0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0001A4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0001A8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x0001AC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_FInterpTo_ReturnValue_2) == 0x0001B0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_8) == 0x0001B4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0001B8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Lerp_ReturnValue) == 0x0001BC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Lerp_ReturnValue_1) == 0x0001C0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x0001C4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x0001C8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_13) == 0x0001CC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_14) == 0x0001D0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_15) == 0x0001D4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_9) == 0x0001D8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_FClamp_ReturnValue_1) == 0x0001DC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x0001E0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GreaterEqual_FloatFloat_ReturnValue_2) == 0x0001E4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GreaterEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x0001E5, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanAND_ReturnValue_2) == 0x0001E6, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanAND_ReturnValue_3) == 0x0001E7, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanOR_ReturnValue) == 0x0001E8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Subtract_FloatFloat_ReturnValue_5) == 0x0001EC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Subtract_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_DeltaTimeRatio) == 0x0001F0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_DeltaTimeRatio' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_16) == 0x0001F4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_17) == 0x0001F8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_18) == 0x0001FC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_FClamp_ReturnValue_2) == 0x000200, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_19) == 0x000204, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsDedicatedServer_ReturnValue_6) == 0x000208, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsDedicatedServer_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputActionEvent_Key_6) == 0x000210, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputActionEvent_Key_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_10) == 0x000228, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_10' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GreaterEqual_FloatFloat_ReturnValue_3) == 0x00022C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GreaterEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanAND_ReturnValue_4) == 0x00022D, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_9) == 0x000230, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_8) == 0x000234, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_7) == 0x000238, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsPhysicsEnabled_ReturnValue_2) == 0x00023C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsPhysicsEnabled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_NotEqual_FloatFloat_ReturnValue_4) == 0x00023D, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_NotEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_NotEqual_FloatFloat_ReturnValue_5) == 0x00023E, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_NotEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsPhysicsEnabled_ReturnValue_3) == 0x00023F, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsPhysicsEnabled_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000240, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x000241, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_NearlyEqual_FloatFloat_ReturnValue_2) == 0x000242, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_NearlyEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_HasAuthority_ReturnValue_4) == 0x000243, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_HasAuthority_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadGameUserSettings_ReturnValue_2) == 0x000248, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadGameUserSettings_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputActionEvent_Key_5) == 0x000250, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputActionEvent_Key_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetJoyConfig_ReturnValue) == 0x000268, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetJoyConfig_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadGameUserSettings_ReturnValue_3) == 0x000278, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadGameUserSettings_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_CurveType_Out) == 0x000280, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_CurveType_Out' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetJoyConfig_ReturnValue_1) == 0x000284, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetJoyConfig_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_CurveType_Out_1) == 0x000294, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_CurveType_Out_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, Temp_struct_Variable_1) == 0x000298, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadGameUserSettings_ReturnValue_4) == 0x0002B0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadGameUserSettings_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetJoyConfig_ReturnValue_2) == 0x0002B8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetJoyConfig_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_CurveType_Out_2) == 0x0002C8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_CurveType_Out_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadGameUserSettings_ReturnValue_5) == 0x0002D0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadGameUserSettings_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadGameUserSettings_ReturnValue_6) == 0x0002D8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadGameUserSettings_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_6) == 0x0002E0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, Temp_float_Variable_1) == 0x0002E4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_5) == 0x0002E8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_4) == 0x0002EC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_3) == 0x0002F0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_MakeVector2D_ReturnValue) == 0x0002F4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsLocallyControlled_ReturnValue_2) == 0x0002FC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsLocallyControlled_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_6) == 0x0002FD, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanAND_ReturnValue_5) == 0x0002FE, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_7) == 0x0002FF, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue_3) == 0x000300, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue_4) == 0x000304, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000308, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue_5) == 0x00030C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue_6) == 0x000310, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue_7) == 0x000314, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x000318, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GreaterEqual_FloatFloat_ReturnValue_4) == 0x000319, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GreaterEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue_8) == 0x00031C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GreaterEqual_FloatFloat_ReturnValue_5) == 0x000320, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GreaterEqual_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_8) == 0x000321, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_9) == 0x000322, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_10) == 0x000323, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_AsBP_Player_Controller) == 0x000328, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_AsBP_Player_Controller' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_bSuccess) == 0x000330, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_AsBP_Player_Controller_1) == 0x000338, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_AsBP_Player_Controller_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_bSuccess_1) == 0x000340, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_11) == 0x000341, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_AsBP_Player_Controller_2) == 0x000348, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_AsBP_Player_Controller_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_bSuccess_2) == 0x000350, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_AsBP_Player_Controller_3) == 0x000358, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_AsBP_Player_Controller_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_bSuccess_3) == 0x000360, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, Temp_bool_Variable) == 0x000361, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_12) == 0x000362, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Select_Default) == 0x000364, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_13) == 0x000368, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_20) == 0x00036C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_AsBP_Player_Controller_4) == 0x000370, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_AsBP_Player_Controller_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_bSuccess_4) == 0x000378, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_AsBP_Player_Controller_5) == 0x000380, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_AsBP_Player_Controller_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_bSuccess_5) == 0x000388, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_14) == 0x000389, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetIsUsingFreeLook_ReturnValue_2) == 0x00038A, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetIsUsingFreeLook_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_15) == 0x00038B, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_AsBP_Player_Controller_6) == 0x000390, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_AsBP_Player_Controller_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_bSuccess_6) == 0x000398, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_AsBP_Player_Controller_7) == 0x0003A0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_AsBP_Player_Controller_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_bSuccess_7) == 0x0003A8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_2) == 0x0003AC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue_1) == 0x0003B0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_21) == 0x0003B4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsActive_ReturnValue) == 0x0003B8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanAND_ReturnValue_6) == 0x0003B9, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakRotator_Roll_1) == 0x0003BC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakRotator_Pitch_1) == 0x0003C0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakRotator_Yaw_1) == 0x0003C4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_10) == 0x0003C8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_MakeRotator_ReturnValue) == 0x0003CC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0003D8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakRotator_Roll_2) == 0x000460, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakRotator_Pitch_2) == 0x000464, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BreakRotator_Yaw_2) == 0x000468, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_11) == 0x00046C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_NewController) == 0x000470, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_NewController' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_MakeRotator_ReturnValue_1) == 0x000478, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_SetRelativeRotation_SweepHitResult_1) == 0x000484, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_SetRelativeRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue_6) == 0x00050C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetPlayerController_ReturnValue) == 0x000510, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_OldController) == 0x000518, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_OldController' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_IgnoreLandingCheck) == 0x000520, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_IgnoreLandingCheck' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_NewLinearVelocity) == 0x000524, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_NewLinearVelocity' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_NewAngularVelocity) == 0x000530, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_NewAngularVelocity' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_VSize_ReturnValue) == 0x00053C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue_7) == 0x000540, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x000541, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanOR_ReturnValue_1) == 0x000542, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsLocallyControlled_ReturnValue_3) == 0x000543, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsLocallyControlled_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_16) == 0x000544, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanAND_ReturnValue_7) == 0x000545, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate_1) == 0x000548, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000558, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate_2) == 0x000560, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x000570, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_DeltaSeconds) == 0x000578, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_HasAuthority_ReturnValue_5) == 0x00057C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_HasAuthority_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_22) == 0x000580, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_23) == 0x000584, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, Temp_byte_Variable) == 0x000588, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_VSize_ReturnValue_1) == 0x00058C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_24) == 0x000590, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000594, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Normal_ReturnValue) == 0x000598, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_FClamp_ReturnValue_3) == 0x0005A4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, Temp_byte_Variable_1) == 0x0005A8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0005AC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_VSize_ReturnValue_2) == 0x0005B8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0005BC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Conv_FloatToString_ReturnValue) == 0x0005C8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Concat_StrStr_ReturnValue) == 0x0005D8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0005E8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_CalcCustomVelocity_Velocity) == 0x0005F8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_CalcCustomVelocity_Velocity' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, Temp_bool_Variable_1) == 0x000604, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_CanLand_CanLand__1) == 0x000605, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_CanLand_CanLand__1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_IsTimerActiveHandle_ReturnValue_2) == 0x000606, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_IsTimerActiveHandle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue_8) == 0x000607, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue_9) == 0x000608, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_CanLand_CanLand__2) == 0x000609, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_CanLand_CanLand__2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetGradualRotationIncrement_Roll) == 0x00060C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetGradualRotationIncrement_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetGradualRotationIncrement_Pitch) == 0x000610, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetGradualRotationIncrement_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Select_Default_1) == 0x000614, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_HasAuthority_ReturnValue_6) == 0x000615, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_HasAuthority_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_bActive) == 0x000616, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_bActive' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate_3) == 0x000618, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000628, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_HitComponent) == 0x000638, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_OtherActor_2) == 0x000640, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_OtherActor_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_OtherComp_2) == 0x000648, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_OtherComp_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_NormalImpulse) == 0x000650, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_Hit) == 0x00065C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_Hit' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetRotationDiff_NewParam) == 0x0006E4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetRotationDiff_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanAND_ReturnValue_8) == 0x0006F0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputAxisEvent_AxisValue) == 0x0006F4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputAxisEvent_AxisValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue_9) == 0x0006F8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsValid_ReturnValue_17) == 0x0006FC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x0006FD, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_SetGroundEffect_Height) == 0x000700, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_SetGroundEffect_Height' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000704, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_Soldier_2) == 0x000708, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_Soldier_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_NewSeat_1) == 0x000710, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_NewSeat_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsActive_ReturnValue_1) == 0x000718, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsActive_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_Soldier_1) == 0x000720, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_Soldier_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_PreviousSeat_1) == 0x000728, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_PreviousSeat_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_NewSeat) == 0x000730, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_NewSeat' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate_4) == 0x000738, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetWorldSettings_ReturnValue) == 0x000748, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetWorldSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsPhysicsEnabled_ReturnValue_4) == 0x000750, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsPhysicsEnabled_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_AsSQWorld_Settings) == 0x000758, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_AsSQWorld_Settings' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_DynamicCast_bSuccess_8) == 0x000760, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_Condition) == 0x000761, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_Condition' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000764, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_Soldier) == 0x000768, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_Soldier' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_PreviousSeat) == 0x000770, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_PreviousSeat' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetPlayerController_ReturnValue_1) == 0x000778, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetPlayerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_GetPawn_ReturnValue) == 0x000780, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000788, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate_5) == 0x00078C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_SetTimerDelegate_ReturnValue_3) == 0x0007A0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_SetTimerDelegate_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_HasAuthority_ReturnValue_7) == 0x0007A8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_HasAuthority_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetMainRotorThrust_ReturnValue) == 0x0007AC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetMainRotorThrust_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Greater_FloatFloat_ReturnValue_6) == 0x0007B0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Greater_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate_6) == 0x0007B4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_Event_Active) == 0x0007C4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_Event_Active' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_SetTimerDelegate_ReturnValue_4) == 0x0007C8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_SetTimerDelegate_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_HitResult) == 0x0007D0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_HitResult' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_TimeSlice) == 0x000858, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_TimeSlice' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CustomEvent_MoveDelta) == 0x00085C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CustomEvent_MoveDelta' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate_7) == 0x000868, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetThrustPower_Thrust_1) == 0x000878, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetThrustPower_Thrust_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetTimeSeconds_ReturnValue) == 0x00087C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Subtract_FloatFloat_ReturnValue_6) == 0x000880, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Subtract_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_FloatFloat_ReturnValue_12) == 0x000884, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Abs_ReturnValue_10) == 0x000888, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Abs_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputActionEvent_Key) == 0x000890, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Less_FloatFloat_ReturnValue_4) == 0x0008A8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Less_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Less_FloatFloat_ReturnValue_5) == 0x0008A9, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Less_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanOR_ReturnValue_2) == 0x0008AA, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Less_FloatFloat_ReturnValue_6) == 0x0008AB, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Less_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanOR_ReturnValue_3) == 0x0008AC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x0008AD, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_BooleanOR_ReturnValue_4) == 0x0008AE, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0008B0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_VectorVector_ReturnValue) == 0x0008BC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x0008C8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0008CC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0008D8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0008E4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0008F0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x0008FC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_25) == 0x000908, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_VectorVector_ReturnValue_3) == 0x00090C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_VSize_ReturnValue_3) == 0x000918, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_VSize_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_VSize_ReturnValue_4) == 0x00091C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_VSize_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Conv_FloatToString_ReturnValue_1) == 0x000920, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Conv_FloatToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Conv_FloatToString_ReturnValue_2) == 0x000930, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Conv_FloatToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000940, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000950, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000960, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000970, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000980, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000990, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00099C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Divide_VectorFloat_ReturnValue) == 0x0009A8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x0009B4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Divide_VectorFloat_ReturnValue_1) == 0x0009C0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Divide_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_VSize_ReturnValue_5) == 0x0009CC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_VSize_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Conv_FloatToString_ReturnValue_3) == 0x0009D0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Conv_FloatToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0009E0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0009F0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000A00, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000A10, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x000A1C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_VectorVector_ReturnValue_4) == 0x000A28, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_VectorFloat_ReturnValue_4) == 0x000A34, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_VectorFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Add_VectorVector_ReturnValue_5) == 0x000A40, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Add_VectorVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Conv_FloatToString_ReturnValue_4) == 0x000A50, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Conv_FloatToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000A60, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, Temp_struct_Variable_2) == 0x000A70, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputActionEvent_Key_1) == 0x000A88, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputActionEvent_Key_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000AA0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x000AA4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadGameUserSettings_ReturnValue_7) == 0x000AA8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadGameUserSettings_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000AB0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetNormalizedHealth_ReturnValue) == 0x000AB4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetNormalizedHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_26) == 0x000AB8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_27) == 0x000ABC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_LessEqual_FloatFloat_ReturnValue_3) == 0x000AC0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_LessEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Not_PreBool_ReturnValue_10) == 0x000AC1, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Not_PreBool_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_IsEngineActive_ReturnValue) == 0x000AC2, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_IsEngineActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_28) == 0x000AC4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_29) == 0x000AC8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Less_FloatFloat_ReturnValue_7) == 0x000ACC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Less_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate_8) == 0x000AD0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_SetTimerDelegate_ReturnValue_5) == 0x000AE0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_SetTimerDelegate_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_ApplyDamage_ReturnValue) == 0x000AE8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_ApplyDamage_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000AF0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000AF8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000B00, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000B08, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_bFromSweep_1) == 0x000B0C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_bFromSweep_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_SweepResult_1) == 0x000B10, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_SweepResult_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetObjectClass_ReturnValue) == 0x000B98, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_ClassIsChildOf_ReturnValue) == 0x000BA0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_ClassIsChildOf_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000BA8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_OtherActor) == 0x000BB0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_OtherComp) == 0x000BB8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000BC0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_bFromSweep) == 0x000BC4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_ComponentBoundEvent_SweepResult) == 0x000BC8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetObjectClass_ReturnValue_1) == 0x000C50, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_ClassIsChildOf_ReturnValue_1) == 0x000C58, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_ClassIsChildOf_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetKnots_Knots) == 0x000C5C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetKnots_Knots' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetKnots_Knots_1) == 0x000C60, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetKnots_Knots_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Greater_FloatFloat_ReturnValue_7) == 0x000C64, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Greater_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate_9) == 0x000C68, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputActionEvent_Key_2) == 0x000C78, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputActionEvent_Key_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_K2_GetComponentLocation_ReturnValue_3) == 0x000C90, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_K2_GetComponentLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_CreateDelegate_OutputDelegate_10) == 0x000C9C, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_CreateDelegate_OutputDelegate_10' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetWaterDepth_Depth) == 0x000CAC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetWaterDepth_Depth' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetWaterDepth_ReturnValue) == 0x000CB0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetWaterDepth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x000CB4, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_Multiply_FloatFloat_ReturnValue_30) == 0x000CB8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_Multiply_FloatFloat_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_FMax_ReturnValue) == 0x000CBC, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_ApplyDamage_ReturnValue_1) == 0x000CC0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_ApplyDamage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, Temp_struct_Variable_3) == 0x000CC8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputActionEvent_Key_3) == 0x000CE0, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputActionEvent_Key_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, K2Node_InputActionEvent_Key_4) == 0x000CF8, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::K2Node_InputActionEvent_Key_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadPlayerController_Return_Value) == 0x000D10, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadPlayerController_Return_Value' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSoldier_ReturnValue) == 0x000D18, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSoldier_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadPlayerController_Return_Value_1) == 0x000D20, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadPlayerController_Return_Value_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000D28, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSoldier_ReturnValue_1) == 0x000D30, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSoldier_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000D38, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSquadPlayerController_Return_Value_2) == 0x000D40, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSquadPlayerController_Return_Value_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_GetSoldier_ReturnValue_2) == 0x000D48, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_GetSoldier_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_HasAuthority_ReturnValue_8) == 0x000D50, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_HasAuthority_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000D51, "Member 'BP_Generic_Helicopter_C_ExecuteUbergraph_BP_Generic_Helicopter::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3767[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Generic_Helicopter_C_BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3768[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature) == 0x0000A8, "Wrong size on BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Generic_Helicopter_C_BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.OnFDMImpact
// 0x0098 (0x0098 - 0x0000)
struct BP_Generic_Helicopter_C_OnFDMImpact final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         TimeSlice;                                         // 0x0088(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveDelta;                                         // 0x008C(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_OnFDMImpact) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_OnFDMImpact");
static_assert(sizeof(BP_Generic_Helicopter_C_OnFDMImpact) == 0x000098, "Wrong size on BP_Generic_Helicopter_C_OnFDMImpact");
static_assert(offsetof(BP_Generic_Helicopter_C_OnFDMImpact, HitResult) == 0x000000, "Member 'BP_Generic_Helicopter_C_OnFDMImpact::HitResult' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_OnFDMImpact, TimeSlice) == 0x000088, "Member 'BP_Generic_Helicopter_C_OnFDMImpact::TimeSlice' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_OnFDMImpact, MoveDelta) == 0x00008C, "Member 'BP_Generic_Helicopter_C_OnFDMImpact::MoveDelta' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.Set Landing Camera
// 0x0001 (0x0001 - 0x0000)
struct BP_Generic_Helicopter_C_Set_Landing_Camera final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_Set_Landing_Camera) == 0x000001, "Wrong alignment on BP_Generic_Helicopter_C_Set_Landing_Camera");
static_assert(sizeof(BP_Generic_Helicopter_C_Set_Landing_Camera) == 0x000001, "Wrong size on BP_Generic_Helicopter_C_Set_Landing_Camera");
static_assert(offsetof(BP_Generic_Helicopter_C_Set_Landing_Camera, Active) == 0x000000, "Member 'BP_Generic_Helicopter_C_Set_Landing_Camera::Active' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.LeftVehicle
// 0x0010 (0x0010 - 0x0000)
struct BP_Generic_Helicopter_C_LeftVehicle final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleSeatComponent*                PreviousSeat;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_LeftVehicle) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_LeftVehicle");
static_assert(sizeof(BP_Generic_Helicopter_C_LeftVehicle) == 0x000010, "Wrong size on BP_Generic_Helicopter_C_LeftVehicle");
static_assert(offsetof(BP_Generic_Helicopter_C_LeftVehicle, Soldier) == 0x000000, "Member 'BP_Generic_Helicopter_C_LeftVehicle::Soldier' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_LeftVehicle, PreviousSeat) == 0x000008, "Member 'BP_Generic_Helicopter_C_LeftVehicle::PreviousSeat' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.Toggle Landing Camera
// 0x0001 (0x0001 - 0x0000)
struct BP_Generic_Helicopter_C_Toggle_Landing_Camera final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_Toggle_Landing_Camera) == 0x000001, "Wrong alignment on BP_Generic_Helicopter_C_Toggle_Landing_Camera");
static_assert(sizeof(BP_Generic_Helicopter_C_Toggle_Landing_Camera) == 0x000001, "Wrong size on BP_Generic_Helicopter_C_Toggle_Landing_Camera");
static_assert(offsetof(BP_Generic_Helicopter_C_Toggle_Landing_Camera, Condition) == 0x000000, "Member 'BP_Generic_Helicopter_C_Toggle_Landing_Camera::Condition' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.SwitchedSeat
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_SwitchedSeat final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleSeatComponent*                PreviousSeat;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleSeatComponent*                NewSeat;                                           // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_SwitchedSeat) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_SwitchedSeat");
static_assert(sizeof(BP_Generic_Helicopter_C_SwitchedSeat) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_SwitchedSeat");
static_assert(offsetof(BP_Generic_Helicopter_C_SwitchedSeat, Soldier) == 0x000000, "Member 'BP_Generic_Helicopter_C_SwitchedSeat::Soldier' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SwitchedSeat, PreviousSeat) == 0x000008, "Member 'BP_Generic_Helicopter_C_SwitchedSeat::PreviousSeat' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SwitchedSeat, NewSeat) == 0x000010, "Member 'BP_Generic_Helicopter_C_SwitchedSeat::NewSeat' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.EnteredVehicle
// 0x0010 (0x0010 - 0x0000)
struct BP_Generic_Helicopter_C_EnteredVehicle final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleSeatComponent*                NewSeat;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_EnteredVehicle) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_EnteredVehicle");
static_assert(sizeof(BP_Generic_Helicopter_C_EnteredVehicle) == 0x000010, "Wrong size on BP_Generic_Helicopter_C_EnteredVehicle");
static_assert(offsetof(BP_Generic_Helicopter_C_EnteredVehicle, Soldier) == 0x000000, "Member 'BP_Generic_Helicopter_C_EnteredVehicle::Soldier' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_EnteredVehicle, NewSeat) == 0x000008, "Member 'BP_Generic_Helicopter_C_EnteredVehicle::NewSeat' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_VehicleZoom_K2Node_InputAxisEvent_8
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_VehicleZoom_K2Node_InputAxisEvent_8 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_VehicleZoom_K2Node_InputAxisEvent_8) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_VehicleZoom_K2Node_InputAxisEvent_8");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_VehicleZoom_K2Node_InputAxisEvent_8) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_VehicleZoom_K2Node_InputAxisEvent_8");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_VehicleZoom_K2Node_InputAxisEvent_8, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_VehicleZoom_K2Node_InputAxisEvent_8::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(sizeof(BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature) == 0x0000B0, "Wrong size on BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, HitComponent) == 0x000000, "Member 'BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, NormalImpulse) == 0x000018, "Member 'BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::NormalImpulse' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature, Hit) == 0x000024, "Member 'BP_Generic_Helicopter_C_BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature::Hit' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.OnEngineActive
// 0x0001 (0x0001 - 0x0000)
struct BP_Generic_Helicopter_C_OnEngineActive final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_OnEngineActive) == 0x000001, "Wrong alignment on BP_Generic_Helicopter_C_OnEngineActive");
static_assert(sizeof(BP_Generic_Helicopter_C_OnEngineActive) == 0x000001, "Wrong size on BP_Generic_Helicopter_C_OnEngineActive");
static_assert(offsetof(BP_Generic_Helicopter_C_OnEngineActive, bActive) == 0x000000, "Member 'BP_Generic_Helicopter_C_OnEngineActive::bActive' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_ReceiveTick");
static_assert(sizeof(BP_Generic_Helicopter_C_ReceiveTick) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_ReceiveTick");
static_assert(offsetof(BP_Generic_Helicopter_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Generic_Helicopter_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.TurnOnPhysics
// 0x001C (0x001C - 0x0000)
struct BP_Generic_Helicopter_C_TurnOnPhysics final
{
public:
	bool                                          IgnoreLandingCheck;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3769[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewLinearVelocity;                                 // 0x0004(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                NewAngularVelocity;                                // 0x0010(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_TurnOnPhysics) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_TurnOnPhysics");
static_assert(sizeof(BP_Generic_Helicopter_C_TurnOnPhysics) == 0x00001C, "Wrong size on BP_Generic_Helicopter_C_TurnOnPhysics");
static_assert(offsetof(BP_Generic_Helicopter_C_TurnOnPhysics, IgnoreLandingCheck) == 0x000000, "Member 'BP_Generic_Helicopter_C_TurnOnPhysics::IgnoreLandingCheck' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_TurnOnPhysics, NewLinearVelocity) == 0x000004, "Member 'BP_Generic_Helicopter_C_TurnOnPhysics::NewLinearVelocity' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_TurnOnPhysics, NewAngularVelocity) == 0x000010, "Member 'BP_Generic_Helicopter_C_TurnOnPhysics::NewAngularVelocity' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.ReceiveUnpossessed
// 0x0008 (0x0008 - 0x0000)
struct BP_Generic_Helicopter_C_ReceiveUnpossessed final
{
public:
	class AController*                            OldController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_ReceiveUnpossessed) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_ReceiveUnpossessed");
static_assert(sizeof(BP_Generic_Helicopter_C_ReceiveUnpossessed) == 0x000008, "Wrong size on BP_Generic_Helicopter_C_ReceiveUnpossessed");
static_assert(offsetof(BP_Generic_Helicopter_C_ReceiveUnpossessed, OldController) == 0x000000, "Member 'BP_Generic_Helicopter_C_ReceiveUnpossessed::OldController' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.ReceivePossessed
// 0x0008 (0x0008 - 0x0000)
struct BP_Generic_Helicopter_C_ReceivePossessed final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_ReceivePossessed) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_ReceivePossessed");
static_assert(sizeof(BP_Generic_Helicopter_C_ReceivePossessed) == 0x000008, "Wrong size on BP_Generic_Helicopter_C_ReceivePossessed");
static_assert(offsetof(BP_Generic_Helicopter_C_ReceivePossessed, NewController) == 0x000000, "Member 'BP_Generic_Helicopter_C_ReceivePossessed::NewController' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_LookUp_K2Node_InputAxisEvent_13
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_13 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_13) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_13");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_13) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_13");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_13, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_LookUp_K2Node_InputAxisEvent_13::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_Turn_K2Node_InputAxisEvent_7
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_7 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_7) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_7");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_7) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_7");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_7, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_Turn_K2Node_InputAxisEvent_7::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_HelicopterRollKey_K2Node_InputAxisEvent_5
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRollKey_K2Node_InputAxisEvent_5 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRollKey_K2Node_InputAxisEvent_5) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRollKey_K2Node_InputAxisEvent_5");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRollKey_K2Node_InputAxisEvent_5) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRollKey_K2Node_InputAxisEvent_5");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRollKey_K2Node_InputAxisEvent_5, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRollKey_K2Node_InputAxisEvent_5::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_Helicopter_Look_Right_Left_K2Node_InputAxisEvent_4
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Right_Left_K2Node_InputAxisEvent_4 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Right_Left_K2Node_InputAxisEvent_4) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Right_Left_K2Node_InputAxisEvent_4");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Right_Left_K2Node_InputAxisEvent_4) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Right_Left_K2Node_InputAxisEvent_4");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Right_Left_K2Node_InputAxisEvent_4, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Right_Left_K2Node_InputAxisEvent_4::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_Helicopter_Look_Up_Down_K2Node_InputAxisEvent_2
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Up_Down_K2Node_InputAxisEvent_2 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Up_Down_K2Node_InputAxisEvent_2) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Up_Down_K2Node_InputAxisEvent_2");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Up_Down_K2Node_InputAxisEvent_2) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Up_Down_K2Node_InputAxisEvent_2");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Up_Down_K2Node_InputAxisEvent_2, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Look_Up_Down_K2Node_InputAxisEvent_2::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_HelicopterPitchKey_K2Node_InputAxisEvent_6
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_HelicopterPitchKey_K2Node_InputAxisEvent_6 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterPitchKey_K2Node_InputAxisEvent_6) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterPitchKey_K2Node_InputAxisEvent_6");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterPitchKey_K2Node_InputAxisEvent_6) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterPitchKey_K2Node_InputAxisEvent_6");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterPitchKey_K2Node_InputAxisEvent_6, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_HelicopterPitchKey_K2Node_InputAxisEvent_6::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_HelicopterCyclic_Yaw_K2Node_InputAxisEvent_11
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Yaw_K2Node_InputAxisEvent_11 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Yaw_K2Node_InputAxisEvent_11) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Yaw_K2Node_InputAxisEvent_11");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Yaw_K2Node_InputAxisEvent_11) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Yaw_K2Node_InputAxisEvent_11");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Yaw_K2Node_InputAxisEvent_11, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Yaw_K2Node_InputAxisEvent_11::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_HelicopterCyclic_Roll_K2Node_InputAxisEvent_10
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Roll_K2Node_InputAxisEvent_10 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Roll_K2Node_InputAxisEvent_10) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Roll_K2Node_InputAxisEvent_10");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Roll_K2Node_InputAxisEvent_10) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Roll_K2Node_InputAxisEvent_10");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Roll_K2Node_InputAxisEvent_10, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Roll_K2Node_InputAxisEvent_10::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_HelicopterCyclic_Pitch_K2Node_InputAxisEvent_9
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Pitch_K2Node_InputAxisEvent_9 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Pitch_K2Node_InputAxisEvent_9) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Pitch_K2Node_InputAxisEvent_9");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Pitch_K2Node_InputAxisEvent_9) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Pitch_K2Node_InputAxisEvent_9");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Pitch_K2Node_InputAxisEvent_9, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_HelicopterCyclic_Pitch_K2Node_InputAxisEvent_9::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_Helicopter_Collective_K2Node_InputAxisEvent_8
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Collective_K2Node_InputAxisEvent_8 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Collective_K2Node_InputAxisEvent_8) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Collective_K2Node_InputAxisEvent_8");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Collective_K2Node_InputAxisEvent_8) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Collective_K2Node_InputAxisEvent_8");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Collective_K2Node_InputAxisEvent_8, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_Helicopter_Collective_K2Node_InputAxisEvent_8::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.HandleInput
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_HandleInput final
{
public:
	float                                         DeltaTimeRatio;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_HandleInput) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_HandleInput");
static_assert(sizeof(BP_Generic_Helicopter_C_HandleInput) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_HandleInput");
static_assert(offsetof(BP_Generic_Helicopter_C_HandleInput, DeltaTimeRatio) == 0x000000, "Member 'BP_Generic_Helicopter_C_HandleInput::DeltaTimeRatio' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_MoveElevator_K2Node_InputAxisEvent_3
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_MoveElevator_K2Node_InputAxisEvent_3 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_MoveElevator_K2Node_InputAxisEvent_3) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_MoveElevator_K2Node_InputAxisEvent_3");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_MoveElevator_K2Node_InputAxisEvent_3) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_MoveElevator_K2Node_InputAxisEvent_3");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_MoveElevator_K2Node_InputAxisEvent_3, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_MoveElevator_K2Node_InputAxisEvent_3::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_MoveAileron_K2Node_InputAxisEvent_2
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_MoveAileron_K2Node_InputAxisEvent_2 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_MoveAileron_K2Node_InputAxisEvent_2) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_MoveAileron_K2Node_InputAxisEvent_2");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_MoveAileron_K2Node_InputAxisEvent_2) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_MoveAileron_K2Node_InputAxisEvent_2");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_MoveAileron_K2Node_InputAxisEvent_2, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_MoveAileron_K2Node_InputAxisEvent_2::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_HelicopterRight_K2Node_InputAxisEvent_1
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRight_K2Node_InputAxisEvent_1 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRight_K2Node_InputAxisEvent_1) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRight_K2Node_InputAxisEvent_1");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRight_K2Node_InputAxisEvent_1) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRight_K2Node_InputAxisEvent_1");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRight_K2Node_InputAxisEvent_1, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_HelicopterRight_K2Node_InputAxisEvent_1::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpAxisEvt_HelicopterUp_K2Node_InputAxisEvent_0
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_InpAxisEvt_HelicopterUp_K2Node_InputAxisEvent_0 final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterUp_K2Node_InputAxisEvent_0) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterUp_K2Node_InputAxisEvent_0");
static_assert(sizeof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterUp_K2Node_InputAxisEvent_0) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_InpAxisEvt_HelicopterUp_K2Node_InputAxisEvent_0");
static_assert(offsetof(BP_Generic_Helicopter_C_InpAxisEvt_HelicopterUp_K2Node_InputAxisEvent_0, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpAxisEvt_HelicopterUp_K2Node_InputAxisEvent_0::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.HandleInput_Pitch
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_HandleInput_Pitch final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_HandleInput_Pitch) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_HandleInput_Pitch");
static_assert(sizeof(BP_Generic_Helicopter_C_HandleInput_Pitch) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_HandleInput_Pitch");
static_assert(offsetof(BP_Generic_Helicopter_C_HandleInput_Pitch, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_HandleInput_Pitch::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.HandleInput_Roll
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_HandleInput_Roll final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_HandleInput_Roll) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_HandleInput_Roll");
static_assert(sizeof(BP_Generic_Helicopter_C_HandleInput_Roll) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_HandleInput_Roll");
static_assert(offsetof(BP_Generic_Helicopter_C_HandleInput_Roll, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_HandleInput_Roll::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.HandleInput_Yaw
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_HandleInput_Yaw final
{
public:
	float                                         AxisValue;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_HandleInput_Yaw) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_HandleInput_Yaw");
static_assert(sizeof(BP_Generic_Helicopter_C_HandleInput_Yaw) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_HandleInput_Yaw");
static_assert(offsetof(BP_Generic_Helicopter_C_HandleInput_Yaw, AxisValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_HandleInput_Yaw::AxisValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.HandleInput_Acceleration
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_HandleInput_Acceleration final
{
public:
	float                                         AxisInput;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_HandleInput_Acceleration) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_HandleInput_Acceleration");
static_assert(sizeof(BP_Generic_Helicopter_C_HandleInput_Acceleration) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_HandleInput_Acceleration");
static_assert(offsetof(BP_Generic_Helicopter_C_HandleInput_Acceleration, AxisInput) == 0x000000, "Member 'BP_Generic_Helicopter_C_HandleInput_Acceleration::AxisInput' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.ROS_UpdateLandingState
// 0x0001 (0x0001 - 0x0000)
struct BP_Generic_Helicopter_C_ROS_UpdateLandingState final
{
public:
	bool                                          IsLanded_;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_ROS_UpdateLandingState) == 0x000001, "Wrong alignment on BP_Generic_Helicopter_C_ROS_UpdateLandingState");
static_assert(sizeof(BP_Generic_Helicopter_C_ROS_UpdateLandingState) == 0x000001, "Wrong size on BP_Generic_Helicopter_C_ROS_UpdateLandingState");
static_assert(offsetof(BP_Generic_Helicopter_C_ROS_UpdateLandingState, IsLanded_) == 0x000000, "Member 'BP_Generic_Helicopter_C_ROS_UpdateLandingState::IsLanded_' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.MC_SetLandingState
// 0x0001 (0x0001 - 0x0000)
struct BP_Generic_Helicopter_C_MC_SetLandingState final
{
public:
	bool                                          NewIsLandedState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_MC_SetLandingState) == 0x000001, "Wrong alignment on BP_Generic_Helicopter_C_MC_SetLandingState");
static_assert(sizeof(BP_Generic_Helicopter_C_MC_SetLandingState) == 0x000001, "Wrong size on BP_Generic_Helicopter_C_MC_SetLandingState");
static_assert(offsetof(BP_Generic_Helicopter_C_MC_SetLandingState, NewIsLandedState) == 0x000000, "Member 'BP_Generic_Helicopter_C_MC_SetLandingState::NewIsLandedState' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_0");
static_assert(sizeof(BP_Generic_Helicopter_C_InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_0");
static_assert(offsetof(BP_Generic_Helicopter_C_InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpActEvt_PickupConstruct_K2Node_InputActionEvent_1
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_1 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_1) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_1");
static_assert(sizeof(BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_1) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_1");
static_assert(offsetof(BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_1, Key) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_1::Key' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpActEvt_PickupConstruct_K2Node_InputActionEvent_2
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_2 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_2) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_2");
static_assert(sizeof(BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_2) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_2");
static_assert(offsetof(BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_2, Key) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpActEvt_PickupConstruct_K2Node_InputActionEvent_2::Key' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpActEvt_PickupAmmo_K2Node_InputActionEvent_3
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_3 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_3) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_3");
static_assert(sizeof(BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_3) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_3");
static_assert(offsetof(BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_3, Key) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_3::Key' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpActEvt_PickupAmmo_K2Node_InputActionEvent_4
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_4 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_4) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_4");
static_assert(sizeof(BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_4) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_4");
static_assert(offsetof(BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_4, Key) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpActEvt_PickupAmmo_K2Node_InputActionEvent_4::Key' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpActEvt_DropConstruct_K2Node_InputActionEvent_5
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_5 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_5) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_5");
static_assert(sizeof(BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_5) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_5");
static_assert(offsetof(BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_5, Key) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_5::Key' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpActEvt_DropConstruct_K2Node_InputActionEvent_6
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_6 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_6) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_6");
static_assert(sizeof(BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_6) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_6");
static_assert(offsetof(BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_6, Key) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpActEvt_DropConstruct_K2Node_InputActionEvent_6::Key' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpActEvt_DropAmmo_K2Node_InputActionEvent_7
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_7 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_7) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_7");
static_assert(sizeof(BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_7) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_7");
static_assert(offsetof(BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_7, Key) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_7::Key' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpActEvt_DropAmmo_K2Node_InputActionEvent_8
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_8 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_8) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_8");
static_assert(sizeof(BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_8) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_8");
static_assert(offsetof(BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_8, Key) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpActEvt_DropAmmo_K2Node_InputActionEvent_8::Key' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.InpActEvt_Helicopter_Recenter_View_K2Node_InputActionEvent_9
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_InpActEvt_Helicopter_Recenter_View_K2Node_InputActionEvent_9 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_InpActEvt_Helicopter_Recenter_View_K2Node_InputActionEvent_9) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_InpActEvt_Helicopter_Recenter_View_K2Node_InputActionEvent_9");
static_assert(sizeof(BP_Generic_Helicopter_C_InpActEvt_Helicopter_Recenter_View_K2Node_InputActionEvent_9) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_InpActEvt_Helicopter_Recenter_View_K2Node_InputActionEvent_9");
static_assert(offsetof(BP_Generic_Helicopter_C_InpActEvt_Helicopter_Recenter_View_K2Node_InputActionEvent_9, Key) == 0x000000, "Member 'BP_Generic_Helicopter_C_InpActEvt_Helicopter_Recenter_View_K2Node_InputActionEvent_9::Key' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.UserConstructionScript
// 0x0028 (0x0028 - 0x0000)
struct BP_Generic_Helicopter_C_UserConstructionScript final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_UserConstructionScript) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_UserConstructionScript");
static_assert(sizeof(BP_Generic_Helicopter_C_UserConstructionScript) == 0x000028, "Wrong size on BP_Generic_Helicopter_C_UserConstructionScript");
static_assert(offsetof(BP_Generic_Helicopter_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_UserConstructionScript, CallFunc_MapRangeClamped_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_UserConstructionScript::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000008, "Member 'BP_Generic_Helicopter_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00000C, "Member 'BP_Generic_Helicopter_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000010, "Member 'BP_Generic_Helicopter_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000014, "Member 'BP_Generic_Helicopter_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000018, "Member 'BP_Generic_Helicopter_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_UserConstructionScript, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_Generic_Helicopter_C_UserConstructionScript::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Generic_Helicopter_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000024, "Member 'BP_Generic_Helicopter_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.AddAcceleration
// 0x0048 (0x0048 - 0x0000)
struct BP_Generic_Helicopter_C_AddAcceleration final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_376A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQJoyStickConfig                      CallFunc_GetJoyConfig_ReturnValue;                 // 0x0010(0x0010)(ConstParm, NoDestructor)
	float                                         CallFunc_CurveType_Out;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_AddAcceleration) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_AddAcceleration");
static_assert(sizeof(BP_Generic_Helicopter_C_AddAcceleration) == 0x000048, "Wrong size on BP_Generic_Helicopter_C_AddAcceleration");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, Temp_bool_Variable) == 0x000000, "Member 'BP_Generic_Helicopter_C_AddAcceleration::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_GetSquadGameUserSettings_ReturnValue) == 0x000008, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_GetSquadGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_GetJoyConfig_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_GetJoyConfig_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_CurveType_Out) == 0x000020, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_CurveType_Out' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_SelectFloat_ReturnValue) == 0x00002C, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000038, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, K2Node_Select_Default) == 0x000040, "Member 'BP_Generic_Helicopter_C_AddAcceleration::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddAcceleration, CallFunc_FClamp_ReturnValue) == 0x000044, "Member 'BP_Generic_Helicopter_C_AddAcceleration::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.CalcCustomVelocity
// 0x04B0 (0x04B0 - 0x0000)
struct BP_Generic_Helicopter_C_CalcCustomVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_376B[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            DebugVars;                                         // 0x0010(0x0050)(Edit, BlueprintVisible)
	float                                         L_YDirection;                                      // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_XDirection;                                      // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_ZDirection;                                      // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_AccelerationValue;                               // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_RollPercent;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_RollDirection;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_PitchNormal;                                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         L_RolllNormal;                                     // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                L_CurrentVector;                                   // 0x0080(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_376C[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue;         // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_376D[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPitchNormalized_NewParam;              // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRollNormalized_NewParam;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_376E[0x3];                                     // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue_1;             // 0x0130(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0158(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_4;                          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_376F[0x3];                                     // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3770[0x4];                                     // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMainRotorThrust_ReturnValue;           // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetThrustPower_Thrust;                    // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3771[0x4];                                     // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x01E0(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_9;        // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_10;       // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_6;                          // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x0230(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_7;                          // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_7;                          // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_7;                          // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3772[0x3];                                     // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x0254(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0260(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x026C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0278(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0284(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0290(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0319(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x031A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3773[0x1];                                     // 0x031B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0324(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0330(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x033C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0348(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3774[0x4];                                     // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0358(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0368(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0370(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0384(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x039C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_11;       // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x03B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x03BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_12;       // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x03DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x03E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_13;       // 0x03FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_14;       // 0x0404(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_3;             // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_15;       // 0x040C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMainRotorThrust_ReturnValue_1;         // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_16;       // 0x0414(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_17;       // 0x0418(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_8;                          // 0x041C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_8;                          // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_8;                          // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_18;       // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_2;              // 0x042C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_19;       // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_6;                 // 0x0438(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_20;       // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_7;                 // 0x044C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0458(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0464(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_9;                          // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_9;                          // 0x0474(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_9;                          // 0x0478(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x047C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_2;                  // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_3;                  // 0x048C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_4;                  // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_8;                 // 0x0494(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_3;              // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_CalcCustomVelocity) == 0x000010, "Wrong alignment on BP_Generic_Helicopter_C_CalcCustomVelocity");
static_assert(sizeof(BP_Generic_Helicopter_C_CalcCustomVelocity) == 0x0004B0, "Wrong size on BP_Generic_Helicopter_C_CalcCustomVelocity");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, Velocity) == 0x000000, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::Velocity' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, DebugVars) == 0x000010, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::DebugVars' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, L_YDirection) == 0x000060, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::L_YDirection' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, L_XDirection) == 0x000064, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::L_XDirection' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, L_ZDirection) == 0x000068, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::L_ZDirection' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, L_AccelerationValue) == 0x00006C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::L_AccelerationValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, L_RollPercent) == 0x000070, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::L_RollPercent' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, L_RollDirection) == 0x000074, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::L_RollDirection' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, L_PitchNormal) == 0x000078, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::L_PitchNormal' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, L_RolllNormal) == 0x00007C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::L_RolllNormal' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, L_CurrentVector) == 0x000080, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::L_CurrentVector' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000090, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetComponentVelocity_ReturnValue) == 0x0000C0, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetComponentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_VSize_ReturnValue) == 0x0000CC, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000D0, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetVectorValue_ReturnValue) == 0x0000D4, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_X) == 0x0000E0, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Y) == 0x0000E4, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Z) == 0x0000E8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000EC, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_X_1) == 0x0000F0, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Y_1) == 0x0000F4, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Z_1) == 0x0000F8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000FC, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_X_2) == 0x000100, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Y_2) == 0x000104, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Z_2) == 0x000108, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_FClamp_ReturnValue) == 0x00010C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Less_FloatFloat_ReturnValue) == 0x000110, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetPitchNormalized_NewParam) == 0x000114, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetPitchNormalized_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetFloatValue_ReturnValue) == 0x000118, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00011C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetRollNormalized_NewParam) == 0x000120, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetRollNormalized_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Abs_ReturnValue) == 0x000124, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000128, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_SelectFloat_ReturnValue) == 0x00012C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetVectorValue_ReturnValue_1) == 0x000130, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetVectorValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00013C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_X_3) == 0x000140, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Y_3) == 0x000144, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Z_3) == 0x000148, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00014C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000158, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_X_4) == 0x000164, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Y_4) == 0x000168, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Z_4) == 0x00016C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_NegateRotator_ReturnValue) == 0x000170, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00017C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Concat_StrStr_ReturnValue) == 0x000180, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_SelectFloat_ReturnValue_1) == 0x000190, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000198, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x0001A8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_MakeVector_ReturnValue) == 0x0001AC, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0001B8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetMainRotorThrust_ReturnValue) == 0x0001C4, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetMainRotorThrust_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Add_VectorVector_ReturnValue) == 0x0001C8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetThrustPower_Thrust) == 0x0001D4, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetThrustPower_Thrust' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x0001D8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, Temp_object_Variable) == 0x0001E0, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x0001F0, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x0001F4, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x0001F8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x0001FC, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_9) == 0x000200, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_X_5) == 0x000204, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Y_5) == 0x000208, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Z_5) == 0x00020C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_10) == 0x000210, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_FInterpTo_ReturnValue) == 0x000214, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_X_6) == 0x000218, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Y_6) == 0x00021C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Z_6) == 0x000220, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_MakeVector_ReturnValue_1) == 0x000224, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_MakeVector_ReturnValue_2) == 0x000230, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_X_7) == 0x00023C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_X_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Y_7) == 0x000240, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Y_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Z_7) == 0x000244, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Z_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000248, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00024C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_FClamp_ReturnValue_1) == 0x000250, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_MakeVector_ReturnValue_3) == 0x000254, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetForwardVector_ReturnValue) == 0x000260, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00026C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000278, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000284, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_LineTraceSingle_OutHit) == 0x000290, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_LineTraceSingle_ReturnValue) == 0x000318, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_bBlockingHit) == 0x000319, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_bInitialOverlap) == 0x00031A, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_Time) == 0x00031C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_Distance) == 0x000320, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_Location) == 0x000324, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_ImpactPoint) == 0x000330, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_Normal) == 0x00033C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_ImpactNormal) == 0x000348, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_PhysMat) == 0x000358, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_HitActor) == 0x000360, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_HitComponent) == 0x000368, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_HitBoneName) == 0x000370, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_HitItem) == 0x000378, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_ElementIndex) == 0x00037C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_FaceIndex) == 0x000380, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_TraceStart) == 0x000384, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakHitResult_TraceEnd) == 0x000390, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00039C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_VSize_ReturnValue_1) == 0x0003A8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_11) == 0x0003AC, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_MakeVector_ReturnValue_4) == 0x0003B0, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0003BC, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_12) == 0x0003C8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_FInterpTo_ReturnValue_1) == 0x0003CC, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_MakeVector_ReturnValue_5) == 0x0003D0, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0003DC, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0003E8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0003F4, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x0003F8, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_13) == 0x0003FC, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetFloatValue_ReturnValue_1) == 0x000400, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_14) == 0x000404, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Add_FloatFloat_ReturnValue_3) == 0x000408, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Add_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_15) == 0x00040C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetMainRotorThrust_ReturnValue_1) == 0x000410, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetMainRotorThrust_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_16) == 0x000414, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_17) == 0x000418, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_X_8) == 0x00041C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_X_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Y_8) == 0x000420, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Y_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Z_8) == 0x000424, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Z_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_18) == 0x000428, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetFloatValue_ReturnValue_2) == 0x00042C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetFloatValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_19) == 0x000430, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Lerp_ReturnValue) == 0x000434, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_MakeVector_ReturnValue_6) == 0x000438, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_MakeVector_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_FloatFloat_ReturnValue_20) == 0x000444, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_FloatFloat_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Lerp_ReturnValue_1) == 0x000448, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_MakeVector_ReturnValue_7) == 0x00044C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_MakeVector_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_InverseTransformDirection_ReturnValue) == 0x000458, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000464, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_X_9) == 0x000470, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_X_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Y_9) == 0x000474, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Y_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_BreakVector_Z_9) == 0x000478, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_BreakVector_Z_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_Add_VectorVector_ReturnValue_4) == 0x00047C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_FInterpTo_ReturnValue_2) == 0x000488, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_FInterpTo_ReturnValue_3) == 0x00048C, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_FInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_FInterpTo_ReturnValue_4) == 0x000490, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_FInterpTo_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_MakeVector_ReturnValue_8) == 0x000494, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_MakeVector_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcCustomVelocity, CallFunc_GetFloatValue_ReturnValue_3) == 0x0004A0, "Member 'BP_Generic_Helicopter_C_CalcCustomVelocity::CallFunc_GetFloatValue_ReturnValue_3' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.CanLand
// 0x0350 (0x0350 - 0x0000)
struct BP_Generic_Helicopter_C_CanLand final
{
public:
	bool                                          CanLand_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3775[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         Temp_object_Variable_1;                            // 0x0018(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         Temp_object_Variable_2;                            // 0x0028(0x0010)(ConstParm, ReferenceParm)
	TArray<class AActor*>                         Temp_object_Variable_3;                            // 0x0038(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3776[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3777[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x009C(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0124(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3778[0x3];                                     // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0134(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0140(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x014C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_1;                 // 0x0158(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_1;            // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3779[0x3];                                     // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_2;    // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_2;                 // 0x0208(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_2;            // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_377A[0x3];                                     // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_3;           // 0x0294(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_3;    // 0x02AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x02B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit_3;                 // 0x02C4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue_3;            // 0x034C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_CanLand) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_CanLand");
static_assert(sizeof(BP_Generic_Helicopter_C_CanLand) == 0x000350, "Wrong size on BP_Generic_Helicopter_C_CanLand");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CanLand_) == 0x000000, "Member 'BP_Generic_Helicopter_C_CanLand::CanLand_' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, Temp_object_Variable) == 0x000008, "Member 'BP_Generic_Helicopter_C_CanLand::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, Temp_object_Variable_1) == 0x000018, "Member 'BP_Generic_Helicopter_C_CanLand::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, Temp_object_Variable_2) == 0x000028, "Member 'BP_Generic_Helicopter_C_CanLand::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, Temp_object_Variable_3) == 0x000038, "Member 'BP_Generic_Helicopter_C_CanLand::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_Not_PreBool_ReturnValue) == 0x000048, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_GetVelocity_ReturnValue) == 0x00004C, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_VSize_ReturnValue) == 0x000058, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_GetForwardVector_ReturnValue) == 0x00005C, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00006C, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000078, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_Add_VectorVector_ReturnValue) == 0x000084, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_GetForwardVector_ReturnValue_1) == 0x000090, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_LineTraceSingle_OutHit) == 0x00009C, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_LineTraceSingle_ReturnValue) == 0x000124, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000128, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000134, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000140, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_GetForwardVector_ReturnValue_2) == 0x00014C, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_LineTraceSingle_OutHit_1) == 0x000158, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_LineTraceSingle_OutHit_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_LineTraceSingle_ReturnValue_1) == 0x0001E0, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_LineTraceSingle_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0001E4, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_K2_GetComponentLocation_ReturnValue_2) == 0x0001F0, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_K2_GetComponentLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_Add_VectorVector_ReturnValue_2) == 0x0001FC, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_LineTraceSingle_OutHit_2) == 0x000208, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_LineTraceSingle_OutHit_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_LineTraceSingle_ReturnValue_2) == 0x000290, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_LineTraceSingle_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_GetForwardVector_ReturnValue_3) == 0x000294, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_GetForwardVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x0002A0, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_K2_GetComponentLocation_ReturnValue_3) == 0x0002AC, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_K2_GetComponentLocation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_Add_VectorVector_ReturnValue_3) == 0x0002B8, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_LineTraceSingle_OutHit_3) == 0x0002C4, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_LineTraceSingle_OutHit_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CanLand, CallFunc_LineTraceSingle_ReturnValue_3) == 0x00034C, "Member 'BP_Generic_Helicopter_C_CanLand::CallFunc_LineTraceSingle_ReturnValue_3' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetPitchNormalized
// 0x0024 (0x0024 - 0x0000)
struct BP_Generic_Helicopter_C_GetPitchNormalized final
{
public:
	float                                         NewParam;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetPitchNormalized) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetPitchNormalized");
static_assert(sizeof(BP_Generic_Helicopter_C_GetPitchNormalized) == 0x000024, "Wrong size on BP_Generic_Helicopter_C_GetPitchNormalized");
static_assert(offsetof(BP_Generic_Helicopter_C_GetPitchNormalized, NewParam) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetPitchNormalized::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetPitchNormalized, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetPitchNormalized::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetPitchNormalized, CallFunc_BreakRotator_Roll) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetPitchNormalized::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetPitchNormalized, CallFunc_BreakRotator_Pitch) == 0x000014, "Member 'BP_Generic_Helicopter_C_GetPitchNormalized::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetPitchNormalized, CallFunc_BreakRotator_Yaw) == 0x000018, "Member 'BP_Generic_Helicopter_C_GetPitchNormalized::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetPitchNormalized, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_Generic_Helicopter_C_GetPitchNormalized::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetPitchNormalized, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Generic_Helicopter_C_GetPitchNormalized::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetRollNormalized
// 0x0020 (0x0020 - 0x0000)
struct BP_Generic_Helicopter_C_GetRollNormalized final
{
public:
	float                                         NewParam;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetRollNormalized) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetRollNormalized");
static_assert(sizeof(BP_Generic_Helicopter_C_GetRollNormalized) == 0x000020, "Wrong size on BP_Generic_Helicopter_C_GetRollNormalized");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRollNormalized, NewParam) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetRollNormalized::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRollNormalized, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetRollNormalized::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRollNormalized, CallFunc_BreakRotator_Roll) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetRollNormalized::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRollNormalized, CallFunc_BreakRotator_Pitch) == 0x000014, "Member 'BP_Generic_Helicopter_C_GetRollNormalized::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRollNormalized, CallFunc_BreakRotator_Yaw) == 0x000018, "Member 'BP_Generic_Helicopter_C_GetRollNormalized::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRollNormalized, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_Generic_Helicopter_C_GetRollNormalized::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetVelocityLength
// 0x0014 (0x0014 - 0x0000)
struct BP_Generic_Helicopter_C_GetVelocityLength final
{
public:
	float                                         NewParam;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetVelocityLength) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetVelocityLength");
static_assert(sizeof(BP_Generic_Helicopter_C_GetVelocityLength) == 0x000014, "Wrong size on BP_Generic_Helicopter_C_GetVelocityLength");
static_assert(offsetof(BP_Generic_Helicopter_C_GetVelocityLength, NewParam) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetVelocityLength::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetVelocityLength, CallFunc_GetVelocity_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetVelocityLength::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetVelocityLength, CallFunc_VSize_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetVelocityLength::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.CalcYawResistances
// 0x0064 (0x0064 - 0x0000)
struct BP_Generic_Helicopter_C_CalcYawResistances final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_377B[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_CalcYawResistances) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_CalcYawResistances");
static_assert(sizeof(BP_Generic_Helicopter_C_CalcYawResistances) == 0x000064, "Wrong size on BP_Generic_Helicopter_C_CalcYawResistances");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_BreakVector_X) == 0x000004, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_BreakVector_Y) == 0x000008, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_BreakVector_Z) == 0x00000C, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_Abs_ReturnValue) == 0x00001C, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_BreakRotator_Roll) == 0x000020, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_BreakRotator_Pitch) == 0x000024, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_BreakRotator_Yaw) == 0x000028, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_Abs_ReturnValue_1) == 0x000030, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_FClamp_ReturnValue) == 0x000034, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_SelectFloat_ReturnValue) == 0x00003C, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_MapRangeClamped_ReturnValue) == 0x000040, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_FInterpTo_ReturnValue) == 0x000048, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00004C, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_FClamp_ReturnValue_1) == 0x000050, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000054, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000058, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_Abs_ReturnValue_2) == 0x00005C, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcYawResistances, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000060, "Member 'BP_Generic_Helicopter_C_CalcYawResistances::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.CalcBrakebyYaw
// 0x0090 (0x0090 - 0x0000)
struct BP_Generic_Helicopter_C_CalcBrakebyYaw final
{
public:
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_377C[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_377D[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X_1;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_377E[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_377F[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_3;                        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_4;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3780[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3781[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_CalcBrakebyYaw) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_CalcBrakebyYaw");
static_assert(sizeof(BP_Generic_Helicopter_C_CalcBrakebyYaw) == 0x000090, "Wrong size on BP_Generic_Helicopter_C_CalcBrakebyYaw");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_SelectFloat_ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Less_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000005, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BreakVector_X) == 0x000008, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BreakVector_Y) == 0x00000C, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BreakVector_Z) == 0x000010, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000014, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000015, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BreakVector_X_1) == 0x000018, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BreakVector_Y_1) == 0x00001C, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BreakVector_Z_1) == 0x000020, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Not_PreBool_ReturnValue) == 0x000024, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_FInterpTo_ReturnValue) == 0x000028, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000030, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000038, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Abs_ReturnValue) == 0x000040, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BreakVector_X_2) == 0x000044, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BreakVector_Y_2) == 0x000048, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BreakVector_Z_2) == 0x00004C, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_FClamp_ReturnValue) == 0x000050, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Abs_ReturnValue_1) == 0x000054, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Abs_ReturnValue_2) == 0x00005C, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Abs_ReturnValue_3) == 0x000060, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Abs_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Abs_ReturnValue_4) == 0x000064, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Abs_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_FInterpTo_ReturnValue_1) == 0x000068, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Add_FloatFloat_ReturnValue) == 0x00006C, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000070, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000074, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_FClamp_ReturnValue_1) == 0x000078, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x00007C, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000080, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BooleanAND_ReturnValue) == 0x000084, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000088, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CalcBrakebyYaw, CallFunc_BooleanAND_ReturnValue_1) == 0x00008C, "Member 'BP_Generic_Helicopter_C_CalcBrakebyYaw::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.AddYaw
// 0x0020 (0x0020 - 0x0000)
struct BP_Generic_Helicopter_C_AddYaw final
{
public:
	float                                         Yaw;                                               // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_AddYaw) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_AddYaw");
static_assert(sizeof(BP_Generic_Helicopter_C_AddYaw) == 0x000020, "Wrong size on BP_Generic_Helicopter_C_AddYaw");
static_assert(offsetof(BP_Generic_Helicopter_C_AddYaw, Yaw) == 0x000000, "Member 'BP_Generic_Helicopter_C_AddYaw::Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddYaw, CallFunc_BreakRotator_Roll) == 0x000004, "Member 'BP_Generic_Helicopter_C_AddYaw::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddYaw, CallFunc_BreakRotator_Pitch) == 0x000008, "Member 'BP_Generic_Helicopter_C_AddYaw::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddYaw, CallFunc_BreakRotator_Yaw) == 0x00000C, "Member 'BP_Generic_Helicopter_C_AddYaw::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddYaw, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_AddYaw::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddYaw, CallFunc_MakeRotator_ReturnValue) == 0x000014, "Member 'BP_Generic_Helicopter_C_AddYaw::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.AddPitch
// 0x0020 (0x0020 - 0x0000)
struct BP_Generic_Helicopter_C_AddPitch final
{
public:
	float                                         Pitch;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_AddPitch) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_AddPitch");
static_assert(sizeof(BP_Generic_Helicopter_C_AddPitch) == 0x000020, "Wrong size on BP_Generic_Helicopter_C_AddPitch");
static_assert(offsetof(BP_Generic_Helicopter_C_AddPitch, Pitch) == 0x000000, "Member 'BP_Generic_Helicopter_C_AddPitch::Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddPitch, CallFunc_BreakRotator_Roll) == 0x000004, "Member 'BP_Generic_Helicopter_C_AddPitch::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddPitch, CallFunc_BreakRotator_Pitch) == 0x000008, "Member 'BP_Generic_Helicopter_C_AddPitch::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddPitch, CallFunc_BreakRotator_Yaw) == 0x00000C, "Member 'BP_Generic_Helicopter_C_AddPitch::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddPitch, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_AddPitch::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddPitch, CallFunc_MakeRotator_ReturnValue) == 0x000014, "Member 'BP_Generic_Helicopter_C_AddPitch::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.AddRoll
// 0x0020 (0x0020 - 0x0000)
struct BP_Generic_Helicopter_C_AddRoll final
{
public:
	float                                         Roll_;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_AddRoll) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_AddRoll");
static_assert(sizeof(BP_Generic_Helicopter_C_AddRoll) == 0x000020, "Wrong size on BP_Generic_Helicopter_C_AddRoll");
static_assert(offsetof(BP_Generic_Helicopter_C_AddRoll, Roll_) == 0x000000, "Member 'BP_Generic_Helicopter_C_AddRoll::Roll_' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddRoll, CallFunc_BreakRotator_Roll) == 0x000004, "Member 'BP_Generic_Helicopter_C_AddRoll::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddRoll, CallFunc_BreakRotator_Pitch) == 0x000008, "Member 'BP_Generic_Helicopter_C_AddRoll::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddRoll, CallFunc_BreakRotator_Yaw) == 0x00000C, "Member 'BP_Generic_Helicopter_C_AddRoll::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddRoll, CallFunc_Add_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_AddRoll::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_AddRoll, CallFunc_MakeRotator_ReturnValue) == 0x000014, "Member 'BP_Generic_Helicopter_C_AddRoll::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.DoPushAndBounce
// 0x004C (0x004C - 0x0000)
struct BP_Generic_Helicopter_C_DoPushAndBounce final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3782[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3783[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3784[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_2;             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_DoPushAndBounce) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_DoPushAndBounce");
static_assert(sizeof(BP_Generic_Helicopter_C_DoPushAndBounce) == 0x00004C, "Wrong size on BP_Generic_Helicopter_C_DoPushAndBounce");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Not_PreBool_ReturnValue_1) == 0x000001, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Not_PreBool_ReturnValue_2) == 0x000002, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Add_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Less_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_BooleanAND_ReturnValue) == 0x000015, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_FInterpTo_ReturnValue) == 0x000018, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000028, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000030, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_FClamp_ReturnValue) == 0x000034, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_FInterpTo_ReturnValue_1) == 0x000038, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x00003C, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000040, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_Add_FloatFloat_ReturnValue_2) == 0x000044, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_Add_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000048, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoPushAndBounce, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000049, "Member 'BP_Generic_Helicopter_C_DoPushAndBounce::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.DoRollToYawTransfer
// 0x0014 (0x0014 - 0x0000)
struct BP_Generic_Helicopter_C_DoRollToYawTransfer final
{
public:
	float                                         CallFunc_GetRollNormalized_NewParam;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_DoRollToYawTransfer) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_DoRollToYawTransfer");
static_assert(sizeof(BP_Generic_Helicopter_C_DoRollToYawTransfer) == 0x000014, "Wrong size on BP_Generic_Helicopter_C_DoRollToYawTransfer");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRollToYawTransfer, CallFunc_GetRollNormalized_NewParam) == 0x000000, "Member 'BP_Generic_Helicopter_C_DoRollToYawTransfer::CallFunc_GetRollNormalized_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRollToYawTransfer, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_DoRollToYawTransfer::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRollToYawTransfer, CallFunc_FInterpTo_ReturnValue) == 0x000008, "Member 'BP_Generic_Helicopter_C_DoRollToYawTransfer::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRollToYawTransfer, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'BP_Generic_Helicopter_C_DoRollToYawTransfer::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRollToYawTransfer, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000010, "Member 'BP_Generic_Helicopter_C_DoRollToYawTransfer::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetGradualRotationIncrement
// 0x0030 (0x0030 - 0x0000)
struct BP_Generic_Helicopter_C_GetGradualRotationIncrement final
{
public:
	float                                         Roll;                                              // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pitch;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRollNormalized_NewParam;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetPitchNormalized_NewParam;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetGradualRotationIncrement) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetGradualRotationIncrement");
static_assert(sizeof(BP_Generic_Helicopter_C_GetGradualRotationIncrement) == 0x000030, "Wrong size on BP_Generic_Helicopter_C_GetGradualRotationIncrement");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, Roll) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, Pitch) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, CallFunc_GetRollNormalized_NewParam) == 0x000008, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::CallFunc_GetRollNormalized_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, CallFunc_GetPitchNormalized_NewParam) == 0x00000C, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::CallFunc_GetPitchNormalized_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, CallFunc_SelectFloat_ReturnValue_1) == 0x000014, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, CallFunc_GetFloatValue_ReturnValue) == 0x000018, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, CallFunc_GetFloatValue_ReturnValue_1) == 0x00001C, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000028, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetGradualRotationIncrement, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00002C, "Member 'BP_Generic_Helicopter_C_GetGradualRotationIncrement::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.PolishRollInput
// 0x0084 (0x0084 - 0x0000)
struct BP_Generic_Helicopter_C_PolishRollInput final
{
public:
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetThrustPower_Thrust;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRollNormalized_NewParam;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3785[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3786[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3787[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistanceFromTheGround_Distance;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDistanceFromTheGround_GotDistance;     // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3788[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_3;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3789[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_8;        // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_PolishRollInput) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_PolishRollInput");
static_assert(sizeof(BP_Generic_Helicopter_C_PolishRollInput) == 0x000084, "Wrong size on BP_Generic_Helicopter_C_PolishRollInput");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_GetThrustPower_Thrust) == 0x000004, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_GetThrustPower_Thrust' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000008, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_FClamp_ReturnValue) == 0x00000C, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_FClamp_ReturnValue_1) == 0x000010, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_GetRollNormalized_NewParam) == 0x000014, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_GetRollNormalized_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_GetFloatValue_ReturnValue) == 0x000018, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x00001C, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000020, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000024, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000028, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_BreakRotator_Roll) == 0x000034, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_BreakRotator_Pitch) == 0x000038, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_BreakRotator_Yaw) == 0x00003C, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, Temp_float_Variable) == 0x000040, "Member 'BP_Generic_Helicopter_C_PolishRollInput::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000045, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Abs_ReturnValue) == 0x000048, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_BooleanOR_ReturnValue) == 0x00004C, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000050, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_FClamp_ReturnValue_2) == 0x000054, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000058, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, Temp_bool_Variable) == 0x00005C, "Member 'BP_Generic_Helicopter_C_PolishRollInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_GetDistanceFromTheGround_Distance) == 0x000060, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_GetDistanceFromTheGround_Distance' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_GetDistanceFromTheGround_GotDistance) == 0x000064, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_GetDistanceFromTheGround_GotDistance' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000068, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x000070, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_FClamp_ReturnValue_3) == 0x000074, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Less_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, K2Node_Select_Default) == 0x00007C, "Member 'BP_Generic_Helicopter_C_PolishRollInput::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishRollInput, CallFunc_Multiply_FloatFloat_ReturnValue_8) == 0x000080, "Member 'BP_Generic_Helicopter_C_PolishRollInput::CallFunc_Multiply_FloatFloat_ReturnValue_8' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetDistanceFromTheGround
// 0x0170 (0x0170 - 0x0000)
struct BP_Generic_Helicopter_C_GetDistanceFromTheGround final
{
public:
	float                                         TraceSize;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GotDistance;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_378A[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0010(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0050(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_378B[0x1];                                     // 0x00DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x00F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x00FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0108(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_378C[0x4];                                     // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0128(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x015C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetDistanceFromTheGround) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_GetDistanceFromTheGround");
static_assert(sizeof(BP_Generic_Helicopter_C_GetDistanceFromTheGround) == 0x000170, "Wrong size on BP_Generic_Helicopter_C_GetDistanceFromTheGround");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, TraceSize) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::TraceSize' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, Distance) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::Distance' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, GotDistance) == 0x000008, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::GotDistance' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, Temp_object_Variable) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_GetForwardVector_ReturnValue) == 0x000020, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00002C, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000038, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_Add_VectorVector_ReturnValue) == 0x000044, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_LineTraceSingle_OutHit) == 0x000050, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_LineTraceSingle_ReturnValue) == 0x0000D8, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_bBlockingHit) == 0x0000D9, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000DA, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_Time) == 0x0000DC, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_Distance) == 0x0000E0, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_Location) == 0x0000E4, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_ImpactPoint) == 0x0000F0, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_Normal) == 0x0000FC, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_ImpactNormal) == 0x000108, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_PhysMat) == 0x000118, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_HitActor) == 0x000120, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_HitComponent) == 0x000128, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_HitBoneName) == 0x000130, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_HitItem) == 0x000138, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_ElementIndex) == 0x00013C, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_FaceIndex) == 0x000140, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_TraceStart) == 0x000144, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_BreakHitResult_TraceEnd) == 0x000150, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00015C, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetDistanceFromTheGround, CallFunc_VSize_ReturnValue) == 0x000168, "Member 'BP_Generic_Helicopter_C_GetDistanceFromTheGround::CallFunc_VSize_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.PolishPitchInput
// 0x0048 (0x0048 - 0x0000)
struct BP_Generic_Helicopter_C_PolishPitchInput final
{
public:
	float                                         Temp_float_Variable;                               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_378D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetPitchNormalized_NewParam;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceFromTheGround_Distance;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDistanceFromTheGround_GotDistance;     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_378E[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_378F[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_PolishPitchInput) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_PolishPitchInput");
static_assert(sizeof(BP_Generic_Helicopter_C_PolishPitchInput) == 0x000048, "Wrong size on BP_Generic_Helicopter_C_PolishPitchInput");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, Temp_float_Variable) == 0x000000, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, Temp_bool_Variable) == 0x000004, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_GetPitchNormalized_NewParam) == 0x000008, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_GetPitchNormalized_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000010, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_GetFloatValue_ReturnValue) == 0x000014, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000018, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_FClamp_ReturnValue) == 0x00001C, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000020, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000024, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000028, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_GetDistanceFromTheGround_Distance) == 0x00002C, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_GetDistanceFromTheGround_Distance' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_GetDistanceFromTheGround_GotDistance) == 0x000030, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_GetDistanceFromTheGround_GotDistance' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000034, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_FClamp_ReturnValue_1) == 0x000038, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_Less_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, K2Node_Select_Default) == 0x000040, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PolishPitchInput, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000044, "Member 'BP_Generic_Helicopter_C_PolishPitchInput::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.EnablePhysics
// 0x001C (0x001C - 0x0000)
struct BP_Generic_Helicopter_C_EnablePhysics final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3790[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCurrentRotationalVelocity_ReturnValue; // 0x0004(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentVelocity_ReturnValue;           // 0x0010(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_EnablePhysics) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_EnablePhysics");
static_assert(sizeof(BP_Generic_Helicopter_C_EnablePhysics) == 0x00001C, "Wrong size on BP_Generic_Helicopter_C_EnablePhysics");
static_assert(offsetof(BP_Generic_Helicopter_C_EnablePhysics, bEnable) == 0x000000, "Member 'BP_Generic_Helicopter_C_EnablePhysics::bEnable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_EnablePhysics, CallFunc_GetCurrentRotationalVelocity_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_EnablePhysics::CallFunc_GetCurrentRotationalVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_EnablePhysics, CallFunc_GetCurrentVelocity_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_EnablePhysics::CallFunc_GetCurrentVelocity_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.ResetMovementState
// 0x000C (0x000C - 0x0000)
struct BP_Generic_Helicopter_C_ResetMovementState final
{
public:
	struct FVector                                CallFunc_ConsumeMovementInputVector_ReturnValue;   // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_ResetMovementState) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_ResetMovementState");
static_assert(sizeof(BP_Generic_Helicopter_C_ResetMovementState) == 0x00000C, "Wrong size on BP_Generic_Helicopter_C_ResetMovementState");
static_assert(offsetof(BP_Generic_Helicopter_C_ResetMovementState, CallFunc_ConsumeMovementInputVector_ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_ResetMovementState::CallFunc_ConsumeMovementInputVector_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.SetGroundEffect
// 0x0230 (0x0230 - 0x0000)
struct BP_Generic_Helicopter_C_SetGroundEffect final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HeightCm;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      PhysMat;                                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Altitude;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Thrust;                                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3791[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQPhysicalMaterial*                    K2Node_DynamicCast_AsSQPhysical_Material;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3792[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMainRotorThrust_ReturnValue;           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3793[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3794[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetCurrentVelocity_ReturnValue;           // 0x005C(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0068(0x0010)(ConstParm, ReferenceParm)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x007C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0098(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3795[0x1];                                     // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0144(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3796[0x4];                                     // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult; // 0x01A4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Generic_Helicopter_C_SetGroundEffect) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_SetGroundEffect");
static_assert(sizeof(BP_Generic_Helicopter_C_SetGroundEffect) == 0x000230, "Wrong size on BP_Generic_Helicopter_C_SetGroundEffect");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, Height) == 0x000000, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::Height' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, HeightCm) == 0x000004, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::HeightCm' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, PhysMat) == 0x000008, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, Velocity) == 0x000010, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::Velocity' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, Altitude) == 0x00001C, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::Altitude' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, Thrust) == 0x000020, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::Thrust' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, K2Node_DynamicCast_AsSQPhysical_Material) == 0x000028, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::K2Node_DynamicCast_AsSQPhysical_Material' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_GetMainRotorThrust_ReturnValue) == 0x000034, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_GetMainRotorThrust_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000038, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000040, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000050, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000054, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000058, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_GetCurrentVelocity_ReturnValue) == 0x00005C, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_GetCurrentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, Temp_object_Variable) == 0x000068, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000078, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00007C, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_FClamp_ReturnValue) == 0x000088, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_Add_VectorVector_ReturnValue) == 0x00008C, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_LineTraceSingle_OutHit) == 0x000098, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_LineTraceSingle_ReturnValue) == 0x000120, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_bBlockingHit) == 0x000121, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_bInitialOverlap) == 0x000122, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_Time) == 0x000124, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_Distance) == 0x000128, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_Location) == 0x00012C, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_ImpactPoint) == 0x000138, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_Normal) == 0x000144, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_ImpactNormal) == 0x000150, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_PhysMat) == 0x000160, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_HitActor) == 0x000168, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_HitComponent) == 0x000170, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_HitBoneName) == 0x000178, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_HitItem) == 0x000180, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_ElementIndex) == 0x000184, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_FaceIndex) == 0x000188, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_TraceStart) == 0x00018C, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_BreakHitResult_TraceEnd) == 0x000198, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_SetGroundEffect, CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult) == 0x0001A4, "Member 'BP_Generic_Helicopter_C_SetGroundEffect::CallFunc_K2_SetWorldLocationAndRotation_SweepHitResult' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.DrawDebug
// 0x02D0 (0x02D0 - 0x0000)
struct BP_Generic_Helicopter_C_DrawDebug final
{
public:
	bool                                          Draw;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3797[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetThrustPower_Thrust;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetForwardSpeed_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3798[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0010(0x0018)()
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3799[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue;            // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379A[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_1;           // 0x00C0(0x0018)()
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_1;          // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetRotationDiff_NewParam;                 // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379B[0x4];                                     // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_RotatorToString_ReturnValue;         // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_2;          // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_BoolToString_ReturnValue_3;          // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x01C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_379C[0x4];                                     // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_RotatorToString_ReturnValue_1;       // 0x01F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_16;             // 0x0228(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_17;             // 0x0238(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0248(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentVelocity_ReturnValue;           // 0x0264(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379D[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue_1;        // 0x0278(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379E[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_18;             // 0x0290(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FIntVector                             K2Node_MakeStruct_IntVector;                       // 0x02A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379F[0x4];                                     // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntVectorToString_ReturnValue;       // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_19;             // 0x02C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_DrawDebug) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_DrawDebug");
static_assert(sizeof(BP_Generic_Helicopter_C_DrawDebug) == 0x0002D0, "Wrong size on BP_Generic_Helicopter_C_DrawDebug");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, Draw) == 0x000000, "Member 'BP_Generic_Helicopter_C_DrawDebug::Draw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_GetThrustPower_Thrust) == 0x000004, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_GetThrustPower_Thrust' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_GetForwardSpeed_ReturnValue) == 0x000008, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_GetForwardSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_FloatToText_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_TextToString_ReturnValue) == 0x000030, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_FloatToString_ReturnValue) == 0x000040, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue) == 0x000050, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000060, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000070, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000080, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000090, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_BreakVector_X) == 0x00009C, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_BreakVector_Y) == 0x0000A0, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_BreakVector_Z) == 0x0000A4, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_BoolToString_ReturnValue) == 0x0000A8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_BoolToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000B8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_FloatToText_ReturnValue_1) == 0x0000C0, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_FloatToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_BoolToString_ReturnValue_1) == 0x0000D8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_BoolToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_TextToString_ReturnValue_1) == 0x0000E8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_GetRotationDiff_NewParam) == 0x0000F8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_GetRotationDiff_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000108, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_RotatorToString_ReturnValue) == 0x000118, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_RotatorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000128, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000138, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000148, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_8) == 0x000158, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_BoolToString_ReturnValue_2) == 0x000168, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_BoolToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_BoolToString_ReturnValue_3) == 0x000178, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_BoolToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_VectorToString_ReturnValue) == 0x000188, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000198, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_10) == 0x0001A8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_11) == 0x0001B8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_12) == 0x0001C8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0001D8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_13) == 0x0001E8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_RotatorToString_ReturnValue_1) == 0x0001F8, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_RotatorToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_14) == 0x000208, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_15) == 0x000218, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_16) == 0x000228, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_17) == 0x000238, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000248, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_BreakVector_X_1) == 0x000254, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_BreakVector_Y_1) == 0x000258, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_BreakVector_Z_1) == 0x00025C, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_FTrunc_ReturnValue) == 0x000260, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_GetCurrentVelocity_ReturnValue) == 0x000264, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_GetCurrentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_FTrunc_ReturnValue_1) == 0x000270, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_VectorToString_ReturnValue_1) == 0x000278, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_VectorToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_FTrunc_ReturnValue_2) == 0x000288, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_18) == 0x000290, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, K2Node_MakeStruct_IntVector) == 0x0002A0, "Member 'BP_Generic_Helicopter_C_DrawDebug::K2Node_MakeStruct_IntVector' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Conv_IntVectorToString_ReturnValue) == 0x0002B0, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Conv_IntVectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebug, CallFunc_Concat_StrStr_ReturnValue_19) == 0x0002C0, "Member 'BP_Generic_Helicopter_C_DrawDebug::CallFunc_Concat_StrStr_ReturnValue_19' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetRotationDiff
// 0x003C (0x003C - 0x0000)
struct BP_Generic_Helicopter_C_GetRotationDiff final
{
public:
	struct FRotator                               NewParam;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetRotationDiff) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetRotationDiff");
static_assert(sizeof(BP_Generic_Helicopter_C_GetRotationDiff) == 0x00003C, "Wrong size on BP_Generic_Helicopter_C_GetRotationDiff");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, NewParam) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, CallFunc_BreakRotator_Roll) == 0x00000C, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, CallFunc_BreakRotator_Pitch) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, CallFunc_BreakRotator_Yaw) == 0x000014, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, CallFunc_BreakRotator_Roll_1) == 0x000018, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, CallFunc_BreakRotator_Pitch_1) == 0x00001C, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, CallFunc_BreakRotator_Yaw_1) == 0x000020, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000028, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x00002C, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotationDiff, CallFunc_MakeRotator_ReturnValue) == 0x000030, "Member 'BP_Generic_Helicopter_C_GetRotationDiff::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.DebugVariablesMap
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Generic_Helicopter_C_DebugVariablesMap final
{
public:
	TMap<class FString, class FString>            Map;                                               // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FColor                                 Color;                                             // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A0[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CallFunc_Map_Keys_Keys;                            // 0x0058(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Array_Get_Item;                           // 0x0070(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Map_Find_Value;                           // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A1[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A2[0x3];                                     // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_DebugVariablesMap) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_DebugVariablesMap");
static_assert(sizeof(BP_Generic_Helicopter_C_DebugVariablesMap) == 0x0000C0, "Wrong size on BP_Generic_Helicopter_C_DebugVariablesMap");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, Map) == 0x000000, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::Map' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, Color) == 0x000050, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::Color' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, CallFunc_Map_Keys_Keys) == 0x000058, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, Temp_int_Array_Index_Variable) == 0x000068, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, CallFunc_Array_Get_Item) == 0x000070, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, CallFunc_Concat_StrStr_ReturnValue) == 0x000080, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, CallFunc_Map_Find_Value) == 0x000090, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, CallFunc_Map_Find_ReturnValue) == 0x0000A0, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, Temp_int_Loop_Counter_Variable) == 0x0000A4, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000A8, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, CallFunc_Less_IntInt_ReturnValue) == 0x0000B8, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVariablesMap, CallFunc_Add_IntInt_ReturnValue) == 0x0000BC, "Member 'BP_Generic_Helicopter_C_DebugVariablesMap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetThrustPower
// 0x000C (0x000C - 0x0000)
struct BP_Generic_Helicopter_C_GetThrustPower final
{
public:
	float                                         Thrust;                                            // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHealthy_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetThrustPower) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetThrustPower");
static_assert(sizeof(BP_Generic_Helicopter_C_GetThrustPower) == 0x00000C, "Wrong size on BP_Generic_Helicopter_C_GetThrustPower");
static_assert(offsetof(BP_Generic_Helicopter_C_GetThrustPower, Thrust) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetThrustPower::Thrust' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetThrustPower, CallFunc_IsHealthy_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetThrustPower::CallFunc_IsHealthy_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetThrustPower, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'BP_Generic_Helicopter_C_GetThrustPower::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.PilotZoom
// 0x00C8 (0x00C8 - 0x0000)
struct BP_Generic_Helicopter_C_PilotZoom final
{
public:
	float                                         InputPin;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIsUsingFreeLook_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A4[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue_1;       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0040(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Generic_Helicopter_C_PilotZoom) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_PilotZoom");
static_assert(sizeof(BP_Generic_Helicopter_C_PilotZoom) == 0x0000C8, "Wrong size on BP_Generic_Helicopter_C_PilotZoom");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, InputPin) == 0x000000, "Member 'BP_Generic_Helicopter_C_PilotZoom::InputPin' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, CallFunc_FClamp_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_PilotZoom::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, CallFunc_Lerp_ReturnValue) == 0x000008, "Member 'BP_Generic_Helicopter_C_PilotZoom::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x00000C, "Member 'BP_Generic_Helicopter_C_PilotZoom::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, CallFunc_ComposeRotators_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_PilotZoom::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, CallFunc_RLerp_ReturnValue) == 0x00001C, "Member 'BP_Generic_Helicopter_C_PilotZoom::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, CallFunc_GetIsUsingFreeLook_ReturnValue) == 0x000028, "Member 'BP_Generic_Helicopter_C_PilotZoom::CallFunc_GetIsUsingFreeLook_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, CallFunc_GetWorldDeltaSeconds_ReturnValue_1) == 0x00002C, "Member 'BP_Generic_Helicopter_C_PilotZoom::CallFunc_GetWorldDeltaSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, CallFunc_FInterpTo_ReturnValue) == 0x000030, "Member 'BP_Generic_Helicopter_C_PilotZoom::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, CallFunc_RInterpTo_ReturnValue) == 0x000034, "Member 'BP_Generic_Helicopter_C_PilotZoom::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_PilotZoom, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000040, "Member 'BP_Generic_Helicopter_C_PilotZoom::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.DoStabilizers
// 0x00F0 (0x00F0 - 0x0000)
struct BP_Generic_Helicopter_C_DoStabilizers final
{
public:
	struct FVector                                VelocityXY;                                        // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentVelocity_ReturnValue;           // 0x0018(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentVelocity_ReturnValue_1;         // 0x0048(0x000C)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NegateRotator_ReturnValue;                // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromX_ReturnValue;                 // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_VSizeXY_ReturnValue;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A5[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x00B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A6[0x4];                                     // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_Constant_ReturnValue;           // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_DoStabilizers) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_DoStabilizers");
static_assert(sizeof(BP_Generic_Helicopter_C_DoStabilizers) == 0x0000F0, "Wrong size on BP_Generic_Helicopter_C_DoStabilizers");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, VelocityXY) == 0x000000, "Member 'BP_Generic_Helicopter_C_DoStabilizers::VelocityXY' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_GetCurrentVelocity_ReturnValue) == 0x000018, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_GetCurrentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_Add_VectorVector_ReturnValue) == 0x000024, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_Normal_ReturnValue) == 0x000030, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x00003C, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_GetCurrentVelocity_ReturnValue_1) == 0x000048, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_GetCurrentVelocity_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000054, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000060, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_NegateRotator_ReturnValue) == 0x00006C, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_NegateRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x000078, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_MakeRotFromX_ReturnValue) == 0x000084, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_MakeRotFromX_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_VSizeXY_ReturnValue) == 0x000090, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_VSizeXY_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_BreakRotator_Roll) == 0x000094, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_BreakRotator_Pitch) == 0x000098, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_BreakRotator_Yaw) == 0x00009C, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000A0, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_Conv_FloatToString_ReturnValue) == 0x0000A8, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_GetVectorValue_ReturnValue) == 0x0000B8, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_Concat_StrStr_ReturnValue) == 0x0000C8, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_BreakVector_X) == 0x0000D8, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_BreakVector_Y) == 0x0000DC, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_BreakVector_Z) == 0x0000E0, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_GetFloatValue_ReturnValue) == 0x0000E4, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x0000E8, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoStabilizers, CallFunc_FInterpTo_Constant_ReturnValue) == 0x0000EC, "Member 'BP_Generic_Helicopter_C_DoStabilizers::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.CheckPhysics
// 0x0008 (0x0008 - 0x0000)
struct BP_Generic_Helicopter_C_CheckPhysics final
{
public:
	bool                                          CallFunc_IsHealthy_ReturnValue;                    // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHealthy_ReturnValue_1;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPhysicsEnabled_ReturnValue;             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_CheckPhysics) == 0x000001, "Wrong alignment on BP_Generic_Helicopter_C_CheckPhysics");
static_assert(sizeof(BP_Generic_Helicopter_C_CheckPhysics) == 0x000008, "Wrong size on BP_Generic_Helicopter_C_CheckPhysics");
static_assert(offsetof(BP_Generic_Helicopter_C_CheckPhysics, CallFunc_IsHealthy_ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_CheckPhysics::CallFunc_IsHealthy_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CheckPhysics, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_Generic_Helicopter_C_CheckPhysics::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CheckPhysics, CallFunc_Not_PreBool_ReturnValue_1) == 0x000002, "Member 'BP_Generic_Helicopter_C_CheckPhysics::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CheckPhysics, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'BP_Generic_Helicopter_C_CheckPhysics::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CheckPhysics, CallFunc_IsHealthy_ReturnValue_1) == 0x000004, "Member 'BP_Generic_Helicopter_C_CheckPhysics::CallFunc_IsHealthy_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CheckPhysics, CallFunc_IsPhysicsEnabled_ReturnValue) == 0x000005, "Member 'BP_Generic_Helicopter_C_CheckPhysics::CallFunc_IsPhysicsEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CheckPhysics, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'BP_Generic_Helicopter_C_CheckPhysics::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_CheckPhysics, CallFunc_HasAuthority_ReturnValue) == 0x000007, "Member 'BP_Generic_Helicopter_C_CheckPhysics::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.DrawDebugLocation
// 0x0090 (0x0090 - 0x0000)
struct BP_Generic_Helicopter_C_DrawDebugLocation final
{
public:
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A7[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0020(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A8[0x4];                                     // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_DrawDebugLocation) == 0x000010, "Wrong alignment on BP_Generic_Helicopter_C_DrawDebugLocation");
static_assert(sizeof(BP_Generic_Helicopter_C_DrawDebugLocation) == 0x000090, "Wrong size on BP_Generic_Helicopter_C_DrawDebugLocation");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebugLocation, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_DrawDebugLocation::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebugLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x00000C, "Member 'BP_Generic_Helicopter_C_DrawDebugLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebugLocation, CallFunc_MakeTransform_ReturnValue) == 0x000020, "Member 'BP_Generic_Helicopter_C_DrawDebugLocation::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebugLocation, CallFunc_BreakTransform_Location) == 0x000050, "Member 'BP_Generic_Helicopter_C_DrawDebugLocation::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebugLocation, CallFunc_BreakTransform_Rotation) == 0x00005C, "Member 'BP_Generic_Helicopter_C_DrawDebugLocation::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebugLocation, CallFunc_BreakTransform_Scale) == 0x000068, "Member 'BP_Generic_Helicopter_C_DrawDebugLocation::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebugLocation, CallFunc_Conv_VectorToString_ReturnValue) == 0x000078, "Member 'BP_Generic_Helicopter_C_DrawDebugLocation::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DrawDebugLocation, CallFunc_HasAuthority_ReturnValue) == 0x000088, "Member 'BP_Generic_Helicopter_C_DrawDebugLocation::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.Manage Landing Camera
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Generic_Helicopter_C_Manage_Landing_Camera final
{
public:
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Using_Landing_Camera_Using_Landing_Camera; // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37A9[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0028(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Generic_Helicopter_C_Manage_Landing_Camera) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_Manage_Landing_Camera");
static_assert(sizeof(BP_Generic_Helicopter_C_Manage_Landing_Camera) == 0x0000B0, "Wrong size on BP_Generic_Helicopter_C_Manage_Landing_Camera");
static_assert(offsetof(BP_Generic_Helicopter_C_Manage_Landing_Camera, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_Manage_Landing_Camera::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_Manage_Landing_Camera, CallFunc_BreakRotator_Roll) == 0x00000C, "Member 'BP_Generic_Helicopter_C_Manage_Landing_Camera::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_Manage_Landing_Camera, CallFunc_BreakRotator_Pitch) == 0x000010, "Member 'BP_Generic_Helicopter_C_Manage_Landing_Camera::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_Manage_Landing_Camera, CallFunc_BreakRotator_Yaw) == 0x000014, "Member 'BP_Generic_Helicopter_C_Manage_Landing_Camera::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_Manage_Landing_Camera, CallFunc_MakeRotator_ReturnValue) == 0x000018, "Member 'BP_Generic_Helicopter_C_Manage_Landing_Camera::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_Manage_Landing_Camera, CallFunc_Is_Using_Landing_Camera_Using_Landing_Camera) == 0x000024, "Member 'BP_Generic_Helicopter_C_Manage_Landing_Camera::CallFunc_Is_Using_Landing_Camera_Using_Landing_Camera' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_Manage_Landing_Camera, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000028, "Member 'BP_Generic_Helicopter_C_Manage_Landing_Camera::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.DebugVectorToString
// 0x0170 (0x0170 - 0x0000)
struct BP_Generic_Helicopter_C_DebugVectorToString final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Digits;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37AA[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue;             // 0x0030(0x0018)()
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_1;           // 0x0048(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00A0(0x0040)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_FloatToText_ReturnValue_2;           // 0x00E0(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00F8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0138(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0148(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_DebugVectorToString) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_DebugVectorToString");
static_assert(sizeof(BP_Generic_Helicopter_C_DebugVectorToString) == 0x000170, "Wrong size on BP_Generic_Helicopter_C_DebugVectorToString");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, Vector) == 0x000000, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::Vector' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, Digits) == 0x00000C, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::Digits' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, String) == 0x000010, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::String' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, CallFunc_BreakVector_X) == 0x000020, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, CallFunc_BreakVector_Y) == 0x000024, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, CallFunc_BreakVector_Z) == 0x000028, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, CallFunc_Conv_FloatToText_ReturnValue) == 0x000030, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::CallFunc_Conv_FloatToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, CallFunc_Conv_FloatToText_ReturnValue_1) == 0x000048, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::CallFunc_Conv_FloatToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000A0, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, CallFunc_Conv_FloatToText_ReturnValue_2) == 0x0000E0, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::CallFunc_Conv_FloatToText_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000F8, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, K2Node_MakeArray_Array) == 0x000138, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, CallFunc_Format_ReturnValue) == 0x000148, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DebugVectorToString, CallFunc_Conv_TextToString_ReturnValue) == 0x000160, "Member 'BP_Generic_Helicopter_C_DebugVectorToString::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.DoRotationFromRoll
// 0x0048 (0x0048 - 0x0000)
struct BP_Generic_Helicopter_C_DoRotationFromRoll final
{
public:
	float                                         CallFunc_GetRollNormalized_NewParam;               // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVectorValue_ReturnValue;               // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetForwardSpeed_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_DoRotationFromRoll) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_DoRotationFromRoll");
static_assert(sizeof(BP_Generic_Helicopter_C_DoRotationFromRoll) == 0x000048, "Wrong size on BP_Generic_Helicopter_C_DoRotationFromRoll");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_GetRollNormalized_NewParam) == 0x000000, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_GetRollNormalized_NewParam' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_GetVectorValue_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_GetVectorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_GetForwardSpeed_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_GetForwardSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000024, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000030, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_BreakVector_X) == 0x00003C, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_BreakVector_Y) == 0x000040, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotationFromRoll, CallFunc_BreakVector_Z) == 0x000044, "Member 'BP_Generic_Helicopter_C_DoRotationFromRoll::CallFunc_BreakVector_Z' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.DoRotors
// 0x0078 (0x0078 - 0x0000)
struct BP_Generic_Helicopter_C_DoRotors final
{
public:
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeSeconds_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37AB[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue;             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37AC[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_DegreesToRadians_ReturnValue;             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDestroyed_ReturnValue;                  // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37AD[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_SlerpToUpSideDown_ReturnValue;            // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeLiteralFloat_ReturnValue_1;           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_7;        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_DoRotors) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_DoRotors");
static_assert(sizeof(BP_Generic_Helicopter_C_DoRotors) == 0x000078, "Wrong size on BP_Generic_Helicopter_C_DoRotors");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_GetTimeSeconds_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_GetTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_SelectFloat_ReturnValue) == 0x00000C, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_MakeLiteralFloat_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_MakeLiteralFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000018, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000024, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_FClamp_ReturnValue) == 0x000028, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_DegreesToRadians_ReturnValue) == 0x00002C, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_DegreesToRadians_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000030, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_IsDestroyed_ReturnValue) == 0x000034, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_IsDestroyed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_SlerpToUpSideDown_ReturnValue) == 0x000038, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_SlerpToUpSideDown_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_BreakRotator_Roll) == 0x000044, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_BreakRotator_Pitch) == 0x000048, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_BreakRotator_Yaw) == 0x00004C, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_MakeLiteralFloat_ReturnValue_1) == 0x000050, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_MakeLiteralFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000054, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_SelectFloat_ReturnValue_1) == 0x000058, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x00005C, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000060, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Multiply_FloatFloat_ReturnValue_7) == 0x000064, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Multiply_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Add_FloatFloat_ReturnValue) == 0x000068, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_FClamp_ReturnValue_1) == 0x000070, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_DoRotors, CallFunc_SelectFloat_ReturnValue_2) == 0x000074, "Member 'BP_Generic_Helicopter_C_DoRotors::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.Set UI Enabled
// 0x0001 (0x0001 - 0x0000)
struct BP_Generic_Helicopter_C_Set_UI_Enabled final
{
public:
	bool                                          Enable_UI;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_Set_UI_Enabled) == 0x000001, "Wrong alignment on BP_Generic_Helicopter_C_Set_UI_Enabled");
static_assert(sizeof(BP_Generic_Helicopter_C_Set_UI_Enabled) == 0x000001, "Wrong size on BP_Generic_Helicopter_C_Set_UI_Enabled");
static_assert(offsetof(BP_Generic_Helicopter_C_Set_UI_Enabled, Enable_UI) == 0x000000, "Member 'BP_Generic_Helicopter_C_Set_UI_Enabled::Enable_UI' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetVisualCollective
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_GetVisualCollective final
{
public:
	float                                         Collectives;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetVisualCollective) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetVisualCollective");
static_assert(sizeof(BP_Generic_Helicopter_C_GetVisualCollective) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_GetVisualCollective");
static_assert(offsetof(BP_Generic_Helicopter_C_GetVisualCollective, Collectives) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetVisualCollective::Collectives' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.HAT Look To
// 0x0100 (0x0100 - 0x0000)
struct BP_Generic_Helicopter_C_HAT_Look_To final
{
public:
	float                                         CallFunc_BreakVector2D_X;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetIsUsingFreeLook_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37AE[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37AF[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQGameUserSettings*                    CallFunc_GetSquadGameUserSettings_ReturnValue;     // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37B0[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetPitchLimits_ReturnValue;               // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37B1[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetYawLimits_ReturnValue;                 // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37B2[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector2D_X_2;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_2;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0054(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_3;                        // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_3;                        // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0078(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Generic_Helicopter_C_HAT_Look_To) == 0x000008, "Wrong alignment on BP_Generic_Helicopter_C_HAT_Look_To");
static_assert(sizeof(BP_Generic_Helicopter_C_HAT_Look_To) == 0x000100, "Wrong size on BP_Generic_Helicopter_C_HAT_Look_To");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_BreakVector2D_X) == 0x000000, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_BreakVector2D_Y) == 0x000004, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_GetIsUsingFreeLook_ReturnValue) == 0x000008, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_GetIsUsingFreeLook_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_Add_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_Abs_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_GetSquadGameUserSettings_ReturnValue) == 0x000018, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_GetSquadGameUserSettings_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_GetPitchLimits_ReturnValue) == 0x000024, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_GetPitchLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_BooleanOR_ReturnValue) == 0x00002C, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_BreakVector2D_X_1) == 0x000030, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_BreakVector2D_Y_1) == 0x000034, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_Abs_ReturnValue_1) == 0x000038, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_GetYawLimits_ReturnValue) == 0x00003C, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_GetYawLimits_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_IsDedicatedServer_ReturnValue) == 0x000044, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_BreakVector2D_X_2) == 0x000048, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_BreakVector2D_Y_2) == 0x00004C, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_Abs_ReturnValue_2) == 0x000050, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_MakeVector2D_ReturnValue) == 0x000054, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x00005C, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_BreakVector2D_X_3) == 0x000064, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_BreakVector2D_Y_3) == 0x000068, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_MakeRotator_ReturnValue) == 0x00006C, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_HAT_Look_To, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000078, "Member 'BP_Generic_Helicopter_C_HAT_Look_To::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetKnots
// 0x0018 (0x0018 - 0x0000)
struct BP_Generic_Helicopter_C_GetKnots final
{
public:
	float                                         Knots;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetKnots) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetKnots");
static_assert(sizeof(BP_Generic_Helicopter_C_GetKnots) == 0x000018, "Wrong size on BP_Generic_Helicopter_C_GetKnots");
static_assert(offsetof(BP_Generic_Helicopter_C_GetKnots, Knots) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetKnots::Knots' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetKnots, CallFunc_GetVelocity_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetKnots::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetKnots, CallFunc_VSize_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetKnots::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetKnots, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_Generic_Helicopter_C_GetKnots::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.Get UI Tint
// 0x0010 (0x0010 - 0x0000)
struct BP_Generic_Helicopter_C_Get_UI_Tint final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_Get_UI_Tint) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_Get_UI_Tint");
static_assert(sizeof(BP_Generic_Helicopter_C_Get_UI_Tint) == 0x000010, "Wrong size on BP_Generic_Helicopter_C_Get_UI_Tint");
static_assert(offsetof(BP_Generic_Helicopter_C_Get_UI_Tint, Color) == 0x000000, "Member 'BP_Generic_Helicopter_C_Get_UI_Tint::Color' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.Is Using Landing Camera
// 0x0002 (0x0002 - 0x0000)
struct BP_Generic_Helicopter_C_Is_Using_Landing_Camera final
{
public:
	bool                                          Using_Landing_Camera;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsActive_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_Is_Using_Landing_Camera) == 0x000001, "Wrong alignment on BP_Generic_Helicopter_C_Is_Using_Landing_Camera");
static_assert(sizeof(BP_Generic_Helicopter_C_Is_Using_Landing_Camera) == 0x000002, "Wrong size on BP_Generic_Helicopter_C_Is_Using_Landing_Camera");
static_assert(offsetof(BP_Generic_Helicopter_C_Is_Using_Landing_Camera, Using_Landing_Camera) == 0x000000, "Member 'BP_Generic_Helicopter_C_Is_Using_Landing_Camera::Using_Landing_Camera' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_Is_Using_Landing_Camera, CallFunc_IsActive_ReturnValue) == 0x000001, "Member 'BP_Generic_Helicopter_C_Is_Using_Landing_Camera::CallFunc_IsActive_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetMaxRPM
// 0x0004 (0x0004 - 0x0000)
struct BP_Generic_Helicopter_C_GetMaxRPM final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetMaxRPM) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetMaxRPM");
static_assert(sizeof(BP_Generic_Helicopter_C_GetMaxRPM) == 0x000004, "Wrong size on BP_Generic_Helicopter_C_GetMaxRPM");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMaxRPM, ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetMaxRPM::ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.IsLanded
// 0x0001 (0x0001 - 0x0000)
struct BP_Generic_Helicopter_C_IsLanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Generic_Helicopter_C_IsLanded) == 0x000001, "Wrong alignment on BP_Generic_Helicopter_C_IsLanded");
static_assert(sizeof(BP_Generic_Helicopter_C_IsLanded) == 0x000001, "Wrong size on BP_Generic_Helicopter_C_IsLanded");
static_assert(offsetof(BP_Generic_Helicopter_C_IsLanded, ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_IsLanded::ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetEngineThrust
// 0x001C (0x001C - 0x0000)
struct BP_Generic_Helicopter_C_GetEngineThrust final
{
public:
	float                                         EngineThrust;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDestroyed_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37B3[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNormalizedHealth_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetEngineThrust) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetEngineThrust");
static_assert(sizeof(BP_Generic_Helicopter_C_GetEngineThrust) == 0x00001C, "Wrong size on BP_Generic_Helicopter_C_GetEngineThrust");
static_assert(offsetof(BP_Generic_Helicopter_C_GetEngineThrust, EngineThrust) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetEngineThrust::EngineThrust' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetEngineThrust, CallFunc_IsDestroyed_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetEngineThrust::CallFunc_IsDestroyed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetEngineThrust, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'BP_Generic_Helicopter_C_GetEngineThrust::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetEngineThrust, CallFunc_GetNormalizedHealth_ReturnValue) == 0x00000C, "Member 'BP_Generic_Helicopter_C_GetEngineThrust::CallFunc_GetNormalizedHealth_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetEngineThrust, CallFunc_GetFloatValue_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetEngineThrust::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetEngineThrust, CallFunc_FClamp_ReturnValue) == 0x000014, "Member 'BP_Generic_Helicopter_C_GetEngineThrust::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetEngineThrust, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_Generic_Helicopter_C_GetEngineThrust::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetTailRotorThrust
// 0x0014 (0x0014 - 0x0000)
struct BP_Generic_Helicopter_C_GetTailRotorThrust final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEngineThrust_EngineThrust;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHealthy_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37B4[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetTailRotorThrust) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetTailRotorThrust");
static_assert(sizeof(BP_Generic_Helicopter_C_GetTailRotorThrust) == 0x000014, "Wrong size on BP_Generic_Helicopter_C_GetTailRotorThrust");
static_assert(offsetof(BP_Generic_Helicopter_C_GetTailRotorThrust, ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetTailRotorThrust::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetTailRotorThrust, CallFunc_GetEngineThrust_EngineThrust) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetTailRotorThrust::CallFunc_GetEngineThrust_EngineThrust' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetTailRotorThrust, CallFunc_IsHealthy_ReturnValue) == 0x000008, "Member 'BP_Generic_Helicopter_C_GetTailRotorThrust::CallFunc_IsHealthy_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetTailRotorThrust, CallFunc_SelectFloat_ReturnValue) == 0x00000C, "Member 'BP_Generic_Helicopter_C_GetTailRotorThrust::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetTailRotorThrust, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetTailRotorThrust::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetMainRotorThrust
// 0x0028 (0x0028 - 0x0000)
struct BP_Generic_Helicopter_C_GetMainRotorThrust final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37B5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRotorEfficiency_Efficiency;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDestroyed_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsHealthy_ReturnValue;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37B6[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEngineThrust_EngineThrust;             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetMainRotorThrust) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetMainRotorThrust");
static_assert(sizeof(BP_Generic_Helicopter_C_GetMainRotorThrust) == 0x000028, "Wrong size on BP_Generic_Helicopter_C_GetMainRotorThrust");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, Temp_bool_Variable) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, Temp_float_Variable) == 0x000008, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, CallFunc_GetRotorEfficiency_Efficiency) == 0x00000C, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::CallFunc_GetRotorEfficiency_Efficiency' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, CallFunc_IsDestroyed_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::CallFunc_IsDestroyed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, CallFunc_IsHealthy_ReturnValue) == 0x000011, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::CallFunc_IsHealthy_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, CallFunc_SelectFloat_ReturnValue) == 0x000014, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, CallFunc_GetEngineThrust_EngineThrust) == 0x000018, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::CallFunc_GetEngineThrust_EngineThrust' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00001C, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, K2Node_Select_Default) == 0x000020, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetMainRotorThrust, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000024, "Member 'BP_Generic_Helicopter_C_GetMainRotorThrust::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetThrottle
// 0x0008 (0x0008 - 0x0000)
struct BP_Generic_Helicopter_C_GetThrottle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEngineThrust_EngineThrust;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetThrottle) == 0x000004, "Wrong alignment on BP_Generic_Helicopter_C_GetThrottle");
static_assert(sizeof(BP_Generic_Helicopter_C_GetThrottle) == 0x000008, "Wrong size on BP_Generic_Helicopter_C_GetThrottle");
static_assert(offsetof(BP_Generic_Helicopter_C_GetThrottle, ReturnValue) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetThrottle::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetThrottle, CallFunc_GetEngineThrust_EngineThrust) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetThrottle::CallFunc_GetEngineThrust_EngineThrust' has a wrong offset!");

// Function BP_Generic_Helicopter.BP_Generic_Helicopter_C.GetRotorEfficiency
// 0x0090 (0x0090 - 0x0000)
struct BP_Generic_Helicopter_C_GetRotorEfficiency final
{
public:
	float                                         Efficiency;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37B7[0xB];                                     // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetComponentVelocity_ReturnValue;         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue_1;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Generic_Helicopter_C_GetRotorEfficiency) == 0x000010, "Wrong alignment on BP_Generic_Helicopter_C_GetRotorEfficiency");
static_assert(sizeof(BP_Generic_Helicopter_C_GetRotorEfficiency) == 0x000090, "Wrong size on BP_Generic_Helicopter_C_GetRotorEfficiency");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, Efficiency) == 0x000000, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::Efficiency' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000010, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_GetComponentVelocity_ReturnValue) == 0x000040, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_GetComponentVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_VSize_ReturnValue) == 0x00004C, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_InverseTransformDirection_ReturnValue) == 0x000050, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00005C, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_Normal_ReturnValue) == 0x000060, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_GetFloatValue_ReturnValue) == 0x00006C, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_BreakVector_X) == 0x000070, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_BreakVector_Y) == 0x000074, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_BreakVector_Z) == 0x000078, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_MapRangeClamped_ReturnValue) == 0x00007C, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_GetFloatValue_ReturnValue_1) == 0x000080, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_GetFloatValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000084, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Generic_Helicopter_C_GetRotorEfficiency, CallFunc_FClamp_ReturnValue) == 0x000088, "Member 'BP_Generic_Helicopter_C_GetRotorEfficiency::CallFunc_FClamp_ReturnValue' has a wrong offset!");

}

