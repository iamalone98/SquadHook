#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JoystickPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum JoystickPlugin.EJoystickPOVDirection
// NumValues: 0x000A
enum class EJoystickPOVDirection : uint8
{
	DIRECTION_NONE                           = 0,
	DIRECTION_UP                             = 1,
	DIRECTION_UP_RIGHT                       = 2,
	DIRECTION_RIGHT                          = 3,
	DIRECTION_DOWN_RIGHT                     = 4,
	DIRECTION_DOWN                           = 5,
	DIRECTION_DOWN_LEFT                      = 6,
	DIRECTION_LEFT                           = 7,
	DIRECTION_UP_LEFT                        = 8,
	DIRECTION_MAX                            = 9,
};

// Enum JoystickPlugin.EInputType
// NumValues: 0x0004
enum class EInputType : uint8
{
	INPUTTYPE_UNKNOWN                        = 0,
	INPUTTYPE_JOYSTICK                       = 1,
	INPUTTYPE_GAMECONTROLLER                 = 2,
	INPUTTYPE_MAX                            = 3,
};

// ScriptStruct JoystickPlugin.JoystickInfo
// 0x0058 (0x0058 - 0x0000)
struct FJoystickInfo final
{
public:
	int32                                         Player;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviceID;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRumbleDevice;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE3[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  ProductId;                                         // 0x000C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE4[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProductName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Connected;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE5[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EInputType>                            InputType;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJoystickInfo) == 0x000008, "Wrong alignment on FJoystickInfo");
static_assert(sizeof(FJoystickInfo) == 0x000058, "Wrong size on FJoystickInfo");
static_assert(offsetof(FJoystickInfo, Player) == 0x000000, "Member 'FJoystickInfo::Player' has a wrong offset!");
static_assert(offsetof(FJoystickInfo, DeviceID) == 0x000004, "Member 'FJoystickInfo::DeviceID' has a wrong offset!");
static_assert(offsetof(FJoystickInfo, IsRumbleDevice) == 0x000008, "Member 'FJoystickInfo::IsRumbleDevice' has a wrong offset!");
static_assert(offsetof(FJoystickInfo, ProductId) == 0x00000C, "Member 'FJoystickInfo::ProductId' has a wrong offset!");
static_assert(offsetof(FJoystickInfo, ProductName) == 0x000020, "Member 'FJoystickInfo::ProductName' has a wrong offset!");
static_assert(offsetof(FJoystickInfo, DeviceName) == 0x000030, "Member 'FJoystickInfo::DeviceName' has a wrong offset!");
static_assert(offsetof(FJoystickInfo, Connected) == 0x000040, "Member 'FJoystickInfo::Connected' has a wrong offset!");
static_assert(offsetof(FJoystickInfo, InputType) == 0x000048, "Member 'FJoystickInfo::InputType' has a wrong offset!");

// ScriptStruct JoystickPlugin.JoystickState
// 0x0048 (0x0048 - 0x0000)
struct FJoystickState final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 Axes;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<bool>                                  Buttons;                                           // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EJoystickPOVDirection>                 Hats;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      Balls;                                             // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FJoystickState) == 0x000008, "Wrong alignment on FJoystickState");
static_assert(sizeof(FJoystickState) == 0x000048, "Wrong size on FJoystickState");
static_assert(offsetof(FJoystickState, DeviceID) == 0x000000, "Member 'FJoystickState::DeviceID' has a wrong offset!");
static_assert(offsetof(FJoystickState, Axes) == 0x000008, "Member 'FJoystickState::Axes' has a wrong offset!");
static_assert(offsetof(FJoystickState, Buttons) == 0x000018, "Member 'FJoystickState::Buttons' has a wrong offset!");
static_assert(offsetof(FJoystickState, Hats) == 0x000028, "Member 'FJoystickState::Hats' has a wrong offset!");
static_assert(offsetof(FJoystickState, Balls) == 0x000038, "Member 'FJoystickState::Balls' has a wrong offset!");

}

