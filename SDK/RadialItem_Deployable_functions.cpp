#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RadialItem_Deployable

#include "Basic.hpp"

#include "RadialItem_Deployable_classes.hpp"
#include "RadialItem_Deployable_parameters.hpp"


namespace SDK
{

// Function RadialItem_Deployable.RadialItem_Deployable_C.ExecuteUbergraph_RadialItem_Deployable
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadialItem_Deployable_C::ExecuteUbergraph_RadialItem_Deployable(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "ExecuteUbergraph_RadialItem_Deployable");

	Params::RadialItem_Deployable_C_ExecuteUbergraph_RadialItem_Deployable Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void URadialItem_Deployable_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "Tick");

	Params::RadialItem_Deployable_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.RefreshStatus
// (BlueprintCallable, BlueprintEvent)

void URadialItem_Deployable_C::RefreshStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "RefreshStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.OnHoverBegin
// (Event, Public, BlueprintCallable, BlueprintEvent)

void URadialItem_Deployable_C::OnHoverBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "OnHoverBegin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.BPInit
// (Event, Public, BlueprintEvent)

void URadialItem_Deployable_C::BPInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "BPInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.UpdateAvailabilityStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void URadialItem_Deployable_C::UpdateAvailabilityStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "UpdateAvailabilityStatus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.IsAvailable
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool URadialItem_Deployable_C::IsAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "IsAvailable");

	Params::RadialItem_Deployable_C_IsAvailable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.GetDetailText
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             DetailText                                             (Parm, OutParm)

void URadialItem_Deployable_C::GetDetailText(class FText* DetailText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "GetDetailText");

	Params::RadialItem_Deployable_C_GetDetailText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DetailText != nullptr)
		*DetailText = std::move(Parms.DetailText);
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.ConvertTimerToText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        InTimespan                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText URadialItem_Deployable_C::ConvertTimerToText(const struct FTimespan& InTimespan) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "ConvertTimerToText");

	Params::RadialItem_Deployable_C_ConvertTimerToText Parms{};

	Parms.InTimespan = std::move(InTimespan);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.GetTimerText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FSQAvailabilityState             SQAvailabilityState                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText URadialItem_Deployable_C::GetTimerText(const struct FSQAvailabilityState& SQAvailabilityState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "GetTimerText");

	Params::RadialItem_Deployable_C_GetTimerText Parms{};

	Parms.SQAvailabilityState = std::move(SQAvailabilityState);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.GetAvailabilityText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FSQAvailabilityState             SQAvailabilityState                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    In_HasLimitedCount                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText URadialItem_Deployable_C::GetAvailabilityText(const struct FSQAvailabilityState& SQAvailabilityState, bool In_HasLimitedCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "GetAvailabilityText");

	Params::RadialItem_Deployable_C_GetAvailabilityText Parms{};

	Parms.SQAvailabilityState = std::move(SQAvailabilityState);
	Parms.In_HasLimitedCount = In_HasLimitedCount;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function RadialItem_Deployable.RadialItem_Deployable_C.GetUnavailabilityReason
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FSQAvailabilityState             SQAvailabilityState                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             Return_Value                                           (Parm, OutParm)

void URadialItem_Deployable_C::GetUnavailabilityReason(const struct FSQAvailabilityState& SQAvailabilityState, class FText* Return_Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RadialItem_Deployable_C", "GetUnavailabilityReason");

	Params::RadialItem_Deployable_C_GetUnavailabilityReason Parms{};

	Parms.SQAvailabilityState = std::move(SQAvailabilityState);

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = std::move(Parms.Return_Value);
}

}

