#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Menus

#include "Basic.hpp"

#include "BPI_Menus_classes.hpp"
#include "BPI_Menus_parameters.hpp"


namespace SDK
{

// Function BPI_Menus.BPI_Menus_C.Open UI Element
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQCoreStateMapComponent*         Map_Component                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Menus_C::Open_UI_Element(class USQCoreStateMapComponent* Map_Component, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Menus_C", "Open UI Element");

	Params::BPI_Menus_C_Open_UI_Element Parms{};

	Parms.Map_Component = Map_Component;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_Menus.BPI_Menus_C.Close UI Element
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Menus_C::Close_UI_Element(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Menus_C", "Close UI Element");

	Params::BPI_Menus_C_Close_UI_Element Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_Menus.BPI_Menus_C.Key Action
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Menus_C::Key_Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_Menus_C", "Key Action");

	UObject::ProcessEvent(Func, nullptr);
}

}

