#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_GenericState

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UMG_GenericState.UMG_GenericState_C.ExecuteUbergraph_UMG_GenericState
// 0x0020 (0x0020 - 0x0000)
struct UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37DF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState) == 0x000008, "Wrong alignment on UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState");
static_assert(sizeof(UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState) == 0x000020, "Wrong size on UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState");
static_assert(offsetof(UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState, EntryPoint) == 0x000000, "Member 'UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState::EntryPoint' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000010, "Member 'UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState, K2Node_Event_IsDesignTime) == 0x000018, "Member 'UMG_GenericState_C_ExecuteUbergraph_UMG_GenericState::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function UMG_GenericState.UMG_GenericState_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct UMG_GenericState_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_GenericState_C_PreConstruct) == 0x000001, "Wrong alignment on UMG_GenericState_C_PreConstruct");
static_assert(sizeof(UMG_GenericState_C_PreConstruct) == 0x000001, "Wrong size on UMG_GenericState_C_PreConstruct");
static_assert(offsetof(UMG_GenericState_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'UMG_GenericState_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function UMG_GenericState.UMG_GenericState_C.Set Inner Bar Percent
// 0x0004 (0x0004 - 0x0000)
struct UMG_GenericState_C_Set_Inner_Bar_Percent final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericState_C_Set_Inner_Bar_Percent) == 0x000004, "Wrong alignment on UMG_GenericState_C_Set_Inner_Bar_Percent");
static_assert(sizeof(UMG_GenericState_C_Set_Inner_Bar_Percent) == 0x000004, "Wrong size on UMG_GenericState_C_Set_Inner_Bar_Percent");
static_assert(offsetof(UMG_GenericState_C_Set_Inner_Bar_Percent, Value) == 0x000000, "Member 'UMG_GenericState_C_Set_Inner_Bar_Percent::Value' has a wrong offset!");

// Function UMG_GenericState.UMG_GenericState_C.Set Outer Bar Percent
// 0x0004 (0x0004 - 0x0000)
struct UMG_GenericState_C_Set_Outer_Bar_Percent final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericState_C_Set_Outer_Bar_Percent) == 0x000004, "Wrong alignment on UMG_GenericState_C_Set_Outer_Bar_Percent");
static_assert(sizeof(UMG_GenericState_C_Set_Outer_Bar_Percent) == 0x000004, "Wrong size on UMG_GenericState_C_Set_Outer_Bar_Percent");
static_assert(offsetof(UMG_GenericState_C_Set_Outer_Bar_Percent, Value) == 0x000000, "Member 'UMG_GenericState_C_Set_Outer_Bar_Percent::Value' has a wrong offset!");

// Function UMG_GenericState.UMG_GenericState_C.Set Inner Visibility
// 0x0005 (0x0005 - 0x0000)
struct UMG_GenericState_C_Set_Inner_Visibility final
{
public:
	bool                                          Param_Inner_Visible;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericState_C_Set_Inner_Visibility) == 0x000001, "Wrong alignment on UMG_GenericState_C_Set_Inner_Visibility");
static_assert(sizeof(UMG_GenericState_C_Set_Inner_Visibility) == 0x000005, "Wrong size on UMG_GenericState_C_Set_Inner_Visibility");
static_assert(offsetof(UMG_GenericState_C_Set_Inner_Visibility, Param_Inner_Visible) == 0x000000, "Member 'UMG_GenericState_C_Set_Inner_Visibility::Param_Inner_Visible' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_Set_Inner_Visibility, Temp_bool_Variable) == 0x000001, "Member 'UMG_GenericState_C_Set_Inner_Visibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_Set_Inner_Visibility, Temp_byte_Variable) == 0x000002, "Member 'UMG_GenericState_C_Set_Inner_Visibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_Set_Inner_Visibility, Temp_byte_Variable_1) == 0x000003, "Member 'UMG_GenericState_C_Set_Inner_Visibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_Set_Inner_Visibility, K2Node_Select_Default) == 0x000004, "Member 'UMG_GenericState_C_Set_Inner_Visibility::K2Node_Select_Default' has a wrong offset!");

// Function UMG_GenericState.UMG_GenericState_C.Set Outer Visibility
// 0x0005 (0x0005 - 0x0000)
struct UMG_GenericState_C_Set_Outer_Visibility final
{
public:
	bool                                          Param_Outer_Visible;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericState_C_Set_Outer_Visibility) == 0x000001, "Wrong alignment on UMG_GenericState_C_Set_Outer_Visibility");
static_assert(sizeof(UMG_GenericState_C_Set_Outer_Visibility) == 0x000005, "Wrong size on UMG_GenericState_C_Set_Outer_Visibility");
static_assert(offsetof(UMG_GenericState_C_Set_Outer_Visibility, Param_Outer_Visible) == 0x000000, "Member 'UMG_GenericState_C_Set_Outer_Visibility::Param_Outer_Visible' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_Set_Outer_Visibility, Temp_bool_Variable) == 0x000001, "Member 'UMG_GenericState_C_Set_Outer_Visibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_Set_Outer_Visibility, Temp_byte_Variable) == 0x000002, "Member 'UMG_GenericState_C_Set_Outer_Visibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_Set_Outer_Visibility, Temp_byte_Variable_1) == 0x000003, "Member 'UMG_GenericState_C_Set_Outer_Visibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UMG_GenericState_C_Set_Outer_Visibility, K2Node_Select_Default) == 0x000004, "Member 'UMG_GenericState_C_Set_Outer_Visibility::K2Node_Select_Default' has a wrong offset!");

// Function UMG_GenericState.UMG_GenericState_C.Set Icon
// 0x0008 (0x0008 - 0x0000)
struct UMG_GenericState_C_Set_Icon final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericState_C_Set_Icon) == 0x000008, "Wrong alignment on UMG_GenericState_C_Set_Icon");
static_assert(sizeof(UMG_GenericState_C_Set_Icon) == 0x000008, "Wrong size on UMG_GenericState_C_Set_Icon");
static_assert(offsetof(UMG_GenericState_C_Set_Icon, Texture) == 0x000000, "Member 'UMG_GenericState_C_Set_Icon::Texture' has a wrong offset!");

// Function UMG_GenericState.UMG_GenericState_C.Set Inner Color
// 0x0010 (0x0010 - 0x0000)
struct UMG_GenericState_C_Set_Inner_Color final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericState_C_Set_Inner_Color) == 0x000004, "Wrong alignment on UMG_GenericState_C_Set_Inner_Color");
static_assert(sizeof(UMG_GenericState_C_Set_Inner_Color) == 0x000010, "Wrong size on UMG_GenericState_C_Set_Inner_Color");
static_assert(offsetof(UMG_GenericState_C_Set_Inner_Color, InColorAndOpacity) == 0x000000, "Member 'UMG_GenericState_C_Set_Inner_Color::InColorAndOpacity' has a wrong offset!");

// Function UMG_GenericState.UMG_GenericState_C.Set Outer Color
// 0x0010 (0x0010 - 0x0000)
struct UMG_GenericState_C_Set_Outer_Color final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericState_C_Set_Outer_Color) == 0x000004, "Wrong alignment on UMG_GenericState_C_Set_Outer_Color");
static_assert(sizeof(UMG_GenericState_C_Set_Outer_Color) == 0x000010, "Wrong size on UMG_GenericState_C_Set_Outer_Color");
static_assert(offsetof(UMG_GenericState_C_Set_Outer_Color, InColorAndOpacity) == 0x000000, "Member 'UMG_GenericState_C_Set_Outer_Color::InColorAndOpacity' has a wrong offset!");

// Function UMG_GenericState.UMG_GenericState_C.Set Icon Color
// 0x0010 (0x0010 - 0x0000)
struct UMG_GenericState_C_Set_Icon_Color final
{
public:
	struct FLinearColor                           InColorAndOpacity;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericState_C_Set_Icon_Color) == 0x000004, "Wrong alignment on UMG_GenericState_C_Set_Icon_Color");
static_assert(sizeof(UMG_GenericState_C_Set_Icon_Color) == 0x000010, "Wrong size on UMG_GenericState_C_Set_Icon_Color");
static_assert(offsetof(UMG_GenericState_C_Set_Icon_Color, InColorAndOpacity) == 0x000000, "Member 'UMG_GenericState_C_Set_Icon_Color::InColorAndOpacity' has a wrong offset!");

}

