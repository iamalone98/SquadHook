#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SQAvailability_Role

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_SQAvailability_Role.BP_SQAvailability_Role_C.GetRearmRefundPercentage
// 0x0004 (0x0004 - 0x0000)
struct BP_SQAvailability_Role_C_GetRearmRefundPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SQAvailability_Role_C_GetRearmRefundPercentage) == 0x000004, "Wrong alignment on BP_SQAvailability_Role_C_GetRearmRefundPercentage");
static_assert(sizeof(BP_SQAvailability_Role_C_GetRearmRefundPercentage) == 0x000004, "Wrong size on BP_SQAvailability_Role_C_GetRearmRefundPercentage");
static_assert(offsetof(BP_SQAvailability_Role_C_GetRearmRefundPercentage, ReturnValue) == 0x000000, "Member 'BP_SQAvailability_Role_C_GetRearmRefundPercentage::ReturnValue' has a wrong offset!");

// Function BP_SQAvailability_Role.BP_SQAvailability_Role_C.GetInsufficientAmmoReamFailureReason
// 0x0020 (0x0020 - 0x0000)
struct BP_SQAvailability_Role_C_GetInsufficientAmmoReamFailureReason final
{
public:
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor)
	struct FDataTableRowHandle                    K2Node_MakeStruct_DataTableRowHandle;              // 0x0010(0x0010)(NoDestructor)
};
static_assert(alignof(BP_SQAvailability_Role_C_GetInsufficientAmmoReamFailureReason) == 0x000008, "Wrong alignment on BP_SQAvailability_Role_C_GetInsufficientAmmoReamFailureReason");
static_assert(sizeof(BP_SQAvailability_Role_C_GetInsufficientAmmoReamFailureReason) == 0x000020, "Wrong size on BP_SQAvailability_Role_C_GetInsufficientAmmoReamFailureReason");
static_assert(offsetof(BP_SQAvailability_Role_C_GetInsufficientAmmoReamFailureReason, ReturnValue) == 0x000000, "Member 'BP_SQAvailability_Role_C_GetInsufficientAmmoReamFailureReason::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_GetInsufficientAmmoReamFailureReason, K2Node_MakeStruct_DataTableRowHandle) == 0x000010, "Member 'BP_SQAvailability_Role_C_GetInsufficientAmmoReamFailureReason::K2Node_MakeStruct_DataTableRowHandle' has a wrong offset!");

// Function BP_SQAvailability_Role.BP_SQAvailability_Role_C.GetAvailabilityForPlayer
// 0x0140 (0x0140 - 0x0000)
struct BP_SQAvailability_Role_C_GetAvailabilityForPlayer final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQAvailabilityState                   InTeamStatus;                                      // 0x0008(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FSQAvailabilityState                   OutPlayerStatus;                                   // 0x0050(0x0048)(Parm, OutParm)
	struct FSQAvailabilityState                   CallFunc_GetAvailabilityForPlayer_OutPlayerStatus; // 0x0098(0x0048)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4509[0x7];                                     // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SQRestriction_RoleCount_C*          K2Node_DynamicCast_AsBP_SQRestriction_Role_Count;  // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_450A[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetSquadUsage_Out_Usage;                  // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQAvailabilityState                   CallFunc_SetUsage_OutState;                        // 0x00F8(0x0048)()
};
static_assert(alignof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer) == 0x000008, "Wrong alignment on BP_SQAvailability_Role_C_GetAvailabilityForPlayer");
static_assert(sizeof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer) == 0x000140, "Wrong size on BP_SQAvailability_Role_C_GetAvailabilityForPlayer");
static_assert(offsetof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer, InPlayer) == 0x000000, "Member 'BP_SQAvailability_Role_C_GetAvailabilityForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer, InTeamStatus) == 0x000008, "Member 'BP_SQAvailability_Role_C_GetAvailabilityForPlayer::InTeamStatus' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer, OutPlayerStatus) == 0x000050, "Member 'BP_SQAvailability_Role_C_GetAvailabilityForPlayer::OutPlayerStatus' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer, CallFunc_GetAvailabilityForPlayer_OutPlayerStatus) == 0x000098, "Member 'BP_SQAvailability_Role_C_GetAvailabilityForPlayer::CallFunc_GetAvailabilityForPlayer_OutPlayerStatus' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer, CallFunc_IsValid_ReturnValue) == 0x0000E0, "Member 'BP_SQAvailability_Role_C_GetAvailabilityForPlayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer, K2Node_DynamicCast_AsBP_SQRestriction_Role_Count) == 0x0000E8, "Member 'BP_SQAvailability_Role_C_GetAvailabilityForPlayer::K2Node_DynamicCast_AsBP_SQRestriction_Role_Count' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'BP_SQAvailability_Role_C_GetAvailabilityForPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer, CallFunc_GetSquadUsage_Out_Usage) == 0x0000F4, "Member 'BP_SQAvailability_Role_C_GetAvailabilityForPlayer::CallFunc_GetSquadUsage_Out_Usage' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_GetAvailabilityForPlayer, CallFunc_SetUsage_OutState) == 0x0000F8, "Member 'BP_SQAvailability_Role_C_GetAvailabilityForPlayer::CallFunc_SetUsage_OutState' has a wrong offset!");

// Function BP_SQAvailability_Role.BP_SQAvailability_Role_C.UpdateTeamAvailability
// 0x00F8 (0x00F8 - 0x0000)
struct BP_SQAvailability_Role_C_UpdateTeamAvailability final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQAvailabilityState                   OutTeamStatus;                                     // 0x0008(0x0048)(Parm, OutParm)
	struct FSQAvailabilityState                   CallFunc_UpdateTeamAvailability_OutTeamStatus;     // 0x0050(0x0048)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_450B[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SQRestriction_RoleCount_C*          K2Node_DynamicCast_AsBP_SQRestriction_Role_Count;  // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_450C[0x3];                                     // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTeamUsage_Out_Usage;                   // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQAvailabilityState                   CallFunc_SetUsage_OutState;                        // 0x00B0(0x0048)()
};
static_assert(alignof(BP_SQAvailability_Role_C_UpdateTeamAvailability) == 0x000008, "Wrong alignment on BP_SQAvailability_Role_C_UpdateTeamAvailability");
static_assert(sizeof(BP_SQAvailability_Role_C_UpdateTeamAvailability) == 0x0000F8, "Wrong size on BP_SQAvailability_Role_C_UpdateTeamAvailability");
static_assert(offsetof(BP_SQAvailability_Role_C_UpdateTeamAvailability, InTeam) == 0x000000, "Member 'BP_SQAvailability_Role_C_UpdateTeamAvailability::InTeam' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_UpdateTeamAvailability, OutTeamStatus) == 0x000008, "Member 'BP_SQAvailability_Role_C_UpdateTeamAvailability::OutTeamStatus' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_UpdateTeamAvailability, CallFunc_UpdateTeamAvailability_OutTeamStatus) == 0x000050, "Member 'BP_SQAvailability_Role_C_UpdateTeamAvailability::CallFunc_UpdateTeamAvailability_OutTeamStatus' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_UpdateTeamAvailability, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'BP_SQAvailability_Role_C_UpdateTeamAvailability::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_UpdateTeamAvailability, K2Node_DynamicCast_AsBP_SQRestriction_Role_Count) == 0x0000A0, "Member 'BP_SQAvailability_Role_C_UpdateTeamAvailability::K2Node_DynamicCast_AsBP_SQRestriction_Role_Count' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_UpdateTeamAvailability, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_SQAvailability_Role_C_UpdateTeamAvailability::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_UpdateTeamAvailability, CallFunc_GetTeamUsage_Out_Usage) == 0x0000AC, "Member 'BP_SQAvailability_Role_C_UpdateTeamAvailability::CallFunc_GetTeamUsage_Out_Usage' has a wrong offset!");
static_assert(offsetof(BP_SQAvailability_Role_C_UpdateTeamAvailability, CallFunc_SetUsage_OutState) == 0x0000B0, "Member 'BP_SQAvailability_Role_C_UpdateTeamAvailability::CallFunc_SetUsage_OutState' has a wrong offset!");

}

