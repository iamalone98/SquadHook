#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_SQMapCore

#include "Basic.hpp"

#include "W_SQMapCore_classes.hpp"
#include "W_SQMapCore_parameters.hpp"


namespace SDK
{

// Function W_SQMapCore.W_SQMapCore_C.Mouse Down__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    Mouse_Event                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FVector                          World_Location                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::Mouse_Down__DelegateSignature(const struct FPointerEvent& Mouse_Event, const struct FVector& World_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Mouse Down__DelegateSignature");

	Params::W_SQMapCore_C_Mouse_Down__DelegateSignature Parms{};

	Parms.Mouse_Event = std::move(Mouse_Event);
	Parms.World_Location = std::move(World_Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.OnUpdateZoom__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::OnUpdateZoom__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "OnUpdateZoom__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.ExecuteUbergraph_W_SQMapCore
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::ExecuteUbergraph_W_SQMapCore(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "ExecuteUbergraph_W_SQMapCore");

	Params::W_SQMapCore_C_ExecuteUbergraph_W_SQMapCore Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.Allow Ping
// (BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::Allow_Ping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Allow Ping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Tick");

	Params::W_SQMapCore_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.OnMouseLeave
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_SQMapCore_C::OnMouseLeave(const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "OnMouseLeave");

	Params::W_SQMapCore_C_OnMouseLeave Parms{};

	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_SQMapCore_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.Zoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Instant                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUpdate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_SQMapCore_C::Zoom(bool Instant, float Amount, bool IsUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Zoom");

	Params::W_SQMapCore_C_Zoom Parms{};

	Parms.Instant = Instant;
	Parms.Amount = Amount;
	Parms.IsUpdate = IsUpdate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.InitialiseMapTexture
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::InitialiseMapTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "InitialiseMapTexture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.OnMouseButtonDown
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_SQMapCore_C::OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "OnMouseButtonDown");

	Params::W_SQMapCore_C_OnMouseButtonDown Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_SQMapCore.W_SQMapCore_C.Hide SL Menu
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    New_Visible                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FGeometry                        Visible_Geometry                                       (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    Mouse_Event                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_SQMapCore_C::Hide_SL_Menu(bool New_Visible, const struct FGeometry& Visible_Geometry, const struct FPointerEvent& Mouse_Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Hide SL Menu");

	Params::W_SQMapCore_C_Hide_SL_Menu Parms{};

	Parms.New_Visible = New_Visible;
	Parms.Visible_Geometry = std::move(Visible_Geometry);
	Parms.Mouse_Event = std::move(Mouse_Event);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.Create Actions Menu
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::Create_Actions_Menu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Create Actions Menu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.Remove Floating Widgets
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::Remove_Floating_Widgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Remove Floating Widgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.StartPan
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::StartPan()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "StartPan");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.EndPan
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::EndPan()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "EndPan");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.OnMouseButtonUp
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_SQMapCore_C::OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "OnMouseButtonUp");

	Params::W_SQMapCore_C_OnMouseButtonUp Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_SQMapCore.W_SQMapCore_C.OnMouseMove
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_SQMapCore_C::OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "OnMouseMove");

	Params::W_SQMapCore_C_OnMouseMove Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_SQMapCore.W_SQMapCore_C.MovePan
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsScreenDelta                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ClampCacheScale                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::MovePan(const struct FVector2D& Delta, bool IsScreenDelta, float ClampCacheScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "MovePan");

	Params::W_SQMapCore_C_MovePan Parms{};

	Parms.Delta = std::move(Delta);
	Parms.IsScreenDelta = IsScreenDelta;
	Parms.ClampCacheScale = ClampCacheScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.ScreenToPanVector
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        ScreenVector                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     PanLayer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        PanVector                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::ScreenToPanVector(const struct FVector2D& ScreenVector, class UPanelWidget* PanLayer, struct FVector2D* PanVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "ScreenToPanVector");

	Params::W_SQMapCore_C_ScreenToPanVector Parms{};

	Parms.ScreenVector = std::move(ScreenVector);
	Parms.PanLayer = PanLayer;

	UObject::ProcessEvent(Func, &Parms);

	if (PanVector != nullptr)
		*PanVector = std::move(Parms.PanVector);
}


// Function W_SQMapCore.W_SQMapCore_C.ClampPanPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CacheScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      RootLayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     PanLayer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::ClampPanPosition(const struct FVector2D& Position, float CacheScale, class UUserWidget* RootLayer, class UPanelWidget* PanLayer, struct FVector2D* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "ClampPanPosition");

	Params::W_SQMapCore_C_ClampPanPosition Parms{};

	Parms.Position = std::move(Position);
	Parms.CacheScale = CacheScale;
	Parms.RootLayer = RootLayer;
	Parms.PanLayer = PanLayer;

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function W_SQMapCore.W_SQMapCore_C.Follow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Instant                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector2D                        FocusPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RelativePosition                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   ClampCacheScale                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::Follow(bool Instant, const struct FVector2D& FocusPosition, bool RelativePosition, float ClampCacheScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Follow");

	Params::W_SQMapCore_C_Follow Parms{};

	Parms.Instant = Instant;
	Parms.FocusPosition = std::move(FocusPosition);
	Parms.RelativePosition = RelativePosition;
	Parms.ClampCacheScale = ClampCacheScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.ScreenToPanPosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        ScreenPosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        PanPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::ScreenToPanPosition(const struct FVector2D& ScreenPosition, struct FVector2D* PanPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "ScreenToPanPosition");

	Params::W_SQMapCore_C_ScreenToPanPosition Parms{};

	Parms.ScreenPosition = std::move(ScreenPosition);

	UObject::ProcessEvent(Func, &Parms);

	if (PanPosition != nullptr)
		*PanPosition = std::move(Parms.PanPosition);
}


// Function W_SQMapCore.W_SQMapCore_C.Unfollow
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::Unfollow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Unfollow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.UpdateZoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::UpdateZoom(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "UpdateZoom");

	Params::W_SQMapCore_C_UpdateZoom Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.UpdateFollow
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::UpdateFollow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "UpdateFollow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.Clear Selections
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::Clear_Selections()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Clear Selections");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.GetElementRoot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UPanelWidget*                     Out_Root                                               (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::GetElementRoot(class UPanelWidget** Out_Root)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "GetElementRoot");

	Params::W_SQMapCore_C_GetElementRoot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Root != nullptr)
		*Out_Root = Parms.Out_Root;
}


// Function W_SQMapCore.W_SQMapCore_C.PerformZoom
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_TargetZoom                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        ZoomPosition                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      RootLayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     ZoomLayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     PanLayer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::PerformZoom(float Param_TargetZoom, const struct FVector2D& ZoomPosition, class UUserWidget* RootLayer, class UPanelWidget* ZoomLayer, class UPanelWidget* PanLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "PerformZoom");

	Params::W_SQMapCore_C_PerformZoom Parms{};

	Parms.Param_TargetZoom = Param_TargetZoom;
	Parms.ZoomPosition = std::move(ZoomPosition);
	Parms.RootLayer = RootLayer;
	Parms.ZoomLayer = ZoomLayer;
	Parms.PanLayer = PanLayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.PerformPan
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Vector                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsScreenDelta                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CacheScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      RootLayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     PanLayer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::PerformPan(const struct FVector2D& Vector, bool IsScreenDelta, float CacheScale, class UUserWidget* RootLayer, class UPanelWidget* PanLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "PerformPan");

	Params::W_SQMapCore_C_PerformPan Parms{};

	Parms.Vector = std::move(Vector);
	Parms.IsScreenDelta = IsScreenDelta;
	Parms.CacheScale = CacheScale;
	Parms.RootLayer = RootLayer;
	Parms.PanLayer = PanLayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.PerformFollow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPanelWidget*                     PanLayer                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        FocusPosition                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RelativePosition                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   CacheScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UUserWidget*                      RootLayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::PerformFollow(class UPanelWidget* PanLayer, const struct FVector2D& FocusPosition, bool RelativePosition, float CacheScale, class UUserWidget* RootLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "PerformFollow");

	Params::W_SQMapCore_C_PerformFollow Parms{};

	Parms.PanLayer = PanLayer;
	Parms.FocusPosition = std::move(FocusPosition);
	Parms.RelativePosition = RelativePosition;
	Parms.CacheScale = CacheScale;
	Parms.RootLayer = RootLayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.Setup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQCoreStateMapComponent*         Param_MapComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::Setup(class USQCoreStateMapComponent* Param_MapComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Setup");

	Params::W_SQMapCore_C_Setup Parms{};

	Parms.Param_MapComponent = Param_MapComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.ScreenLocationToMapLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        ScreenLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        MapLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::ScreenLocationToMapLocation(const struct FVector2D& ScreenLocation, struct FVector2D* MapLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "ScreenLocationToMapLocation");

	Params::W_SQMapCore_C_ScreenLocationToMapLocation Parms{};

	Parms.ScreenLocation = std::move(ScreenLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (MapLocation != nullptr)
		*MapLocation = std::move(Parms.MapLocation);
}


// Function W_SQMapCore.W_SQMapCore_C.UpdateCursorGridLocationString
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPointerEvent                    MouseInput                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UW_SQMapCore_C::UpdateCursorGridLocationString(const struct FPointerEvent& MouseInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "UpdateCursorGridLocationString");

	Params::W_SQMapCore_C_UpdateCursorGridLocationString Parms{};

	Parms.MouseInput = std::move(MouseInput);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.UpdatePlayerCoordinates
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::UpdatePlayerCoordinates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "UpdatePlayerCoordinates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.OnMouseWheelZoom
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MouseAxis                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::OnMouseWheelZoom(float MouseAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "OnMouseWheelZoom");

	Params::W_SQMapCore_C_OnMouseWheelZoom Parms{};

	Parms.MouseAxis = MouseAxis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.OnMouseWheel
// (BlueprintCosmetic, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FPointerEvent                    MouseEvent                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FEventReply                      ReturnValue                                            (Parm, OutParm, ReturnParm)

struct FEventReply UW_SQMapCore_C::OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "OnMouseWheel");

	Params::W_SQMapCore_C_OnMouseWheel Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.MouseEvent = std::move(MouseEvent);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_SQMapCore.W_SQMapCore_C.Remove Mouse Pos
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::Remove_Mouse_Pos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Remove Mouse Pos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.AdjustHorizontalBarPadding
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_TargetZoom                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::AdjustHorizontalBarPadding(float Param_TargetZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "AdjustHorizontalBarPadding");

	Params::W_SQMapCore_C_AdjustHorizontalBarPadding Parms{};

	Parms.Param_TargetZoom = Param_TargetZoom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.AdjustVerticalBarPadding
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_TargetZoom                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::AdjustVerticalBarPadding(float Param_TargetZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "AdjustVerticalBarPadding");

	Params::W_SQMapCore_C_AdjustVerticalBarPadding Parms{};

	Parms.Param_TargetZoom = Param_TargetZoom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.InitializeZoomLevels
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::InitializeZoomLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "InitializeZoomLevels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SQMapCore.W_SQMapCore_C.SetMapTexture
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture*                         Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::SetMapTexture(class UTexture* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "SetMapTexture");

	Params::W_SQMapCore_C_SetMapTexture Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SQMapCore.W_SQMapCore_C.FindZoomLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        OutScreenLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SQMapCore_C::FindZoomLocation(struct FVector2D* OutScreenLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "FindZoomLocation");

	Params::W_SQMapCore_C_FindZoomLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutScreenLocation != nullptr)
		*OutScreenLocation = std::move(Parms.OutScreenLocation);
}


// Function W_SQMapCore.W_SQMapCore_C.Can Place Map Menu
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_SQMapCore_C::Can_Place_Map_Menu(bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Can Place Map Menu");

	Params::W_SQMapCore_C_Can_Place_Map_Menu Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function W_SQMapCore.W_SQMapCore_C.Create Fireteam Actions Menu
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SQMapCore_C::Create_Fireteam_Actions_Menu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SQMapCore_C", "Create Fireteam Actions Menu");

	UObject::ProcessEvent(Func, nullptr);
}

}

