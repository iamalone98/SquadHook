#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SQWater

#include "Basic.hpp"

#include "SQWater_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SQWater.SQWaterPointTestComponent.SetBaseWaterComponent
// 0x0008 (0x0008 - 0x0000)
struct SQWaterPointTestComponent_SetBaseWaterComponent final
{
public:
	class USQBaseWaterComponent*                  Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterPointTestComponent_SetBaseWaterComponent) == 0x000008, "Wrong alignment on SQWaterPointTestComponent_SetBaseWaterComponent");
static_assert(sizeof(SQWaterPointTestComponent_SetBaseWaterComponent) == 0x000008, "Wrong size on SQWaterPointTestComponent_SetBaseWaterComponent");
static_assert(offsetof(SQWaterPointTestComponent_SetBaseWaterComponent, Component) == 0x000000, "Member 'SQWaterPointTestComponent_SetBaseWaterComponent::Component' has a wrong offset!");

// Function SQWater.SQWaterPointTestComponent.GetImmersionDepth
// 0x0004 (0x0004 - 0x0000)
struct SQWaterPointTestComponent_GetImmersionDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterPointTestComponent_GetImmersionDepth) == 0x000004, "Wrong alignment on SQWaterPointTestComponent_GetImmersionDepth");
static_assert(sizeof(SQWaterPointTestComponent_GetImmersionDepth) == 0x000004, "Wrong size on SQWaterPointTestComponent_GetImmersionDepth");
static_assert(offsetof(SQWaterPointTestComponent_GetImmersionDepth, ReturnValue) == 0x000000, "Member 'SQWaterPointTestComponent_GetImmersionDepth::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterPointTestComponent.GetWaterDensity
// 0x0004 (0x0004 - 0x0000)
struct SQWaterPointTestComponent_GetWaterDensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterPointTestComponent_GetWaterDensity) == 0x000004, "Wrong alignment on SQWaterPointTestComponent_GetWaterDensity");
static_assert(sizeof(SQWaterPointTestComponent_GetWaterDensity) == 0x000004, "Wrong size on SQWaterPointTestComponent_GetWaterDensity");
static_assert(offsetof(SQWaterPointTestComponent_GetWaterDensity, ReturnValue) == 0x000000, "Member 'SQWaterPointTestComponent_GetWaterDensity::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterPointTestComponent.IsOverlappingWaterBody
// 0x0001 (0x0001 - 0x0000)
struct SQWaterPointTestComponent_IsOverlappingWaterBody final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterPointTestComponent_IsOverlappingWaterBody) == 0x000001, "Wrong alignment on SQWaterPointTestComponent_IsOverlappingWaterBody");
static_assert(sizeof(SQWaterPointTestComponent_IsOverlappingWaterBody) == 0x000001, "Wrong size on SQWaterPointTestComponent_IsOverlappingWaterBody");
static_assert(offsetof(SQWaterPointTestComponent_IsOverlappingWaterBody, ReturnValue) == 0x000000, "Member 'SQWaterPointTestComponent_IsOverlappingWaterBody::ReturnValue' has a wrong offset!");

// Function SQWater.ODKWaterIntensityData.GetMaskingData
// 0x0014 (0x0014 - 0x0000)
struct ODKWaterIntensityData_GetMaskingData final
{
public:
	float                                         OutIntensity;                                      // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Clipping;                                          // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1748[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterIntensityData_GetMaskingData) == 0x000004, "Wrong alignment on ODKWaterIntensityData_GetMaskingData");
static_assert(sizeof(ODKWaterIntensityData_GetMaskingData) == 0x000014, "Wrong size on ODKWaterIntensityData_GetMaskingData");
static_assert(offsetof(ODKWaterIntensityData_GetMaskingData, OutIntensity) == 0x000000, "Member 'ODKWaterIntensityData_GetMaskingData::OutIntensity' has a wrong offset!");
static_assert(offsetof(ODKWaterIntensityData_GetMaskingData, Clipping) == 0x000004, "Member 'ODKWaterIntensityData_GetMaskingData::Clipping' has a wrong offset!");
static_assert(offsetof(ODKWaterIntensityData_GetMaskingData, Location) == 0x000008, "Member 'ODKWaterIntensityData_GetMaskingData::Location' has a wrong offset!");

// Function SQWater.SQBaseWaterComponent.GetCurrentWaterBodiesRef
// 0x0010 (0x0010 - 0x0000)
struct SQBaseWaterComponent_GetCurrentWaterBodiesRef final
{
public:
	TArray<class ASQWaterBody*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBaseWaterComponent_GetCurrentWaterBodiesRef) == 0x000008, "Wrong alignment on SQBaseWaterComponent_GetCurrentWaterBodiesRef");
static_assert(sizeof(SQBaseWaterComponent_GetCurrentWaterBodiesRef) == 0x000010, "Wrong size on SQBaseWaterComponent_GetCurrentWaterBodiesRef");
static_assert(offsetof(SQBaseWaterComponent_GetCurrentWaterBodiesRef, ReturnValue) == 0x000000, "Member 'SQBaseWaterComponent_GetCurrentWaterBodiesRef::ReturnValue' has a wrong offset!");

// Function SQWater.SQBaseWaterComponent.GetWaterDepth
// 0x0014 (0x0014 - 0x0000)
struct SQBaseWaterComponent_GetWaterDepth final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Depth;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174D[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBaseWaterComponent_GetWaterDepth) == 0x000004, "Wrong alignment on SQBaseWaterComponent_GetWaterDepth");
static_assert(sizeof(SQBaseWaterComponent_GetWaterDepth) == 0x000014, "Wrong size on SQBaseWaterComponent_GetWaterDepth");
static_assert(offsetof(SQBaseWaterComponent_GetWaterDepth, Location) == 0x000000, "Member 'SQBaseWaterComponent_GetWaterDepth::Location' has a wrong offset!");
static_assert(offsetof(SQBaseWaterComponent_GetWaterDepth, Depth) == 0x00000C, "Member 'SQBaseWaterComponent_GetWaterDepth::Depth' has a wrong offset!");
static_assert(offsetof(SQBaseWaterComponent_GetWaterDepth, ReturnValue) == 0x000010, "Member 'SQBaseWaterComponent_GetWaterDepth::ReturnValue' has a wrong offset!");

// Function SQWater.SQBaseWaterComponent.GetWaterHeight
// 0x0014 (0x0014 - 0x0000)
struct SQBaseWaterComponent_GetWaterHeight final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultHeight;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBaseWaterComponent_GetWaterHeight) == 0x000004, "Wrong alignment on SQBaseWaterComponent_GetWaterHeight");
static_assert(sizeof(SQBaseWaterComponent_GetWaterHeight) == 0x000014, "Wrong size on SQBaseWaterComponent_GetWaterHeight");
static_assert(offsetof(SQBaseWaterComponent_GetWaterHeight, Location) == 0x000000, "Member 'SQBaseWaterComponent_GetWaterHeight::Location' has a wrong offset!");
static_assert(offsetof(SQBaseWaterComponent_GetWaterHeight, DefaultHeight) == 0x00000C, "Member 'SQBaseWaterComponent_GetWaterHeight::DefaultHeight' has a wrong offset!");
static_assert(offsetof(SQBaseWaterComponent_GetWaterHeight, ReturnValue) == 0x000010, "Member 'SQBaseWaterComponent_GetWaterHeight::ReturnValue' has a wrong offset!");

// Function SQWater.SQBaseWaterComponent.GetWaterImmersionDepth
// 0x0010 (0x0010 - 0x0000)
struct SQBaseWaterComponent_GetWaterImmersionDepth final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBaseWaterComponent_GetWaterImmersionDepth) == 0x000004, "Wrong alignment on SQBaseWaterComponent_GetWaterImmersionDepth");
static_assert(sizeof(SQBaseWaterComponent_GetWaterImmersionDepth) == 0x000010, "Wrong size on SQBaseWaterComponent_GetWaterImmersionDepth");
static_assert(offsetof(SQBaseWaterComponent_GetWaterImmersionDepth, Location) == 0x000000, "Member 'SQBaseWaterComponent_GetWaterImmersionDepth::Location' has a wrong offset!");
static_assert(offsetof(SQBaseWaterComponent_GetWaterImmersionDepth, ReturnValue) == 0x00000C, "Member 'SQBaseWaterComponent_GetWaterImmersionDepth::ReturnValue' has a wrong offset!");

// Function SQWater.SQBaseWaterComponent.GetCurrentWaterBodies
// 0x0010 (0x0010 - 0x0000)
struct SQBaseWaterComponent_GetCurrentWaterBodies final
{
public:
	TArray<class ASQWaterBody*>                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBaseWaterComponent_GetCurrentWaterBodies) == 0x000008, "Wrong alignment on SQBaseWaterComponent_GetCurrentWaterBodies");
static_assert(sizeof(SQBaseWaterComponent_GetCurrentWaterBodies) == 0x000010, "Wrong size on SQBaseWaterComponent_GetCurrentWaterBodies");
static_assert(offsetof(SQBaseWaterComponent_GetCurrentWaterBodies, ReturnValue) == 0x000000, "Member 'SQBaseWaterComponent_GetCurrentWaterBodies::ReturnValue' has a wrong offset!");

// Function SQWater.SQBaseWaterComponent.GetSimulatedComponent
// 0x0008 (0x0008 - 0x0000)
struct SQBaseWaterComponent_GetSimulatedComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBaseWaterComponent_GetSimulatedComponent) == 0x000008, "Wrong alignment on SQBaseWaterComponent_GetSimulatedComponent");
static_assert(sizeof(SQBaseWaterComponent_GetSimulatedComponent) == 0x000008, "Wrong size on SQBaseWaterComponent_GetSimulatedComponent");
static_assert(offsetof(SQBaseWaterComponent_GetSimulatedComponent, ReturnValue) == 0x000000, "Member 'SQBaseWaterComponent_GetSimulatedComponent::ReturnValue' has a wrong offset!");

// Function SQWater.SQBaseWaterComponent.GetWaterLocation
// 0x0038 (0x0038 - 0x0000)
struct SQBaseWaterComponent_GetWaterLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174E[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQWaterBody*                           OutWaterBody;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWaterSurfaceLocation;                           // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWaterNormal;                                    // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174F[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBaseWaterComponent_GetWaterLocation) == 0x000008, "Wrong alignment on SQBaseWaterComponent_GetWaterLocation");
static_assert(sizeof(SQBaseWaterComponent_GetWaterLocation) == 0x000038, "Wrong size on SQBaseWaterComponent_GetWaterLocation");
static_assert(offsetof(SQBaseWaterComponent_GetWaterLocation, Location) == 0x000000, "Member 'SQBaseWaterComponent_GetWaterLocation::Location' has a wrong offset!");
static_assert(offsetof(SQBaseWaterComponent_GetWaterLocation, OutWaterBody) == 0x000010, "Member 'SQBaseWaterComponent_GetWaterLocation::OutWaterBody' has a wrong offset!");
static_assert(offsetof(SQBaseWaterComponent_GetWaterLocation, OutWaterSurfaceLocation) == 0x000018, "Member 'SQBaseWaterComponent_GetWaterLocation::OutWaterSurfaceLocation' has a wrong offset!");
static_assert(offsetof(SQBaseWaterComponent_GetWaterLocation, OutWaterNormal) == 0x000024, "Member 'SQBaseWaterComponent_GetWaterLocation::OutWaterNormal' has a wrong offset!");
static_assert(offsetof(SQBaseWaterComponent_GetWaterLocation, ReturnValue) == 0x000030, "Member 'SQBaseWaterComponent_GetWaterLocation::ReturnValue' has a wrong offset!");

// Function SQWater.SQBaseWaterComponent.IsInValidWaterBody
// 0x0001 (0x0001 - 0x0000)
struct SQBaseWaterComponent_IsInValidWaterBody final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBaseWaterComponent_IsInValidWaterBody) == 0x000001, "Wrong alignment on SQBaseWaterComponent_IsInValidWaterBody");
static_assert(sizeof(SQBaseWaterComponent_IsInValidWaterBody) == 0x000001, "Wrong size on SQBaseWaterComponent_IsInValidWaterBody");
static_assert(offsetof(SQBaseWaterComponent_IsInValidWaterBody, ReturnValue) == 0x000000, "Member 'SQBaseWaterComponent_IsInValidWaterBody::ReturnValue' has a wrong offset!");

// Function SQWater.SQBaseWaterComponent.IsInWaterBody
// 0x0001 (0x0001 - 0x0000)
struct SQBaseWaterComponent_IsInWaterBody final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBaseWaterComponent_IsInWaterBody) == 0x000001, "Wrong alignment on SQBaseWaterComponent_IsInWaterBody");
static_assert(sizeof(SQBaseWaterComponent_IsInWaterBody) == 0x000001, "Wrong size on SQBaseWaterComponent_IsInWaterBody");
static_assert(offsetof(SQBaseWaterComponent_IsInWaterBody, ReturnValue) == 0x000000, "Member 'SQBaseWaterComponent_IsInWaterBody::ReturnValue' has a wrong offset!");

// Function SQWater.SQBaseWaterComponent.IsOverlappingWaterBody
// 0x0001 (0x0001 - 0x0000)
struct SQBaseWaterComponent_IsOverlappingWaterBody final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBaseWaterComponent_IsOverlappingWaterBody) == 0x000001, "Wrong alignment on SQBaseWaterComponent_IsOverlappingWaterBody");
static_assert(sizeof(SQBaseWaterComponent_IsOverlappingWaterBody) == 0x000001, "Wrong size on SQBaseWaterComponent_IsOverlappingWaterBody");
static_assert(offsetof(SQBaseWaterComponent_IsOverlappingWaterBody, ReturnValue) == 0x000000, "Member 'SQBaseWaterComponent_IsOverlappingWaterBody::ReturnValue' has a wrong offset!");

// Function SQWater.SQBuoyancyComponent.AddCustomPontoon
// 0x0010 (0x0010 - 0x0000)
struct SQBuoyancyComponent_AddCustomPontoon final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InRelativeLocation;                                // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuoyancyComponent_AddCustomPontoon) == 0x000004, "Wrong alignment on SQBuoyancyComponent_AddCustomPontoon");
static_assert(sizeof(SQBuoyancyComponent_AddCustomPontoon) == 0x000010, "Wrong size on SQBuoyancyComponent_AddCustomPontoon");
static_assert(offsetof(SQBuoyancyComponent_AddCustomPontoon, Radius) == 0x000000, "Member 'SQBuoyancyComponent_AddCustomPontoon::Radius' has a wrong offset!");
static_assert(offsetof(SQBuoyancyComponent_AddCustomPontoon, InRelativeLocation) == 0x000004, "Member 'SQBuoyancyComponent_AddCustomPontoon::InRelativeLocation' has a wrong offset!");

// Function SQWater.SQBuoyancyComponent.AddCustomPontoonSocket
// 0x000C (0x000C - 0x0000)
struct SQBuoyancyComponent_AddCustomPontoonSocket final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CenterSocketName;                                  // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuoyancyComponent_AddCustomPontoonSocket) == 0x000004, "Wrong alignment on SQBuoyancyComponent_AddCustomPontoonSocket");
static_assert(sizeof(SQBuoyancyComponent_AddCustomPontoonSocket) == 0x00000C, "Wrong size on SQBuoyancyComponent_AddCustomPontoonSocket");
static_assert(offsetof(SQBuoyancyComponent_AddCustomPontoonSocket, Radius) == 0x000000, "Member 'SQBuoyancyComponent_AddCustomPontoonSocket::Radius' has a wrong offset!");
static_assert(offsetof(SQBuoyancyComponent_AddCustomPontoonSocket, CenterSocketName) == 0x000004, "Member 'SQBuoyancyComponent_AddCustomPontoonSocket::CenterSocketName' has a wrong offset!");

// Function SQWater.SQBuoyancyComponent.GeneratePontoonsFromBounds
// 0x001C (0x001C - 0x0000)
struct SQBuoyancyComponent_GeneratePontoonsFromBounds final
{
public:
	struct FBoxSphereBounds                       Bounds;                                            // 0x0000(0x001C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuoyancyComponent_GeneratePontoonsFromBounds) == 0x000004, "Wrong alignment on SQBuoyancyComponent_GeneratePontoonsFromBounds");
static_assert(sizeof(SQBuoyancyComponent_GeneratePontoonsFromBounds) == 0x00001C, "Wrong size on SQBuoyancyComponent_GeneratePontoonsFromBounds");
static_assert(offsetof(SQBuoyancyComponent_GeneratePontoonsFromBounds, Bounds) == 0x000000, "Member 'SQBuoyancyComponent_GeneratePontoonsFromBounds::Bounds' has a wrong offset!");

// Function SQWater.SQBuoyancyComponent.OnPontoonEnteredWater
// 0x0110 (0x0110 - 0x0000)
struct SQBuoyancyComponent_OnPontoonEnteredWater final
{
public:
	struct FODKSphericalPontoon                   Pontoon;                                           // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuoyancyComponent_OnPontoonEnteredWater) == 0x000010, "Wrong alignment on SQBuoyancyComponent_OnPontoonEnteredWater");
static_assert(sizeof(SQBuoyancyComponent_OnPontoonEnteredWater) == 0x000110, "Wrong size on SQBuoyancyComponent_OnPontoonEnteredWater");
static_assert(offsetof(SQBuoyancyComponent_OnPontoonEnteredWater, Pontoon) == 0x000000, "Member 'SQBuoyancyComponent_OnPontoonEnteredWater::Pontoon' has a wrong offset!");

// Function SQWater.SQBuoyancyComponent.OnPontoonExitedWater
// 0x0110 (0x0110 - 0x0000)
struct SQBuoyancyComponent_OnPontoonExitedWater final
{
public:
	struct FODKSphericalPontoon                   Pontoon;                                           // 0x0000(0x0110)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuoyancyComponent_OnPontoonExitedWater) == 0x000010, "Wrong alignment on SQBuoyancyComponent_OnPontoonExitedWater");
static_assert(sizeof(SQBuoyancyComponent_OnPontoonExitedWater) == 0x000110, "Wrong size on SQBuoyancyComponent_OnPontoonExitedWater");
static_assert(offsetof(SQBuoyancyComponent_OnPontoonExitedWater, Pontoon) == 0x000000, "Member 'SQBuoyancyComponent_OnPontoonExitedWater::Pontoon' has a wrong offset!");

// Function SQWater.SQBuoyancyComponent.SetWaterDampeningTransform
// 0x0030 (0x0030 - 0x0000)
struct SQBuoyancyComponent_SetWaterDampeningTransform final
{
public:
	struct FTransform                             NewTransform;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuoyancyComponent_SetWaterDampeningTransform) == 0x000010, "Wrong alignment on SQBuoyancyComponent_SetWaterDampeningTransform");
static_assert(sizeof(SQBuoyancyComponent_SetWaterDampeningTransform) == 0x000030, "Wrong size on SQBuoyancyComponent_SetWaterDampeningTransform");
static_assert(offsetof(SQBuoyancyComponent_SetWaterDampeningTransform, NewTransform) == 0x000000, "Member 'SQBuoyancyComponent_SetWaterDampeningTransform::NewTransform' has a wrong offset!");

// Function SQWater.SQBuoyancyComponent.HasPontoons
// 0x0001 (0x0001 - 0x0000)
struct SQBuoyancyComponent_HasPontoons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuoyancyComponent_HasPontoons) == 0x000001, "Wrong alignment on SQBuoyancyComponent_HasPontoons");
static_assert(sizeof(SQBuoyancyComponent_HasPontoons) == 0x000001, "Wrong size on SQBuoyancyComponent_HasPontoons");
static_assert(offsetof(SQBuoyancyComponent_HasPontoons, ReturnValue) == 0x000000, "Member 'SQBuoyancyComponent_HasPontoons::ReturnValue' has a wrong offset!");

// Function SQWater.ODKWaterMovementComponent.AddMechanism
// 0x0010 (0x0010 - 0x0000)
struct ODKWaterMovementComponent_AddMechanism final
{
public:
	class UODKWaterMechanismComponent*            Mechanism;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1754[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ODKWaterMovementComponent_AddMechanism) == 0x000008, "Wrong alignment on ODKWaterMovementComponent_AddMechanism");
static_assert(sizeof(ODKWaterMovementComponent_AddMechanism) == 0x000010, "Wrong size on ODKWaterMovementComponent_AddMechanism");
static_assert(offsetof(ODKWaterMovementComponent_AddMechanism, Mechanism) == 0x000000, "Member 'ODKWaterMovementComponent_AddMechanism::Mechanism' has a wrong offset!");
static_assert(offsetof(ODKWaterMovementComponent_AddMechanism, ID) == 0x000008, "Member 'ODKWaterMovementComponent_AddMechanism::ID' has a wrong offset!");

// Function SQWater.ODKWaterMovementComponent.GetBuoyancyComponent
// 0x0008 (0x0008 - 0x0000)
struct ODKWaterMovementComponent_GetBuoyancyComponent final
{
public:
	class USQBuoyancyComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMovementComponent_GetBuoyancyComponent) == 0x000008, "Wrong alignment on ODKWaterMovementComponent_GetBuoyancyComponent");
static_assert(sizeof(ODKWaterMovementComponent_GetBuoyancyComponent) == 0x000008, "Wrong size on ODKWaterMovementComponent_GetBuoyancyComponent");
static_assert(offsetof(ODKWaterMovementComponent_GetBuoyancyComponent, ReturnValue) == 0x000000, "Member 'ODKWaterMovementComponent_GetBuoyancyComponent::ReturnValue' has a wrong offset!");

// Function SQWater.ODKWaterMovementComponent.GetMaxRPM
// 0x0004 (0x0004 - 0x0000)
struct ODKWaterMovementComponent_GetMaxRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMovementComponent_GetMaxRPM) == 0x000004, "Wrong alignment on ODKWaterMovementComponent_GetMaxRPM");
static_assert(sizeof(ODKWaterMovementComponent_GetMaxRPM) == 0x000004, "Wrong size on ODKWaterMovementComponent_GetMaxRPM");
static_assert(offsetof(ODKWaterMovementComponent_GetMaxRPM, ReturnValue) == 0x000000, "Member 'ODKWaterMovementComponent_GetMaxRPM::ReturnValue' has a wrong offset!");

// Function SQWater.ODKWaterMovementComponent.GetRPM
// 0x0004 (0x0004 - 0x0000)
struct ODKWaterMovementComponent_GetRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMovementComponent_GetRPM) == 0x000004, "Wrong alignment on ODKWaterMovementComponent_GetRPM");
static_assert(sizeof(ODKWaterMovementComponent_GetRPM) == 0x000004, "Wrong size on ODKWaterMovementComponent_GetRPM");
static_assert(offsetof(ODKWaterMovementComponent_GetRPM, ReturnValue) == 0x000000, "Member 'ODKWaterMovementComponent_GetRPM::ReturnValue' has a wrong offset!");

// Function SQWater.ODKWaterMovementComponent.GetWaterVehicleVelocity
// 0x0004 (0x0004 - 0x0000)
struct ODKWaterMovementComponent_GetWaterVehicleVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMovementComponent_GetWaterVehicleVelocity) == 0x000004, "Wrong alignment on ODKWaterMovementComponent_GetWaterVehicleVelocity");
static_assert(sizeof(ODKWaterMovementComponent_GetWaterVehicleVelocity) == 0x000004, "Wrong size on ODKWaterMovementComponent_GetWaterVehicleVelocity");
static_assert(offsetof(ODKWaterMovementComponent_GetWaterVehicleVelocity, ReturnValue) == 0x000000, "Member 'ODKWaterMovementComponent_GetWaterVehicleVelocity::ReturnValue' has a wrong offset!");

// Function SQWater.ODKWaterMovementComponent.OnMechanismAdded
// 0x0008 (0x0008 - 0x0000)
struct ODKWaterMovementComponent_OnMechanismAdded final
{
public:
	class UODKWaterMechanismComponent*            InMechanismComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMovementComponent_OnMechanismAdded) == 0x000008, "Wrong alignment on ODKWaterMovementComponent_OnMechanismAdded");
static_assert(sizeof(ODKWaterMovementComponent_OnMechanismAdded) == 0x000008, "Wrong size on ODKWaterMovementComponent_OnMechanismAdded");
static_assert(offsetof(ODKWaterMovementComponent_OnMechanismAdded, InMechanismComponent) == 0x000000, "Member 'ODKWaterMovementComponent_OnMechanismAdded::InMechanismComponent' has a wrong offset!");

// Function SQWater.ODKWaterMovementComponent.ProcessInputsServer
// 0x0008 (0x0008 - 0x0000)
struct ODKWaterMovementComponent_ProcessInputsServer final
{
public:
	float                                         RawThrottle;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RawSteering;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMovementComponent_ProcessInputsServer) == 0x000004, "Wrong alignment on ODKWaterMovementComponent_ProcessInputsServer");
static_assert(sizeof(ODKWaterMovementComponent_ProcessInputsServer) == 0x000008, "Wrong size on ODKWaterMovementComponent_ProcessInputsServer");
static_assert(offsetof(ODKWaterMovementComponent_ProcessInputsServer, RawThrottle) == 0x000000, "Member 'ODKWaterMovementComponent_ProcessInputsServer::RawThrottle' has a wrong offset!");
static_assert(offsetof(ODKWaterMovementComponent_ProcessInputsServer, RawSteering) == 0x000004, "Member 'ODKWaterMovementComponent_ProcessInputsServer::RawSteering' has a wrong offset!");

// Function SQWater.ODKWaterMovementComponent.SetBuoyancyComponent
// 0x0008 (0x0008 - 0x0000)
struct ODKWaterMovementComponent_SetBuoyancyComponent final
{
public:
	class USQBuoyancyComponent*                   Param_BuoyancyComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMovementComponent_SetBuoyancyComponent) == 0x000008, "Wrong alignment on ODKWaterMovementComponent_SetBuoyancyComponent");
static_assert(sizeof(ODKWaterMovementComponent_SetBuoyancyComponent) == 0x000008, "Wrong size on ODKWaterMovementComponent_SetBuoyancyComponent");
static_assert(offsetof(ODKWaterMovementComponent_SetBuoyancyComponent, Param_BuoyancyComponent) == 0x000000, "Member 'ODKWaterMovementComponent_SetBuoyancyComponent::Param_BuoyancyComponent' has a wrong offset!");

// Function SQWater.ODKWaterMovementComponent.GetSimulatedComponent
// 0x0008 (0x0008 - 0x0000)
struct ODKWaterMovementComponent_GetSimulatedComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMovementComponent_GetSimulatedComponent) == 0x000008, "Wrong alignment on ODKWaterMovementComponent_GetSimulatedComponent");
static_assert(sizeof(ODKWaterMovementComponent_GetSimulatedComponent) == 0x000008, "Wrong size on ODKWaterMovementComponent_GetSimulatedComponent");
static_assert(offsetof(ODKWaterMovementComponent_GetSimulatedComponent, ReturnValue) == 0x000000, "Member 'ODKWaterMovementComponent_GetSimulatedComponent::ReturnValue' has a wrong offset!");

// Function SQWater.ODKWaterIntensityDrawComponent.PackMaskingVolumeData
// 0x0010 (0x0010 - 0x0000)
struct ODKWaterIntensityDrawComponent_PackMaskingVolumeData final
{
public:
	TArray<struct FODKMaskingVolume>              Volumes;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterIntensityDrawComponent_PackMaskingVolumeData) == 0x000008, "Wrong alignment on ODKWaterIntensityDrawComponent_PackMaskingVolumeData");
static_assert(sizeof(ODKWaterIntensityDrawComponent_PackMaskingVolumeData) == 0x000010, "Wrong size on ODKWaterIntensityDrawComponent_PackMaskingVolumeData");
static_assert(offsetof(ODKWaterIntensityDrawComponent_PackMaskingVolumeData, Volumes) == 0x000000, "Member 'ODKWaterIntensityDrawComponent_PackMaskingVolumeData::Volumes' has a wrong offset!");

// Function SQWater.ODKWaterIntensityDrawComponent.UpdateWaterIntensityMasks
// 0x0010 (0x0010 - 0x0000)
struct ODKWaterIntensityDrawComponent_UpdateWaterIntensityMasks final
{
public:
	TArray<struct FODKMaskingVolume>              Volumes;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterIntensityDrawComponent_UpdateWaterIntensityMasks) == 0x000008, "Wrong alignment on ODKWaterIntensityDrawComponent_UpdateWaterIntensityMasks");
static_assert(sizeof(ODKWaterIntensityDrawComponent_UpdateWaterIntensityMasks) == 0x000010, "Wrong size on ODKWaterIntensityDrawComponent_UpdateWaterIntensityMasks");
static_assert(offsetof(ODKWaterIntensityDrawComponent_UpdateWaterIntensityMasks, Volumes) == 0x000000, "Member 'ODKWaterIntensityDrawComponent_UpdateWaterIntensityMasks::Volumes' has a wrong offset!");

// Function SQWater.ODKWaterMechanismComponent.ApplySteering
// 0x0004 (0x0004 - 0x0000)
struct ODKWaterMechanismComponent_ApplySteering final
{
public:
	float                                         InSteeringInput;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMechanismComponent_ApplySteering) == 0x000004, "Wrong alignment on ODKWaterMechanismComponent_ApplySteering");
static_assert(sizeof(ODKWaterMechanismComponent_ApplySteering) == 0x000004, "Wrong size on ODKWaterMechanismComponent_ApplySteering");
static_assert(offsetof(ODKWaterMechanismComponent_ApplySteering, InSteeringInput) == 0x000000, "Member 'ODKWaterMechanismComponent_ApplySteering::InSteeringInput' has a wrong offset!");

// Function SQWater.ODKWaterMechanismComponent.ApplyThrottle
// 0x0004 (0x0004 - 0x0000)
struct ODKWaterMechanismComponent_ApplyThrottle final
{
public:
	float                                         InThrottleInput;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMechanismComponent_ApplyThrottle) == 0x000004, "Wrong alignment on ODKWaterMechanismComponent_ApplyThrottle");
static_assert(sizeof(ODKWaterMechanismComponent_ApplyThrottle) == 0x000004, "Wrong size on ODKWaterMechanismComponent_ApplyThrottle");
static_assert(offsetof(ODKWaterMechanismComponent_ApplyThrottle, InThrottleInput) == 0x000000, "Member 'ODKWaterMechanismComponent_ApplyThrottle::InThrottleInput' has a wrong offset!");

// Function SQWater.ODKWaterMechanismComponent.SetSimulatedComponent
// 0x0008 (0x0008 - 0x0000)
struct ODKWaterMechanismComponent_SetSimulatedComponent final
{
public:
	class UPrimitiveComponent*                    InSimulatedComponent;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ODKWaterMechanismComponent_SetSimulatedComponent) == 0x000008, "Wrong alignment on ODKWaterMechanismComponent_SetSimulatedComponent");
static_assert(sizeof(ODKWaterMechanismComponent_SetSimulatedComponent) == 0x000008, "Wrong size on ODKWaterMechanismComponent_SetSimulatedComponent");
static_assert(offsetof(ODKWaterMechanismComponent_SetSimulatedComponent, InSimulatedComponent) == 0x000000, "Member 'ODKWaterMechanismComponent_SetSimulatedComponent::InSimulatedComponent' has a wrong offset!");

// Function SQWater.SQWaterBody.GetMaxWaveHeight
// 0x0004 (0x0004 - 0x0000)
struct SQWaterBody_GetMaxWaveHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterBody_GetMaxWaveHeight) == 0x000004, "Wrong alignment on SQWaterBody_GetMaxWaveHeight");
static_assert(sizeof(SQWaterBody_GetMaxWaveHeight) == 0x000004, "Wrong size on SQWaterBody_GetMaxWaveHeight");
static_assert(offsetof(SQWaterBody_GetMaxWaveHeight, ReturnValue) == 0x000000, "Member 'SQWaterBody_GetMaxWaveHeight::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterBody.GetWaveReferenceTime
// 0x0004 (0x0004 - 0x0000)
struct SQWaterBody_GetWaveReferenceTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterBody_GetWaveReferenceTime) == 0x000004, "Wrong alignment on SQWaterBody_GetWaveReferenceTime");
static_assert(sizeof(SQWaterBody_GetWaveReferenceTime) == 0x000004, "Wrong size on SQWaterBody_GetWaveReferenceTime");
static_assert(offsetof(SQWaterBody_GetWaveReferenceTime, ReturnValue) == 0x000000, "Member 'SQWaterBody_GetWaveReferenceTime::ReturnValue' has a wrong offset!");

// Function SQWater.SQOcean.DebugCPUIterations
// 0x002C (0x002C - 0x0000)
struct SQOcean_DebugCPUIterations final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Iterations;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveSetToSample;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPos;                                            // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutNormal;                                         // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQOcean_DebugCPUIterations) == 0x000004, "Wrong alignment on SQOcean_DebugCPUIterations");
static_assert(sizeof(SQOcean_DebugCPUIterations) == 0x00002C, "Wrong size on SQOcean_DebugCPUIterations");
static_assert(offsetof(SQOcean_DebugCPUIterations, Position) == 0x000000, "Member 'SQOcean_DebugCPUIterations::Position' has a wrong offset!");
static_assert(offsetof(SQOcean_DebugCPUIterations, Iterations) == 0x00000C, "Member 'SQOcean_DebugCPUIterations::Iterations' has a wrong offset!");
static_assert(offsetof(SQOcean_DebugCPUIterations, WaveSetToSample) == 0x000010, "Member 'SQOcean_DebugCPUIterations::WaveSetToSample' has a wrong offset!");
static_assert(offsetof(SQOcean_DebugCPUIterations, OutPos) == 0x000014, "Member 'SQOcean_DebugCPUIterations::OutPos' has a wrong offset!");
static_assert(offsetof(SQOcean_DebugCPUIterations, OutNormal) == 0x000020, "Member 'SQOcean_DebugCPUIterations::OutNormal' has a wrong offset!");

// Function SQWater.SQOcean.DebugWaveVisualization
// 0x0018 (0x0018 - 0x0000)
struct SQOcean_DebugWaveVisualization final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Spacing;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQOcean_DebugWaveVisualization) == 0x000004, "Wrong alignment on SQOcean_DebugWaveVisualization");
static_assert(sizeof(SQOcean_DebugWaveVisualization) == 0x000018, "Wrong size on SQOcean_DebugWaveVisualization");
static_assert(offsetof(SQOcean_DebugWaveVisualization, Position) == 0x000000, "Member 'SQOcean_DebugWaveVisualization::Position' has a wrong offset!");
static_assert(offsetof(SQOcean_DebugWaveVisualization, Amount) == 0x00000C, "Member 'SQOcean_DebugWaveVisualization::Amount' has a wrong offset!");
static_assert(offsetof(SQOcean_DebugWaveVisualization, Spacing) == 0x000010, "Member 'SQOcean_DebugWaveVisualization::Spacing' has a wrong offset!");
static_assert(offsetof(SQOcean_DebugWaveVisualization, Lifetime) == 0x000014, "Member 'SQOcean_DebugWaveVisualization::Lifetime' has a wrong offset!");

// Function SQWater.SQOcean.GetWaterHeight
// 0x0010 (0x0010 - 0x0000)
struct SQOcean_GetWaterHeight final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQOcean_GetWaterHeight) == 0x000004, "Wrong alignment on SQOcean_GetWaterHeight");
static_assert(sizeof(SQOcean_GetWaterHeight) == 0x000010, "Wrong size on SQOcean_GetWaterHeight");
static_assert(offsetof(SQOcean_GetWaterHeight, Position) == 0x000000, "Member 'SQOcean_GetWaterHeight::Position' has a wrong offset!");
static_assert(offsetof(SQOcean_GetWaterHeight, ReturnValue) == 0x00000C, "Member 'SQOcean_GetWaterHeight::ReturnValue' has a wrong offset!");

// Function SQWater.SQOcean.OnPackedDataUpdated
// 0x0008 (0x0008 - 0x0000)
struct SQOcean_OnPackedDataUpdated final
{
public:
	class UTextureRenderTarget2D*                 InPackedData;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQOcean_OnPackedDataUpdated) == 0x000008, "Wrong alignment on SQOcean_OnPackedDataUpdated");
static_assert(sizeof(SQOcean_OnPackedDataUpdated) == 0x000008, "Wrong size on SQOcean_OnPackedDataUpdated");
static_assert(offsetof(SQOcean_OnPackedDataUpdated, InPackedData) == 0x000000, "Member 'SQOcean_OnPackedDataUpdated::InPackedData' has a wrong offset!");

// Function SQWater.SQOcean.GetWaterBody
// 0x0008 (0x0008 - 0x0000)
struct SQOcean_GetWaterBody final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQOcean_GetWaterBody) == 0x000008, "Wrong alignment on SQOcean_GetWaterBody");
static_assert(sizeof(SQOcean_GetWaterBody) == 0x000008, "Wrong size on SQOcean_GetWaterBody");
static_assert(offsetof(SQOcean_GetWaterBody, ReturnValue) == 0x000000, "Member 'SQOcean_GetWaterBody::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterBlueprintLibrary.CalculateDrag
// 0x001C (0x001C - 0x0000)
struct SQWaterBlueprintLibrary_CalculateDrag final
{
public:
	float                                         Coefficient;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Density;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SurfaceArea;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BodyMass;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterBlueprintLibrary_CalculateDrag) == 0x000004, "Wrong alignment on SQWaterBlueprintLibrary_CalculateDrag");
static_assert(sizeof(SQWaterBlueprintLibrary_CalculateDrag) == 0x00001C, "Wrong size on SQWaterBlueprintLibrary_CalculateDrag");
static_assert(offsetof(SQWaterBlueprintLibrary_CalculateDrag, Coefficient) == 0x000000, "Member 'SQWaterBlueprintLibrary_CalculateDrag::Coefficient' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_CalculateDrag, Velocity) == 0x000004, "Member 'SQWaterBlueprintLibrary_CalculateDrag::Velocity' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_CalculateDrag, Density) == 0x000008, "Member 'SQWaterBlueprintLibrary_CalculateDrag::Density' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_CalculateDrag, SurfaceArea) == 0x00000C, "Member 'SQWaterBlueprintLibrary_CalculateDrag::SurfaceArea' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_CalculateDrag, DeltaTime) == 0x000010, "Member 'SQWaterBlueprintLibrary_CalculateDrag::DeltaTime' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_CalculateDrag, BodyMass) == 0x000014, "Member 'SQWaterBlueprintLibrary_CalculateDrag::BodyMass' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_CalculateDrag, ReturnValue) == 0x000018, "Member 'SQWaterBlueprintLibrary_CalculateDrag::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterBlueprintLibrary.CmsToKmh
// 0x0008 (0x0008 - 0x0000)
struct SQWaterBlueprintLibrary_CmsToKmh final
{
public:
	float                                         SpeedCms;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterBlueprintLibrary_CmsToKmh) == 0x000004, "Wrong alignment on SQWaterBlueprintLibrary_CmsToKmh");
static_assert(sizeof(SQWaterBlueprintLibrary_CmsToKmh) == 0x000008, "Wrong size on SQWaterBlueprintLibrary_CmsToKmh");
static_assert(offsetof(SQWaterBlueprintLibrary_CmsToKmh, SpeedCms) == 0x000000, "Member 'SQWaterBlueprintLibrary_CmsToKmh::SpeedCms' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_CmsToKmh, ReturnValue) == 0x000004, "Member 'SQWaterBlueprintLibrary_CmsToKmh::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterBlueprintLibrary.ConvertLocationToUVs
// 0x0024 (0x0024 - 0x0000)
struct SQWaterBlueprintLibrary_ConvertLocationToUVs final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset;                                            // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0014(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x001C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterBlueprintLibrary_ConvertLocationToUVs) == 0x000004, "Wrong alignment on SQWaterBlueprintLibrary_ConvertLocationToUVs");
static_assert(sizeof(SQWaterBlueprintLibrary_ConvertLocationToUVs) == 0x000024, "Wrong size on SQWaterBlueprintLibrary_ConvertLocationToUVs");
static_assert(offsetof(SQWaterBlueprintLibrary_ConvertLocationToUVs, Location) == 0x000000, "Member 'SQWaterBlueprintLibrary_ConvertLocationToUVs::Location' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_ConvertLocationToUVs, Offset) == 0x00000C, "Member 'SQWaterBlueprintLibrary_ConvertLocationToUVs::Offset' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_ConvertLocationToUVs, Size) == 0x000014, "Member 'SQWaterBlueprintLibrary_ConvertLocationToUVs::Size' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_ConvertLocationToUVs, ReturnValue) == 0x00001C, "Member 'SQWaterBlueprintLibrary_ConvertLocationToUVs::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterBlueprintLibrary.ConvertUVsToLocation
// 0x0024 (0x0024 - 0x0000)
struct SQWaterBlueprintLibrary_ConvertUVsToLocation final
{
public:
	struct FVector2D                              UVs;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterBlueprintLibrary_ConvertUVsToLocation) == 0x000004, "Wrong alignment on SQWaterBlueprintLibrary_ConvertUVsToLocation");
static_assert(sizeof(SQWaterBlueprintLibrary_ConvertUVsToLocation) == 0x000024, "Wrong size on SQWaterBlueprintLibrary_ConvertUVsToLocation");
static_assert(offsetof(SQWaterBlueprintLibrary_ConvertUVsToLocation, UVs) == 0x000000, "Member 'SQWaterBlueprintLibrary_ConvertUVsToLocation::UVs' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_ConvertUVsToLocation, Offset) == 0x000008, "Member 'SQWaterBlueprintLibrary_ConvertUVsToLocation::Offset' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_ConvertUVsToLocation, Size) == 0x000010, "Member 'SQWaterBlueprintLibrary_ConvertUVsToLocation::Size' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintLibrary_ConvertUVsToLocation, ReturnValue) == 0x000018, "Member 'SQWaterBlueprintLibrary_ConvertUVsToLocation::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterBlueprintLibrary.GetDefaultWaterDensity
// 0x0004 (0x0004 - 0x0000)
struct SQWaterBlueprintLibrary_GetDefaultWaterDensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterBlueprintLibrary_GetDefaultWaterDensity) == 0x000004, "Wrong alignment on SQWaterBlueprintLibrary_GetDefaultWaterDensity");
static_assert(sizeof(SQWaterBlueprintLibrary_GetDefaultWaterDensity) == 0x000004, "Wrong size on SQWaterBlueprintLibrary_GetDefaultWaterDensity");
static_assert(offsetof(SQWaterBlueprintLibrary_GetDefaultWaterDensity, ReturnValue) == 0x000000, "Member 'SQWaterBlueprintLibrary_GetDefaultWaterDensity::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterRudderComponent.CalculateDrag
// 0x0020 (0x0020 - 0x0000)
struct SQWaterRudderComponent_CalculateDrag final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rot;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDensity;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterRudderComponent_CalculateDrag) == 0x000004, "Wrong alignment on SQWaterRudderComponent_CalculateDrag");
static_assert(sizeof(SQWaterRudderComponent_CalculateDrag) == 0x000020, "Wrong size on SQWaterRudderComponent_CalculateDrag");
static_assert(offsetof(SQWaterRudderComponent_CalculateDrag, Velocity) == 0x000000, "Member 'SQWaterRudderComponent_CalculateDrag::Velocity' has a wrong offset!");
static_assert(offsetof(SQWaterRudderComponent_CalculateDrag, Rot) == 0x00000C, "Member 'SQWaterRudderComponent_CalculateDrag::Rot' has a wrong offset!");
static_assert(offsetof(SQWaterRudderComponent_CalculateDrag, WaterDensity) == 0x000010, "Member 'SQWaterRudderComponent_CalculateDrag::WaterDensity' has a wrong offset!");
static_assert(offsetof(SQWaterRudderComponent_CalculateDrag, ReturnValue) == 0x000014, "Member 'SQWaterRudderComponent_CalculateDrag::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterRudderComponent.CalculateNormalForce
// 0x0020 (0x0020 - 0x0000)
struct SQWaterRudderComponent_CalculateNormalForce final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rot;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDensity;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterRudderComponent_CalculateNormalForce) == 0x000004, "Wrong alignment on SQWaterRudderComponent_CalculateNormalForce");
static_assert(sizeof(SQWaterRudderComponent_CalculateNormalForce) == 0x000020, "Wrong size on SQWaterRudderComponent_CalculateNormalForce");
static_assert(offsetof(SQWaterRudderComponent_CalculateNormalForce, Velocity) == 0x000000, "Member 'SQWaterRudderComponent_CalculateNormalForce::Velocity' has a wrong offset!");
static_assert(offsetof(SQWaterRudderComponent_CalculateNormalForce, Rot) == 0x00000C, "Member 'SQWaterRudderComponent_CalculateNormalForce::Rot' has a wrong offset!");
static_assert(offsetof(SQWaterRudderComponent_CalculateNormalForce, WaterDensity) == 0x000010, "Member 'SQWaterRudderComponent_CalculateNormalForce::WaterDensity' has a wrong offset!");
static_assert(offsetof(SQWaterRudderComponent_CalculateNormalForce, ReturnValue) == 0x000014, "Member 'SQWaterRudderComponent_CalculateNormalForce::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterRudderComponent.CalculateTorque
// 0x0020 (0x0020 - 0x0000)
struct SQWaterRudderComponent_CalculateTorque final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rot;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDensity;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterRudderComponent_CalculateTorque) == 0x000004, "Wrong alignment on SQWaterRudderComponent_CalculateTorque");
static_assert(sizeof(SQWaterRudderComponent_CalculateTorque) == 0x000020, "Wrong size on SQWaterRudderComponent_CalculateTorque");
static_assert(offsetof(SQWaterRudderComponent_CalculateTorque, Velocity) == 0x000000, "Member 'SQWaterRudderComponent_CalculateTorque::Velocity' has a wrong offset!");
static_assert(offsetof(SQWaterRudderComponent_CalculateTorque, Rot) == 0x00000C, "Member 'SQWaterRudderComponent_CalculateTorque::Rot' has a wrong offset!");
static_assert(offsetof(SQWaterRudderComponent_CalculateTorque, WaterDensity) == 0x000010, "Member 'SQWaterRudderComponent_CalculateTorque::WaterDensity' has a wrong offset!");
static_assert(offsetof(SQWaterRudderComponent_CalculateTorque, ReturnValue) == 0x000014, "Member 'SQWaterRudderComponent_CalculateTorque::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterSubsystem.GetSmoothedWorldTimeSeconds
// 0x0004 (0x0004 - 0x0000)
struct SQWaterSubsystem_GetSmoothedWorldTimeSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterSubsystem_GetSmoothedWorldTimeSeconds) == 0x000004, "Wrong alignment on SQWaterSubsystem_GetSmoothedWorldTimeSeconds");
static_assert(sizeof(SQWaterSubsystem_GetSmoothedWorldTimeSeconds) == 0x000004, "Wrong size on SQWaterSubsystem_GetSmoothedWorldTimeSeconds");
static_assert(offsetof(SQWaterSubsystem_GetSmoothedWorldTimeSeconds, ReturnValue) == 0x000000, "Member 'SQWaterSubsystem_GetSmoothedWorldTimeSeconds::ReturnValue' has a wrong offset!");

// Function SQWater.SQWaterSubsystem.GetWaterTimeSeconds
// 0x0004 (0x0004 - 0x0000)
struct SQWaterSubsystem_GetWaterTimeSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWaterSubsystem_GetWaterTimeSeconds) == 0x000004, "Wrong alignment on SQWaterSubsystem_GetWaterTimeSeconds");
static_assert(sizeof(SQWaterSubsystem_GetWaterTimeSeconds) == 0x000004, "Wrong size on SQWaterSubsystem_GetWaterTimeSeconds");
static_assert(offsetof(SQWaterSubsystem_GetWaterTimeSeconds, ReturnValue) == 0x000000, "Member 'SQWaterSubsystem_GetWaterTimeSeconds::ReturnValue' has a wrong offset!");

// Function SQWater.WaterIntensityVolume.ConvertPosToGradient
// 0x0010 (0x0010 - 0x0000)
struct WaterIntensityVolume_ConvertPosToGradient final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterIntensityVolume_ConvertPosToGradient) == 0x000004, "Wrong alignment on WaterIntensityVolume_ConvertPosToGradient");
static_assert(sizeof(WaterIntensityVolume_ConvertPosToGradient) == 0x000010, "Wrong size on WaterIntensityVolume_ConvertPosToGradient");
static_assert(offsetof(WaterIntensityVolume_ConvertPosToGradient, Position) == 0x000000, "Member 'WaterIntensityVolume_ConvertPosToGradient::Position' has a wrong offset!");
static_assert(offsetof(WaterIntensityVolume_ConvertPosToGradient, ReturnValue) == 0x00000C, "Member 'WaterIntensityVolume_ConvertPosToGradient::ReturnValue' has a wrong offset!");

}

