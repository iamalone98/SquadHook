#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TCScalableBleedComponent

#include "Basic.hpp"

#include "TCScalableBleedComponent_classes.hpp"
#include "TCScalableBleedComponent_parameters.hpp"


namespace SDK
{

// Function TCScalableBleedComponent.TCScalableBleedComponent_C.ExecuteUbergraph_TCScalableBleedComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTCScalableBleedComponent_C::ExecuteUbergraph_TCScalableBleedComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TCScalableBleedComponent_C", "ExecuteUbergraph_TCScalableBleedComponent");

	Params::TCScalableBleedComponent_C_ExecuteUbergraph_TCScalableBleedComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TCScalableBleedComponent.TCScalableBleedComponent_C.Apply Bleed Per Minute
// (BlueprintCallable, BlueprintEvent)

void UTCScalableBleedComponent_C::Apply_Bleed_Per_Minute()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TCScalableBleedComponent_C", "Apply Bleed Per Minute");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TCScalableBleedComponent.TCScalableBleedComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UTCScalableBleedComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TCScalableBleedComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TCScalableBleedComponent.TCScalableBleedComponent_C.Update Bleed Count
// (Public, BlueprintCallable, BlueprintEvent)

void UTCScalableBleedComponent_C::Update_Bleed_Count()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TCScalableBleedComponent_C", "Update Bleed Count");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TCScalableBleedComponent.TCScalableBleedComponent_C.Initialise TC Bleed Component
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ATC_HexZone_C*>            Param_All_TC_Zones                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UTCScalableBleedComponent_C::Initialise_TC_Bleed_Component(TArray<class ATC_HexZone_C*>& Param_All_TC_Zones)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TCScalableBleedComponent_C", "Initialise TC Bleed Component");

	Params::TCScalableBleedComponent_C_Initialise_TC_Bleed_Component Parms{};

	Parms.Param_All_TC_Zones = std::move(Param_All_TC_Zones);

	UObject::ProcessEvent(Func, &Parms);

	Param_All_TC_Zones = std::move(Parms.Param_All_TC_Zones);
}


// Function TCScalableBleedComponent.TCScalableBleedComponent_C.Get Current Bleed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team_ID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Bleed_Per_Min                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTCScalableBleedComponent_C::Get_Current_Bleed(int32 Team_ID, int32* Bleed_Per_Min)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TCScalableBleedComponent_C", "Get Current Bleed");

	Params::TCScalableBleedComponent_C_Get_Current_Bleed Parms{};

	Parms.Team_ID = Team_ID;

	UObject::ProcessEvent(Func, &Parms);

	if (Bleed_Per_Min != nullptr)
		*Bleed_Per_Min = Parms.Bleed_Per_Min;
}


// Function TCScalableBleedComponent.TCScalableBleedComponent_C.InitBleedThresholds
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UTCScalableBleedComponent_C::InitBleedThresholds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TCScalableBleedComponent_C", "InitBleedThresholds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TCScalableBleedComponent.TCScalableBleedComponent_C.CalcBleedValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Zones_captured                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Bleed_Value                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTCScalableBleedComponent_C::CalcBleedValue(int32 Zones_captured, int32* Bleed_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TCScalableBleedComponent_C", "CalcBleedValue");

	Params::TCScalableBleedComponent_C_CalcBleedValue Parms{};

	Parms.Zones_captured = Zones_captured;

	UObject::ProcessEvent(Func, &Parms);

	if (Bleed_Value != nullptr)
		*Bleed_Value = Parms.Bleed_Value;
}


// Function TCScalableBleedComponent.TCScalableBleedComponent_C.CalcBleedValue_Curve
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Zones_captured                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Bleed_Value                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UTCScalableBleedComponent_C::CalcBleedValue_Curve(int32 Zones_captured, int32* Bleed_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TCScalableBleedComponent_C", "CalcBleedValue_Curve");

	Params::TCScalableBleedComponent_C_CalcBleedValue_Curve Parms{};

	Parms.Zones_captured = Zones_captured;

	UObject::ProcessEvent(Func, &Parms);

	if (Bleed_Value != nullptr)
		*Bleed_Value = Parms.Bleed_Value;
}

}

