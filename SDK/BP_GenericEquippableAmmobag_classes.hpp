#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GenericEquippableAmmobag

#include "Basic.hpp"

#include "BP_GenericEquippableItem_Deployable_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GenericEquippableAmmobag.BP_GenericEquippableAmmobag_C
// 0x0028 (0x04C0 - 0x0498)
class ABP_GenericEquippableAmmobag_C : public ABP_GenericEquippableItem_Deployable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GenericEquippableAmmobag_C;      // 0x0498(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<float>                                 AmmoCounts;                                        // 0x04A0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	float                                         MaxAmmoCount;                                      // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PersistingAmmo;                                    // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingAmmoCount;                                 // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GenericEquippableAmmobag(int32 EntryPoint);
	void OnServerValidatedItemPlacement(class ASQDeployableItem* Deployable);
	void InitializeAmmoValues(const struct FSQInventoryData& ItemClass, bool bSpawnMaxAmmo, const struct FSQPersistedAmmoCount& PersistedAmmo);
	float Rearm(int32 Quantity);
	void SortAmmoCounts();

	bool IsAmmoFull() const;
	struct FSQPersistedAmmoCount CreatePersistingAmmoCount() const;
	float CalculateMaxAmmoCost(int32 MaxCount) const;
	float CalculateRearmAmmoCost(int32 QuantityToRearm) const;
	int32 CalculateMissingRearmItems() const;
	int32 GetRearmMaxItemCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GenericEquippableAmmobag_C">();
	}
	static class ABP_GenericEquippableAmmobag_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GenericEquippableAmmobag_C>();
	}
};
static_assert(alignof(ABP_GenericEquippableAmmobag_C) == 0x000008, "Wrong alignment on ABP_GenericEquippableAmmobag_C");
static_assert(sizeof(ABP_GenericEquippableAmmobag_C) == 0x0004C0, "Wrong size on ABP_GenericEquippableAmmobag_C");
static_assert(offsetof(ABP_GenericEquippableAmmobag_C, UberGraphFrame_BP_GenericEquippableAmmobag_C) == 0x000498, "Member 'ABP_GenericEquippableAmmobag_C::UberGraphFrame_BP_GenericEquippableAmmobag_C' has a wrong offset!");
static_assert(offsetof(ABP_GenericEquippableAmmobag_C, AmmoCounts) == 0x0004A0, "Member 'ABP_GenericEquippableAmmobag_C::AmmoCounts' has a wrong offset!");
static_assert(offsetof(ABP_GenericEquippableAmmobag_C, MaxAmmoCount) == 0x0004B0, "Member 'ABP_GenericEquippableAmmobag_C::MaxAmmoCount' has a wrong offset!");
static_assert(offsetof(ABP_GenericEquippableAmmobag_C, PersistingAmmo) == 0x0004B4, "Member 'ABP_GenericEquippableAmmobag_C::PersistingAmmo' has a wrong offset!");
static_assert(offsetof(ABP_GenericEquippableAmmobag_C, StartingAmmoCount) == 0x0004B8, "Member 'ABP_GenericEquippableAmmobag_C::StartingAmmoCount' has a wrong offset!");

}

