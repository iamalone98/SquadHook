#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController

#include "Basic.hpp"

#include "BP_PlayerController_classes.hpp"
#include "BP_PlayerController_parameters.hpp"


namespace SDK
{

// Function BP_PlayerController.BP_PlayerController_C.Opened Chat__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQChat                                 Channel                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Opened_Chat__DelegateSignature(ESQChat Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Opened Chat__DelegateSignature");

	Params::BP_PlayerController_C_Opened_Chat__DelegateSignature Parms{};

	Parms.Channel = Channel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Marker Created__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Squad_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASQMapMarker*                     Marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Marker_Created__DelegateSignature(int32 Squad_ID, class ASQMapMarker* Marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Marker Created__DelegateSignature");

	Params::BP_PlayerController_C_Marker_Created__DelegateSignature Parms{};

	Parms.Squad_ID = Squad_ID;
	Parms.Marker = Marker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.ExecuteUbergraph_BP_PlayerController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::ExecuteUbergraph_BP_PlayerController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "ExecuteUbergraph_BP_PlayerController");

	Params::BP_PlayerController_C_ExecuteUbergraph_BP_PlayerController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpAxisEvt_MapZoom_GP_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::InpAxisEvt_MapZoom_GP_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpAxisEvt_MapZoom_GP_K2Node_InputAxisEvent_0");

	Params::BP_PlayerController_C_InpAxisEvt_MapZoom_GP_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.OpenEmoteQuickGate
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::OpenEmoteQuickGate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "OpenEmoteQuickGate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.CloseEmoteQuickGate
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::CloseEmoteQuickGate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "CloseEmoteQuickGate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.ServerPickupItem
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Item_Object                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::ServerPickupItem(class AActor* Item_Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "ServerPickupItem");

	Params::BP_PlayerController_C_ServerPickupItem Parms{};

	Parms.Item_Object = Item_Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.ToggleHighPrecisionBearing
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::ToggleHighPrecisionBearing(bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "ToggleHighPrecisionBearing");

	Params::BP_PlayerController_C_ToggleHighPrecisionBearing Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.OnPendingDeathChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   KillTimestamp                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bDeathIsPending                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::OnPendingDeathChanged(float KillTimestamp, bool bDeathIsPending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "OnPendingDeathChanged");

	Params::BP_PlayerController_C_OnPendingDeathChanged Parms{};

	Parms.KillTimestamp = KillTimestamp;
	Parms.bDeathIsPending = bDeathIsPending;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.OnSquadChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQSquadState*                    NewSquad                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASQSquadState*                    OldSquad                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASQPlayerState*                   Param_Player                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::OnSquadChanged(class ASQSquadState* NewSquad, class ASQSquadState* OldSquad, class ASQPlayerState* Param_Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "OnSquadChanged");

	Params::BP_PlayerController_C_OnSquadChanged Parms{};

	Parms.NewSquad = NewSquad;
	Parms.OldSquad = OldSquad;
	Parms.Param_Player = Param_Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.CheckPlayerStateInitialized
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::CheckPlayerStateInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "CheckPlayerStateInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PlayerController_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.FireteamLeaderChanged
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             PlayerName                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   FireTeamIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::FireteamLeaderChanged(const class FText& PlayerName, int32 FireTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "FireteamLeaderChanged");

	Params::BP_PlayerController_C_FireteamLeaderChanged Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.FireTeamIndex = FireTeamIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.ClearTimer3DMarkerCooldown
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::ClearTimer3DMarkerCooldown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "ClearTimer3DMarkerCooldown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.RequiresLeaderKitNotification
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::RequiresLeaderKitNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "RequiresLeaderKitNotification");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.JoinedSquadNotification
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQPlayerState*                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::JoinedSquadNotification(class ASQPlayerState* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "JoinedSquadNotification");

	Params::BP_PlayerController_C_JoinedSquadNotification Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.PromotedNotification
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Commander                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::PromotedNotification(bool Commander)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "PromotedNotification");

	Params::BP_PlayerController_C_PromotedNotification Parms{};

	Parms.Commander = Commander;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.LeftSquadNotification
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQPlayerState*                   Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::LeftSquadNotification(class ASQPlayerState* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "LeftSquadNotification");

	Params::BP_PlayerController_C_LeftSquadNotification Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.FireteamUpdatedNotification
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FireteamNumber                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFTL                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::FireteamUpdatedNotification(int32 FireteamNumber, bool IsFTL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "FireteamUpdatedNotification");

	Params::BP_PlayerController_C_FireteamUpdatedNotification Parms{};

	Parms.FireteamNumber = FireteamNumber;
	Parms.IsFTL = IsFTL;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Override Music
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class USoundBase>        In_Music                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::Override_Music(TSoftObjectPtr<class USoundBase> In_Music)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Override Music");

	Params::BP_PlayerController_C_Override_Music Parms{};

	Parms.In_Music = In_Music;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.BP_ExposeUnavailabilityReason
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDataTableRowHandle              InReason                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void ABP_PlayerController_C::BP_ExposeUnavailabilityReason(const struct FDataTableRowHandle& InReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "BP_ExposeUnavailabilityReason");

	Params::BP_PlayerController_C_BP_ExposeUnavailabilityReason Parms{};

	Parms.InReason = std::move(InReason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.BP_FailPlaceDeployableFromEquippable
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASQEquipableItem*                 Equippable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::BP_FailPlaceDeployableFromEquippable(class ASQEquipableItem* Equippable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "BP_FailPlaceDeployableFromEquippable");

	Params::BP_PlayerController_C_BP_FailPlaceDeployableFromEquippable Parms{};

	Parms.Equippable = Equippable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.BP_InitializeDeployableFromEquippable
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASQDeployableItem*                DeployableItem                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASQEquipableItem*                 Equippable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::BP_InitializeDeployableFromEquippable(class ASQDeployableItem* DeployableItem, class ASQEquipableItem* Equippable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "BP_InitializeDeployableFromEquippable");

	Params::BP_PlayerController_C_BP_InitializeDeployableFromEquippable Parms{};

	Parms.DeployableItem = DeployableItem;
	Parms.Equippable = Equippable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.BlueprintOnMatchStarted
// (Event, Public, BlueprintEvent)

void ABP_PlayerController_C::BlueprintOnMatchStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "BlueprintOnMatchStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Remove Map Marker New
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   MapMarkerID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Remove_Map_Marker_New(uint8 MapMarkerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Remove Map Marker New");

	Params::BP_PlayerController_C_Remove_Map_Marker_New Parms{};

	Parms.MapMarkerID = MapMarkerID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Set Last Command Request Time
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::Set_Last_Command_Request_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Set Last Command Request Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Server Accept Deny Command
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MapMarker_Command_Request_C*  Marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Accepted                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::Server_Accept_Deny_Command(class ABP_MapMarker_Command_Request_C* Marker, bool Accepted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Server Accept Deny Command");

	Params::BP_PlayerController_C_Server_Accept_Deny_Command Parms{};

	Parms.Marker = Marker;
	Parms.Accepted = Accepted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Accept Deny Command Request
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MapMarker_Command_Request_C*  Marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Accepted                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::Accept_Deny_Command_Request(class ABP_MapMarker_Command_Request_C* Marker, bool Accepted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Accept Deny Command Request");

	Params::BP_PlayerController_C_Accept_Deny_Command_Request Parms{};

	Parms.Marker = Marker;
	Parms.Accepted = Accepted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Remove Selected Marker
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::Remove_Selected_Marker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Remove Selected Marker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Request Command Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Command_Marker                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Request_Command_Marker(class UClass* Command_Marker, const struct FTransform& Transform, float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Request Command Marker");

	Params::BP_PlayerController_C_Request_Command_Marker Parms{};

	Parms.Command_Marker = Command_Marker;
	Parms.Transform = std::move(Transform);
	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Request Director Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Director_Marker                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Squad_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Request_Director_Marker(class UClass* Director_Marker, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, float Distance, int32 Squad_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Request Director Marker");

	Params::BP_PlayerController_C_Request_Director_Marker Parms{};

	Parms.Director_Marker = Director_Marker;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.Distance = Distance;
	Parms.Squad_ID = Squad_ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Request Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Marker_Class                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Fire_Team_ID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::Request_Marker(class UClass* Marker_Class, const struct FVector& Location, int32 Fire_Team_ID, bool Emote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Request Marker");

	Params::BP_PlayerController_C_Request_Marker Parms{};

	Parms.Marker_Class = Marker_Class;
	Parms.Location = std::move(Location);
	Parms.Fire_Team_ID = Fire_Team_ID;
	Parms.Emote = Emote;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Request Map Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Squad_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESQTeam                                 Team_ID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Fire_Team_ID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector_NetQuantize              Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FVector_NetQuantize              DistanceRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class USQMapMarkerDataAsset*            Map_Marker_Data                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Request_Map_Marker(int32 Squad_ID, ESQTeam Team_ID, int32 Fire_Team_ID, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantize& DistanceRotation, class USQMapMarkerDataAsset* Map_Marker_Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Request Map Marker");

	Params::BP_PlayerController_C_Request_Map_Marker Parms{};

	Parms.Squad_ID = Squad_ID;
	Parms.Team_ID = Team_ID;
	Parms.Fire_Team_ID = Fire_Team_ID;
	Parms.Location = std::move(Location);
	Parms.DistanceRotation = std::move(DistanceRotation);
	Parms.Map_Marker_Data = Map_Marker_Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.OutOfBoundsTimerCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::OutOfBoundsTimerCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "OutOfBoundsTimerCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.OnOutOfMapBoundsChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   KillTimestamp                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bIsOutOfBounds                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::OnOutOfMapBoundsChanged(float KillTimestamp, bool bIsOutOfBounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "OnOutOfMapBoundsChanged");

	Params::BP_PlayerController_C_OnOutOfMapBoundsChanged Parms{};

	Parms.KillTimestamp = KillTimestamp;
	Parms.bIsOutOfBounds = bIsOutOfBounds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Play Emote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQEmotes                               Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Play_Emote(ESQEmotes Emote, class FName Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Play Emote");

	Params::BP_PlayerController_C_Play_Emote Parms{};

	Parms.Emote = Emote;
	Parms.Param_Name = Param_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.SetAllowAdminCam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Param_bAllowAdminCam                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::SetAllowAdminCam(bool Param_bAllowAdminCam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "SetAllowAdminCam");

	Params::BP_PlayerController_C_SetAllowAdminCam Parms{};

	Parms.Param_bAllowAdminCam = Param_bAllowAdminCam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Clear Selected Marker
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::Clear_Selected_Marker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Clear Selected Marker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Set Selected Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQMapWidgetMapMarkerSelectable*  Marker_Ref                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Set_Selected_Marker(class USQMapWidgetMapMarkerSelectable* Marker_Ref)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Set Selected Marker");

	Params::BP_PlayerController_C_Set_Selected_Marker Parms{};

	Parms.Marker_Ref = Marker_Ref;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Trace Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USQMapMarkerDataAsset*            Marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Hotkey                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           MarkerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Trace_Marker(const struct FVector& Start, const struct FVector& End, class USQMapMarkerDataAsset* Marker, bool Hotkey, bool Emote, class UClass* MarkerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Trace Marker");

	Params::BP_PlayerController_C_Trace_Marker Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Marker = Marker;
	Parms.Hotkey = Hotkey;
	Parms.Emote = Emote;
	Parms.MarkerClass = MarkerClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Request Place Director Marker
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       T                                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Squad                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Request_Place_Director_Marker(class UClass* Action, const struct FTransform& T, float Distance, int32 Squad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Request Place Director Marker");

	Params::BP_PlayerController_C_Request_Place_Director_Marker Parms{};

	Parms.Action = Action;
	Parms.T = std::move(T);
	Parms.Distance = Distance;
	Parms.Squad = Squad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Request Place Command Map Marker
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       T                                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Request_Place_Command_Map_Marker(class UClass* Action, const struct FTransform& T, float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Request Place Command Map Marker");

	Params::BP_PlayerController_C_Request_Place_Command_Map_Marker Parms{};

	Parms.Action = Action;
	Parms.T = std::move(T);
	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Client Notification
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// ESQNotificationTypes                    Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D*                       Custom_Icon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Client_Notification(const class FText& Text, ESQNotificationTypes Type, class UTexture2D* Custom_Icon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Client Notification");

	Params::BP_PlayerController_C_Client_Notification Parms{};

	Parms.Text = std::move(Text);
	Parms.Type = Type;
	Parms.Custom_Icon = Custom_Icon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0");

	Params::BP_PlayerController_C_InpAxisKeyEvt_MouseWheelAxis_K2Node_InputAxisKeyEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.SERVER Set Selected Marker
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQMapWidgetMapMarkerSelectable*  Marker_Ref                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::SERVER_Set_Selected_Marker(class USQMapWidgetMapMarkerSelectable* Marker_Ref)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "SERVER Set Selected Marker");

	Params::BP_PlayerController_C_SERVER_Set_Selected_Marker Parms{};

	Parms.Marker_Ref = Marker_Ref;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.BPTraceMarkerLocation
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TSubclassOf<class ASQMapMarker>         MarkerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// struct FVector                          Start                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::BPTraceMarkerLocation(TSubclassOf<class ASQMapMarker> MarkerClass, const struct FVector& Start, const struct FVector& End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "BPTraceMarkerLocation");

	Params::BP_PlayerController_C_BPTraceMarkerLocation Parms{};

	Parms.MarkerClass = MarkerClass;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.RemoveLastSelectedMarker
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::RemoveLastSelectedMarker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "RemoveLastSelectedMarker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.RequestRemoveMarker
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQMapItemComponent*              MarkerItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::RequestRemoveMarker(class USQMapItemComponent* MarkerItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "RequestRemoveMarker");

	Params::BP_PlayerController_C_RequestRemoveMarker Parms{};

	Parms.MarkerItem = MarkerItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.ServerHidePawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::ServerHidePawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "ServerHidePawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.RequestPlaceMarker
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           MarkerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FireTeamId                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::RequestPlaceMarker(class UClass* MarkerClass, const struct FVector& Location, const int32& FireTeamId, bool Emote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "RequestPlaceMarker");

	Params::BP_PlayerController_C_RequestPlaceMarker Parms{};

	Parms.MarkerClass = MarkerClass;
	Parms.Location = std::move(Location);
	Parms.FireTeamId = FireTeamId;
	Parms.Emote = Emote;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.ServerEnableCamera
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::ServerEnableCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "ServerEnableCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.BlueprintPlayerDied
// (Event, Public, BlueprintEvent)

void ABP_PlayerController_C::BlueprintPlayerDied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "BlueprintPlayerDied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.BlueprintPlayerSpawned
// (Event, Public, BlueprintEvent)

void ABP_PlayerController_C::BlueprintPlayerSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "BlueprintPlayerSpawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.StopShowingTMenu
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::StopShowingTMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "StopShowingTMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.BlueprintOnMatchEnded
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   WinningTeam                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LosingTeam                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WinnerTickets                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LoserTickets                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::BlueprintOnMatchEnded(int32 WinningTeam, int32 LosingTeam, int32 WinnerTickets, int32 LoserTickets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "BlueprintOnMatchEnded");

	Params::BP_PlayerController_C_BlueprintOnMatchEnded Parms{};

	Parms.WinningTeam = WinningTeam;
	Parms.LosingTeam = LosingTeam;
	Parms.WinnerTickets = WinnerTickets;
	Parms.LoserTickets = LoserTickets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_ModifyZeroing_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_ModifyZeroing_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_ModifyZeroing_K2Node_InputActionEvent_0");

	Params::BP_PlayerController_C_InpActEvt_ModifyZeroing_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_ModifyZeroing_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_ModifyZeroing_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_ModifyZeroing_K2Node_InputActionEvent_1");

	Params::BP_PlayerController_C_InpActEvt_ModifyZeroing_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_ToggleSquadList_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_ToggleSquadList_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_ToggleSquadList_K2Node_InputActionEvent_2");

	Params::BP_PlayerController_C_InpActEvt_ToggleSquadList_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_ToggleCompassView_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_ToggleCompassView_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_ToggleCompassView_K2Node_InputActionEvent_3");

	Params::BP_PlayerController_C_InpActEvt_ToggleCompassView_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.OnLoaded_3D0EA11243E739CDAFB9A48F64F98F7F
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::OnLoaded_3D0EA11243E739CDAFB9A48F64F98F7F(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "OnLoaded_3D0EA11243E739CDAFB9A48F64F98F7F");

	Params::BP_PlayerController_C_OnLoaded_3D0EA11243E739CDAFB9A48F64F98F7F Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_4");

	Params::BP_PlayerController_C_InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_Interact_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_Interact_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_Interact_K2Node_InputActionEvent_5");

	Params::BP_PlayerController_C_InpActEvt_Interact_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_ChatToTeam_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_ChatToTeam_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_ChatToTeam_K2Node_InputActionEvent_6");

	Params::BP_PlayerController_C_InpActEvt_ChatToTeam_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_ChatToSquad_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_ChatToSquad_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_ChatToSquad_K2Node_InputActionEvent_7");

	Params::BP_PlayerController_C_InpActEvt_ChatToSquad_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_ChatToAll_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_ChatToAll_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_ChatToAll_K2Node_InputActionEvent_8");

	Params::BP_PlayerController_C_InpActEvt_ChatToAll_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_CommandMap_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_CommandMap_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_CommandMap_K2Node_InputActionEvent_9");

	Params::BP_PlayerController_C_InpActEvt_CommandMap_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_MapZoom_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_MapZoom_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_MapZoom_K2Node_InputActionEvent_10");

	Params::BP_PlayerController_C_InpActEvt_MapZoom_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_CommandMenu_K2Node_InputActionEvent_11
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_CommandMenu_K2Node_InputActionEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_CommandMenu_K2Node_InputActionEvent_11");

	Params::BP_PlayerController_C_InpActEvt_CommandMenu_K2Node_InputActionEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_CommandMenu_K2Node_InputActionEvent_12
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_CommandMenu_K2Node_InputActionEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_CommandMenu_K2Node_InputActionEvent_12");

	Params::BP_PlayerController_C_InpActEvt_CommandMenu_K2Node_InputActionEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_Shift_P_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_Shift_P_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_Shift_P_K2Node_InputKeyEvent_0");

	Params::BP_PlayerController_C_InpActEvt_Shift_P_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_ToggleScoreboard_K2Node_InputActionEvent_13
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_ToggleScoreboard_K2Node_InputActionEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_ToggleScoreboard_K2Node_InputActionEvent_13");

	Params::BP_PlayerController_C_InpActEvt_ToggleScoreboard_K2Node_InputActionEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_Scoreboard_K2Node_InputActionEvent_14
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_Scoreboard_K2Node_InputActionEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_Scoreboard_K2Node_InputActionEvent_14");

	Params::BP_PlayerController_C_InpActEvt_Scoreboard_K2Node_InputActionEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_Scoreboard_K2Node_InputActionEvent_15
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_Scoreboard_K2Node_InputActionEvent_15(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_Scoreboard_K2Node_InputActionEvent_15");

	Params::BP_PlayerController_C_InpActEvt_Scoreboard_K2Node_InputActionEvent_15 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_Map_K2Node_InputActionEvent_16
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_Map_K2Node_InputActionEvent_16(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_Map_K2Node_InputActionEvent_16");

	Params::BP_PlayerController_C_InpActEvt_Map_K2Node_InputActionEvent_16 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_SpawnMenu_K2Node_InputActionEvent_17
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_SpawnMenu_K2Node_InputActionEvent_17(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_SpawnMenu_K2Node_InputActionEvent_17");

	Params::BP_PlayerController_C_InpActEvt_SpawnMenu_K2Node_InputActionEvent_17 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.InpActEvt_InGameMenu_K2Node_InputActionEvent_18
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_C::InpActEvt_InGameMenu_K2Node_InputActionEvent_18(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "InpActEvt_InGameMenu_K2Node_InputActionEvent_18");

	Params::BP_PlayerController_C_InpActEvt_InGameMenu_K2Node_InputActionEvent_18 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.HideGameMenus
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::HideGameMenus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "HideGameMenus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.OnRep_Current Kit
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::OnRep_Current_Kit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "OnRep_Current Kit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.OnFireWeaponOverride
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerController_C::OnFireWeaponOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "OnFireWeaponOverride");

	Params::BP_PlayerController_C_OnFireWeaponOverride Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerController.BP_PlayerController_C.OnAltFireWeaponOverride
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerController_C::OnAltFireWeaponOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "OnAltFireWeaponOverride");

	Params::BP_PlayerController_C_OnAltFireWeaponOverride Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerController.BP_PlayerController_C.DeploymentKeyAction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::DeploymentKeyAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "DeploymentKeyAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.RoamingMapKeyAction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::RoamingMapKeyAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "RoamingMapKeyAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.ZoomKeyAction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::ZoomKeyAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "ZoomKeyAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.IsSoldierInAVehicle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerController_C::IsSoldierInAVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "IsSoldierInAVehicle");

	Params::BP_PlayerController_C_IsSoldierInAVehicle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerController.BP_PlayerController_C.TraceMarkerLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           MarkerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USQMapMarkerDataAsset*            In_Marker                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Hotkeyed                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ValidPosition                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    StillInCooldown                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::TraceMarkerLocation(class UClass* MarkerClass, const struct FVector& Start, const struct FVector& End, class USQMapMarkerDataAsset* In_Marker, bool Hotkeyed, bool Emote, bool* ValidPosition, bool* StillInCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "TraceMarkerLocation");

	Params::BP_PlayerController_C_TraceMarkerLocation Parms{};

	Parms.MarkerClass = MarkerClass;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.In_Marker = In_Marker;
	Parms.Hotkeyed = Hotkeyed;
	Parms.Emote = Emote;

	UObject::ProcessEvent(Func, &Parms);

	if (ValidPosition != nullptr)
		*ValidPosition = Parms.ValidPosition;

	if (StillInCooldown != nullptr)
		*StillInCooldown = Parms.StillInCooldown;
}


// Function BP_PlayerController.BP_PlayerController_C.ManageMarkers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQMapMarker*                     NewMarker                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::ManageMarkers(class ASQMapMarker* NewMarker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "ManageMarkers");

	Params::BP_PlayerController_C_ManageMarkers Parms{};

	Parms.NewMarker = NewMarker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.ClearFiring
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::ClearFiring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "ClearFiring");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Leave Menu
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::Leave_Menu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Leave Menu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.CommandKeyAction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::CommandKeyAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "CommandKeyAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Can Remove Marker
// (Public, BlueprintCallable, BlueprintEvent, BlueprintPure)

void ABP_PlayerController_C::Can_Remove_Marker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Can Remove Marker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Can Place Marker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::Can_Place_Marker(bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Can Place Marker");

	Params::BP_PlayerController_C_Can_Place_Marker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BP_PlayerController.BP_PlayerController_C.MouseWheelZoomMapAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MouseWheelAxis                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::MouseWheelZoomMapAction(float MouseWheelAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "MouseWheelZoomMapAction");

	Params::BP_PlayerController_C_MouseWheelZoomMapAction Parms{};

	Parms.MouseWheelAxis = MouseWheelAxis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Remove Fireteam Markers
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAction                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::Remove_Fireteam_Markers(bool bAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Remove Fireteam Markers");

	Params::BP_PlayerController_C_Remove_Fireteam_Markers Parms{};

	Parms.bAction = bAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Force Show Spawns on Map
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::Force_Show_Spawns_on_Map()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Force Show Spawns on Map");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Cancel Spawn
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::Cancel_Spawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Cancel Spawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Try to Open Menu
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::Try_to_Open_Menu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Try to Open Menu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Remove Last Command Request Marker
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::Remove_Last_Command_Request_Marker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Remove Last Command Request Marker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Create Command Request
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Create_Command_Request(class UClass* Action, const struct FTransform& Transform, float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Create Command Request");

	Params::BP_PlayerController_C_Create_Command_Request Parms{};

	Parms.Action = Action;
	Parms.Transform = std::move(Transform);
	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Create Director Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Squad                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Create_Director_Marker(class UClass* Action, const struct FTransform& Transform, float Distance, int32 Squad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Create Director Marker");

	Params::BP_PlayerController_C_Create_Director_Marker Parms{};

	Parms.Action = Action;
	Parms.Transform = std::move(Transform);
	Parms.Distance = Distance;
	Parms.Squad = Squad;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Get Deployable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Deployable                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Get_Deployable(class UClass** Deployable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Get Deployable");

	Params::BP_PlayerController_C_Get_Deployable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Deployable != nullptr)
		*Deployable = Parms.Deployable;
}


// Function BP_PlayerController.BP_PlayerController_C.PossessAdminCam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_C::PossessAdminCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "PossessAdminCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController.BP_PlayerController_C.Set Out of Bounds Notification
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::Set_Out_of_Bounds_Notification(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Set Out of Bounds Notification");

	Params::BP_PlayerController_C_Set_Out_of_Bounds_Notification Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.HandleFireteamUpdatedNotification
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FireTeamIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFTL                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::HandleFireteamUpdatedNotification(int32 FireTeamIndex, bool IsFTL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "HandleFireteamUpdatedNotification");

	Params::BP_PlayerController_C_HandleFireteamUpdatedNotification Parms{};

	Parms.FireTeamIndex = FireTeamIndex;
	Parms.IsFTL = IsFTL;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.Set Restricted Team Zone Notification
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::Set_Restricted_Team_Zone_Notification(bool Show)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Set Restricted Team Zone Notification");

	Params::BP_PlayerController_C_Set_Restricted_Team_Zone_Notification Parms{};

	Parms.Show = Show;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController.BP_PlayerController_C.IsAimingDownSights
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_PlayerController_C::IsAimingDownSights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "IsAimingDownSights");

	Params::BP_PlayerController_C_IsAimingDownSights Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PlayerController.BP_PlayerController_C.bCan Place Marker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Can_Place                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::bCan_Place_Marker(bool* Can_Place)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "bCan Place Marker");

	Params::BP_PlayerController_C_bCan_Place_Marker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Can_Place != nullptr)
		*Can_Place = Parms.Can_Place;
}


// Function BP_PlayerController.BP_PlayerController_C.bCan Remove Marker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Can_Remove                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::bCan_Remove_Marker(bool* Can_Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "bCan Remove Marker");

	Params::BP_PlayerController_C_bCan_Remove_Marker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Can_Remove != nullptr)
		*Can_Remove = Parms.Can_Remove;
}


// Function BP_PlayerController.BP_PlayerController_C.Get Last Selected Marker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQMapWidgetMapMarkerSelectable*  Marker                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Get_Last_Selected_Marker(class USQMapWidgetMapMarkerSelectable** Marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Get Last Selected Marker");

	Params::BP_PlayerController_C_Get_Last_Selected_Marker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Marker != nullptr)
		*Marker = Parms.Marker;
}


// Function BP_PlayerController.BP_PlayerController_C.Get Command Action Condition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Condition_Class                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Get_Command_Action_Condition(class UClass** Condition_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Get Command Action Condition");

	Params::BP_PlayerController_C_Get_Command_Action_Condition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Condition_Class != nullptr)
		*Condition_Class = Parms.Condition_Class;
}


// Function BP_PlayerController.BP_PlayerController_C.Get Command Request Available
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Available                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Remaining_Time                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_C::Get_Command_Request_Available(bool* Available, float* Remaining_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "Get Command Request Available");

	Params::BP_PlayerController_C_Get_Command_Request_Available Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Available != nullptr)
		*Available = Parms.Available;

	if (Remaining_Time != nullptr)
		*Remaining_Time = Parms.Remaining_Time;
}


// Function BP_PlayerController.BP_PlayerController_C.bCanRemoveMapMarkerNew
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MapMarker_Selectable_C*       Map_Marker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Can_Remove                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::bCanRemoveMapMarkerNew(class UBP_MapMarker_Selectable_C* Map_Marker, bool* Can_Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "bCanRemoveMapMarkerNew");

	Params::BP_PlayerController_C_bCanRemoveMapMarkerNew Parms{};

	Parms.Map_Marker = Map_Marker;

	UObject::ProcessEvent(Func, &Parms);

	if (Can_Remove != nullptr)
		*Can_Remove = Parms.Can_Remove;
}


// Function BP_PlayerController.BP_PlayerController_C.CanOpenRadialMenu
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Param_CanOpenRadialMenu                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_C::CanOpenRadialMenu(bool* Param_CanOpenRadialMenu) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "CanOpenRadialMenu");

	Params::BP_PlayerController_C_CanOpenRadialMenu Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_CanOpenRadialMenu != nullptr)
		*Param_CanOpenRadialMenu = Parms.Param_CanOpenRadialMenu;
}


// Function BP_PlayerController.BP_PlayerController_C.GetDeployableReference
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class USQDeployableSettings*            InDeployableSettings                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftClassPtr<class UClass>             OutDeployableReference                                 (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)

void ABP_PlayerController_C::GetDeployableReference(class USQDeployableSettings* InDeployableSettings, TSoftClassPtr<class UClass>* OutDeployableReference) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_C", "GetDeployableReference");

	Params::BP_PlayerController_C_GetDeployableReference Parms{};

	Parms.InDeployableSettings = InDeployableSettings;

	UObject::ProcessEvent(Func, &Parms);

	if (OutDeployableReference != nullptr)
		*OutDeployableReference = Parms.OutDeployableReference;
}

}

