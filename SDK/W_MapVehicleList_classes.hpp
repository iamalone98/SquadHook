#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MapVehicleList

#include "Basic.hpp"

#include "S_VehicleListData_structs.hpp"
#include "Engine_structs.hpp"
#include "S_VehicleListDataArray_structs.hpp"
#include "ESQVehicle_structs.hpp"
#include "UMG_classes.hpp"
#include "ESQVehicleTag_structs.hpp"
#include "ESQIntelligence_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_MapVehicleList.W_MapVehicleList_C
// 0x01C8 (0x0428 - 0x0260)
class UW_MapVehicleList_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USizeBox*                               Availability_NME;                                  // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           EnemyBox;                                          // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollBox_Ally;                                    // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollBox_Enemy;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Separator;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               Timer_NME;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ASQPlayerState*                         SQ_PS;                                             // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_VehicleListData>             SortedAlliedVehicles;                              // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FS_VehicleListData>             SortedEnemyVehicles;                               // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UClass*                                 Kill_Death_Ruleset;                                // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldShowEnemyFullStatus;                         // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4007[0x7];                                     // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UW_MapVehicleListItem_C*> AlliesItems;                                       // 0x02D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class FName, class UW_MapVehicleListItem_C*> EnemiesItems;                                      // 0x0320(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         LocalPlayerTeamId;                                 // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4008[0x4];                                     // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESQVehicle>                            CategorySortOrder;                                 // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<ESQVehicle, struct FS_VehicleListDataArray> CategoryToAlliedVehicles;                          // 0x0388(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<ESQVehicle, struct FS_VehicleListDataArray> CategoryToEnemyVehicles;                           // 0x03D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_W_MapVehicleList(int32 EntryPoint);
	void UpdateVehicleStatus();
	void Construct();
	void Collect_Vehicle_Data();
	void Draw_Sorted_Vehicle_Data();
	void Sort_Vics_by_Cost(TArray<struct FS_VehicleListData>& To_Sort, TArray<struct FS_VehicleListData>* Out_Sorted);
	void Cache_KillDeath_Ruleset();
	void AddVehicleToList(class UBP_SQAvailability_Vehicle_C* Vehicle, int32 TeamId, bool IsFriendly);
	void ConvertId(class FName In_Id, class USQAvailability* Availability, class FName* Out_Key);
	void ShouldShowEnemyDetails(ESQIntelligence Intel, bool* ShowDetails);
	void SortColumn();
	void EnsureMappingsSet();

	void GetTicketsForEnemyVehicleKill(int32 Team_ID, class UBP_SQVehicleSettings_C* In_Vehicle_Setting, int32* Tickets) const;
	void GetTicketsForVehicleLoss(class UBP_SQVehicleSettings_C* In_Vehicle_Setting, int32* Tickets) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_MapVehicleList_C">();
	}
	static class UW_MapVehicleList_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_MapVehicleList_C>();
	}
};
static_assert(alignof(UW_MapVehicleList_C) == 0x000008, "Wrong alignment on UW_MapVehicleList_C");
static_assert(sizeof(UW_MapVehicleList_C) == 0x000428, "Wrong size on UW_MapVehicleList_C");
static_assert(offsetof(UW_MapVehicleList_C, UberGraphFrame) == 0x000260, "Member 'UW_MapVehicleList_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, Availability_NME) == 0x000268, "Member 'UW_MapVehicleList_C::Availability_NME' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, EnemyBox) == 0x000270, "Member 'UW_MapVehicleList_C::EnemyBox' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, ScrollBox_Ally) == 0x000278, "Member 'UW_MapVehicleList_C::ScrollBox_Ally' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, ScrollBox_Enemy) == 0x000280, "Member 'UW_MapVehicleList_C::ScrollBox_Enemy' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, Separator) == 0x000288, "Member 'UW_MapVehicleList_C::Separator' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, Timer_NME) == 0x000290, "Member 'UW_MapVehicleList_C::Timer_NME' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, SQ_PS) == 0x000298, "Member 'UW_MapVehicleList_C::SQ_PS' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, SortedAlliedVehicles) == 0x0002A0, "Member 'UW_MapVehicleList_C::SortedAlliedVehicles' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, SortedEnemyVehicles) == 0x0002B0, "Member 'UW_MapVehicleList_C::SortedEnemyVehicles' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, Kill_Death_Ruleset) == 0x0002C0, "Member 'UW_MapVehicleList_C::Kill_Death_Ruleset' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, ShouldShowEnemyFullStatus) == 0x0002C8, "Member 'UW_MapVehicleList_C::ShouldShowEnemyFullStatus' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, AlliesItems) == 0x0002D0, "Member 'UW_MapVehicleList_C::AlliesItems' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, EnemiesItems) == 0x000320, "Member 'UW_MapVehicleList_C::EnemiesItems' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, LocalPlayerTeamId) == 0x000370, "Member 'UW_MapVehicleList_C::LocalPlayerTeamId' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, CategorySortOrder) == 0x000378, "Member 'UW_MapVehicleList_C::CategorySortOrder' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, CategoryToAlliedVehicles) == 0x000388, "Member 'UW_MapVehicleList_C::CategoryToAlliedVehicles' has a wrong offset!");
static_assert(offsetof(UW_MapVehicleList_C, CategoryToEnemyVehicles) == 0x0003D8, "Member 'UW_MapVehicleList_C::CategoryToEnemyVehicles' has a wrong offset!");

}

