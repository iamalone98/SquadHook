#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lake_Squad

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Lake_Squad.BP_Lake_Squad_C.GetActorImmersionDepth
// 0x0010 (0x0010 - 0x0000)
struct BP_Lake_Squad_C_GetActorImmersionDepth final
{
public:
	const class AActor*                           QueryingActor;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetActorImmersionDepthInWater_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lake_Squad_C_GetActorImmersionDepth) == 0x000008, "Wrong alignment on BP_Lake_Squad_C_GetActorImmersionDepth");
static_assert(sizeof(BP_Lake_Squad_C_GetActorImmersionDepth) == 0x000010, "Wrong size on BP_Lake_Squad_C_GetActorImmersionDepth");
static_assert(offsetof(BP_Lake_Squad_C_GetActorImmersionDepth, QueryingActor) == 0x000000, "Member 'BP_Lake_Squad_C_GetActorImmersionDepth::QueryingActor' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_GetActorImmersionDepth, ReturnValue) == 0x000008, "Member 'BP_Lake_Squad_C_GetActorImmersionDepth::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_GetActorImmersionDepth, CallFunc_GetActorImmersionDepthInWater_ReturnValue) == 0x00000C, "Member 'BP_Lake_Squad_C_GetActorImmersionDepth::CallFunc_GetActorImmersionDepthInWater_ReturnValue' has a wrong offset!");

// Function BP_Lake_Squad.BP_Lake_Squad_C.HasValidProjectileOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct BP_Lake_Squad_C_HasValidProjectileOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BA6[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WaterHasValidOverlap_ReturnValue;         // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lake_Squad_C_HasValidProjectileOverlap) == 0x000008, "Wrong alignment on BP_Lake_Squad_C_HasValidProjectileOverlap");
static_assert(sizeof(BP_Lake_Squad_C_HasValidProjectileOverlap) == 0x0000B0, "Wrong size on BP_Lake_Squad_C_HasValidProjectileOverlap");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileOverlap, OverlappedComponent) == 0x000000, "Member 'BP_Lake_Squad_C_HasValidProjectileOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileOverlap, OtherActor) == 0x000008, "Member 'BP_Lake_Squad_C_HasValidProjectileOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileOverlap, OtherComp) == 0x000010, "Member 'BP_Lake_Squad_C_HasValidProjectileOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileOverlap, OtherBodyIndex) == 0x000018, "Member 'BP_Lake_Squad_C_HasValidProjectileOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileOverlap, bFromSweep) == 0x00001C, "Member 'BP_Lake_Squad_C_HasValidProjectileOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileOverlap, SweepResult) == 0x000020, "Member 'BP_Lake_Squad_C_HasValidProjectileOverlap::SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileOverlap, ReturnValue) == 0x0000A8, "Member 'BP_Lake_Squad_C_HasValidProjectileOverlap::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileOverlap, CallFunc_WaterHasValidOverlap_ReturnValue) == 0x0000A9, "Member 'BP_Lake_Squad_C_HasValidProjectileOverlap::CallFunc_WaterHasValidOverlap_ReturnValue' has a wrong offset!");

// Function BP_Lake_Squad.BP_Lake_Squad_C.HasValidProjectileHit
// 0x0098 (0x0098 - 0x0000)
struct BP_Lake_Squad_C_HasValidProjectileHit final
{
public:
	const class AActor*                           ProjectileOwner;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             InHit;                                             // 0x0008(0x0088)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_WaterHasValidHit_ReturnValue;             // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lake_Squad_C_HasValidProjectileHit) == 0x000008, "Wrong alignment on BP_Lake_Squad_C_HasValidProjectileHit");
static_assert(sizeof(BP_Lake_Squad_C_HasValidProjectileHit) == 0x000098, "Wrong size on BP_Lake_Squad_C_HasValidProjectileHit");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileHit, ProjectileOwner) == 0x000000, "Member 'BP_Lake_Squad_C_HasValidProjectileHit::ProjectileOwner' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileHit, InHit) == 0x000008, "Member 'BP_Lake_Squad_C_HasValidProjectileHit::InHit' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileHit, ReturnValue) == 0x000090, "Member 'BP_Lake_Squad_C_HasValidProjectileHit::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lake_Squad_C_HasValidProjectileHit, CallFunc_WaterHasValidHit_ReturnValue) == 0x000091, "Member 'BP_Lake_Squad_C_HasValidProjectileHit::CallFunc_WaterHasValidHit_ReturnValue' has a wrong offset!");

}

