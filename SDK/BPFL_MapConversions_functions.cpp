#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_MapConversions

#include "Basic.hpp"

#include "BPFL_MapConversions_classes.hpp"
#include "BPFL_MapConversions_parameters.hpp"


namespace SDK
{

// Function BPFL_MapConversions.BPFL_MapConversions_C.Get World Distance from Relative Origin
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Relative_Map_Position                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     Map_Body                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   World_Distance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_MapConversions_C::Get_World_Distance_from_Relative_Origin(const struct FVector2D& Relative_Map_Position, class UPanelWidget* Map_Body, class UObject* __WorldContext, float* World_Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_MapConversions_C", "Get World Distance from Relative Origin");

	Params::BPFL_MapConversions_C_Get_World_Distance_from_Relative_Origin Parms{};

	Parms.Relative_Map_Position = std::move(Relative_Map_Position);
	Parms.Map_Body = Map_Body;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (World_Distance != nullptr)
		*World_Distance = Parms.World_Distance;
}


// Function BPFL_MapConversions.BPFL_MapConversions_C.Get Angle From Mouse Vector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Relative_Map_Position                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     Map_Body                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         World_Rotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_MapConversions_C::Get_Angle_From_Mouse_Vector(const struct FVector2D& Relative_Map_Position, class UPanelWidget* Map_Body, class UObject* __WorldContext, float* Angle, struct FRotator* World_Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_MapConversions_C", "Get Angle From Mouse Vector");

	Params::BPFL_MapConversions_C_Get_Angle_From_Mouse_Vector Parms{};

	Parms.Relative_Map_Position = std::move(Relative_Map_Position);
	Parms.Map_Body = Map_Body;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;

	if (World_Rotation != nullptr)
		*World_Rotation = std::move(Parms.World_Rotation);
}


// Function BPFL_MapConversions.BPFL_MapConversions_C.Get Pixel Distance from Relative Origin
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Relative_Map_Position                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPanelWidget*                     Map_Body                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Pixel_Distance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_MapConversions_C::Get_Pixel_Distance_from_Relative_Origin(const struct FVector2D& Relative_Map_Position, class UPanelWidget* Map_Body, class UObject* __WorldContext, float* Pixel_Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_MapConversions_C", "Get Pixel Distance from Relative Origin");

	Params::BPFL_MapConversions_C_Get_Pixel_Distance_from_Relative_Origin Parms{};

	Parms.Relative_Map_Position = std::move(Relative_Map_Position);
	Parms.Map_Body = Map_Body;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Pixel_Distance != nullptr)
		*Pixel_Distance = Parms.Pixel_Distance;
}


// Function BPFL_MapConversions.BPFL_MapConversions_C.Map Position to World Location
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Relative_Map_Position                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          World_Location__XY_                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_MapConversions_C::Map_Position_to_World_Location(const struct FVector2D& Relative_Map_Position, class UObject* __WorldContext, struct FVector* World_Location__XY_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_MapConversions_C", "Map Position to World Location");

	Params::BPFL_MapConversions_C_Map_Position_to_World_Location Parms{};

	Parms.Relative_Map_Position = std::move(Relative_Map_Position);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (World_Location__XY_ != nullptr)
		*World_Location__XY_ = std::move(Parms.World_Location__XY_);
}


// Function BPFL_MapConversions.BPFL_MapConversions_C.Mouse Position to World Location
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector2D                        Mouse_Screen_Position                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBPFL_MapConversions_C::Mouse_Position_to_World_Location(const struct FVector2D& Mouse_Screen_Position, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_MapConversions_C", "Mouse Position to World Location");

	Params::BPFL_MapConversions_C_Mouse_Position_to_World_Location Parms{};

	Parms.Mouse_Screen_Position = std::move(Mouse_Screen_Position);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPFL_MapConversions.BPFL_MapConversions_C.Get Pixel Distance to World Distance
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Pixel_Distance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   World_Distance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_MapConversions_C::Get_Pixel_Distance_to_World_Distance(float Pixel_Distance, class UObject* __WorldContext, float* World_Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_MapConversions_C", "Get Pixel Distance to World Distance");

	Params::BPFL_MapConversions_C_Get_Pixel_Distance_to_World_Distance Parms{};

	Parms.Pixel_Distance = Pixel_Distance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (World_Distance != nullptr)
		*World_Distance = Parms.World_Distance;
}


// Function BPFL_MapConversions.BPFL_MapConversions_C.Get Map Distance to Pixel Distance
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Map_Distance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Pixel_Distance                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_MapConversions_C::Get_Map_Distance_to_Pixel_Distance(float Map_Distance, class UObject* __WorldContext, float* Pixel_Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_MapConversions_C", "Get Map Distance to Pixel Distance");

	Params::BPFL_MapConversions_C_Get_Map_Distance_to_Pixel_Distance Parms{};

	Parms.Map_Distance = Map_Distance;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Pixel_Distance != nullptr)
		*Pixel_Distance = Parms.Pixel_Distance;
}


// Function BPFL_MapConversions.BPFL_MapConversions_C.Get World Distance to Pixel Distance
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   In_Centimetres                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Pixel                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_MapConversions_C::Get_World_Distance_to_Pixel_Distance(float In_Centimetres, class UObject* __WorldContext, float* Pixel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_MapConversions_C", "Get World Distance to Pixel Distance");

	Params::BPFL_MapConversions_C_Get_World_Distance_to_Pixel_Distance Parms{};

	Parms.In_Centimetres = In_Centimetres;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Pixel != nullptr)
		*Pixel = Parms.Pixel;
}

}

